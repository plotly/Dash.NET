[{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net.html","title":"Dash.NET","content":"ComponentPropTypes \nCss \nDashTable \nDynamicInvoke \nHtml \nOperators \nCallback\u003C\u0027Function\u003E \nCallbackInput \nCallbackMap \nCallbackOutput \nCallbackRequest \nCallbackResponse \nCallbackResultBinding \nCallbackState \nClientSideFunction \nComponentProperty \nDashComponent \nDashComponentProps \nDashComponentStyle \nDashConfig \nDependency \nHotReloadSettings \nLoadableComponentDefinition \nRequestInput \nSingleOrArrayConverter\u003C\u0027T\u003E"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common.html","title":"Dash.NET.Common","content":"DU \nDynObj \nJson \nNamingStrategy \nProp"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc.html","title":"Dash.NET.DCC","content":"Checklist \nClipboard \nDropdown \nGraph \nInput \nInterval \nLoading \nLocation \nMarkdown \nRadioItems \nSlider \nStore \nTab \nTabs \nTextarea \nUpload"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe.html","title":"Dash.NET.Giraffe","content":"Views \nDashApp \nDashGiraffeConfig"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-interactive.html","title":"Dash.NET.Interactive","content":"Util \nDashInteractiveExtension"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave.html","title":"Dash.NET.Suave","content":"Util \nViews \nDashApp \nDashSuaveConfig"},{"uri":"https://plotly.github.io/Dash.NET/reference/global.html","title":"global","content":"CallbackBuilder"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes.html","title":"ComponentPropTypes","content":"ComponentPropTypes \n \nComponentPropTypes.ChecklistOption \nChecklistOption \nComponentPropTypes.DropdownOption \nDropdownOption \nComponentPropTypes.InputMode \nInputMode \nComponentPropTypes.InputType \nInputType \nComponentPropTypes.LoadingState \nLoadingState \nComponentPropTypes.PersistenceTypeOptions \nPersistenceTypeOptions \nComponentPropTypes.RadioItemsOption \nRadioItemsOption \nComponentPropTypes.SpellCheckOptions \nSpellCheckOptions \nComponentPropTypes.TabColors \nTabColors"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-checklistoption.html","title":"ChecklistOption","content":"ChecklistOption \n \nChecklistOption.( .ctor ) \n( .ctor ) \nChecklistOption.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-checklistoption.html#( .ctor )","title":"ChecklistOption.( .ctor )","content":"ChecklistOption.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-checklistoption.html#init","title":"ChecklistOption.init","content":"ChecklistOption.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-dropdownoption.html","title":"DropdownOption","content":"DropdownOption \n \nDropdownOption.( .ctor ) \n( .ctor ) \nDropdownOption.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-dropdownoption.html#( .ctor )","title":"DropdownOption.( .ctor )","content":"DropdownOption.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-dropdownoption.html#init","title":"DropdownOption.init","content":"DropdownOption.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html","title":"InputMode","content":"InputMode \n \nInputMode.convert \nconvert \nInputMode.toString \ntoString \nInputMode.Verbatim \nVerbatim \nInputMode.Latin \nLatin \nInputMode.LatinName \nLatinName \nInputMode.LatinProse \nLatinProse \nInputMode.FullWidthLatin \nFullWidthLatin \nInputMode.Kana \nKana \nInputMode.Katakana \nKatakana \nInputMode.Numeric \nNumeric \nInputMode.Tel \nTel \nInputMode.Email \nEmail \nInputMode.Url \nUrl"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#convert","title":"InputMode.convert","content":"InputMode.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#toString","title":"InputMode.toString","content":"InputMode.toString \ntoString \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Verbatim","title":"InputMode.Verbatim","content":"InputMode.Verbatim \nVerbatim \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Latin","title":"InputMode.Latin","content":"InputMode.Latin \nLatin \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#LatinName","title":"InputMode.LatinName","content":"InputMode.LatinName \nLatinName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#LatinProse","title":"InputMode.LatinProse","content":"InputMode.LatinProse \nLatinProse \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#FullWidthLatin","title":"InputMode.FullWidthLatin","content":"InputMode.FullWidthLatin \nFullWidthLatin \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Kana","title":"InputMode.Kana","content":"InputMode.Kana \nKana \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Katakana","title":"InputMode.Katakana","content":"InputMode.Katakana \nKatakana \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Numeric","title":"InputMode.Numeric","content":"InputMode.Numeric \nNumeric \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Tel","title":"InputMode.Tel","content":"InputMode.Tel \nTel \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Email","title":"InputMode.Email","content":"InputMode.Email \nEmail \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputmode.html#Url","title":"InputMode.Url","content":"InputMode.Url \nUrl \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html","title":"InputType","content":"InputType \n \nInputType.convert \nconvert \nInputType.toString \ntoString \nInputType.Text \nText \nInputType.Number \nNumber \nInputType.Password \nPassword \nInputType.Email \nEmail \nInputType.Range \nRange \nInputType.Search \nSearch \nInputType.Tel \nTel \nInputType.Url \nUrl \nInputType.Hidden \nHidden"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#convert","title":"InputType.convert","content":"InputType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#toString","title":"InputType.toString","content":"InputType.toString \ntoString \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Text","title":"InputType.Text","content":"InputType.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Number","title":"InputType.Number","content":"InputType.Number \nNumber \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Password","title":"InputType.Password","content":"InputType.Password \nPassword \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Email","title":"InputType.Email","content":"InputType.Email \nEmail \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Range","title":"InputType.Range","content":"InputType.Range \nRange \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Search","title":"InputType.Search","content":"InputType.Search \nSearch \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Tel","title":"InputType.Tel","content":"InputType.Tel \nTel \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Url","title":"InputType.Url","content":"InputType.Url \nUrl \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-inputtype.html#Hidden","title":"InputType.Hidden","content":"InputType.Hidden \nHidden \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-loadingstate.html","title":"LoadingState","content":"LoadingState \n \nLoadingState.( .ctor ) \n( .ctor ) \nLoadingState.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-loadingstate.html#( .ctor )","title":"LoadingState.( .ctor )","content":"LoadingState.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-loadingstate.html#init","title":"LoadingState.init","content":"LoadingState.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-persistencetypeoptions.html","title":"PersistenceTypeOptions","content":"PersistenceTypeOptions \n \nPersistenceTypeOptions.convert \nconvert \nPersistenceTypeOptions.toString \ntoString \nPersistenceTypeOptions.Local \nLocal \nPersistenceTypeOptions.Session \nSession \nPersistenceTypeOptions.Memory \nMemory"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-persistencetypeoptions.html#convert","title":"PersistenceTypeOptions.convert","content":"PersistenceTypeOptions.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-persistencetypeoptions.html#toString","title":"PersistenceTypeOptions.toString","content":"PersistenceTypeOptions.toString \ntoString \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-persistencetypeoptions.html#Local","title":"PersistenceTypeOptions.Local","content":"PersistenceTypeOptions.Local \nLocal \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-persistencetypeoptions.html#Session","title":"PersistenceTypeOptions.Session","content":"PersistenceTypeOptions.Session \nSession \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-persistencetypeoptions.html#Memory","title":"PersistenceTypeOptions.Memory","content":"PersistenceTypeOptions.Memory \nMemory \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-radioitemsoption.html","title":"RadioItemsOption","content":"RadioItemsOption \n \nRadioItemsOption.( .ctor ) \n( .ctor ) \nRadioItemsOption.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-radioitemsoption.html#( .ctor )","title":"RadioItemsOption.( .ctor )","content":"RadioItemsOption.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-radioitemsoption.html#init","title":"RadioItemsOption.init","content":"RadioItemsOption.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-spellcheckoptions.html","title":"SpellCheckOptions","content":"SpellCheckOptions \n \nSpellCheckOptions.convert \nconvert \nSpellCheckOptions.toString \ntoString \nSpellCheckOptions.True \nTrue \nSpellCheckOptions.False \nFalse"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-spellcheckoptions.html#convert","title":"SpellCheckOptions.convert","content":"SpellCheckOptions.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-spellcheckoptions.html#toString","title":"SpellCheckOptions.toString","content":"SpellCheckOptions.toString \ntoString \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-spellcheckoptions.html#True","title":"SpellCheckOptions.True","content":"SpellCheckOptions.True \nTrue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-spellcheckoptions.html#False","title":"SpellCheckOptions.False","content":"SpellCheckOptions.False \nFalse \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-tabcolors.html","title":"TabColors","content":"TabColors \n \nTabColors.( .ctor ) \n( .ctor ) \nTabColors.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-tabcolors.html#( .ctor )","title":"TabColors.( .ctor )","content":"TabColors.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproptypes-tabcolors.html#init","title":"TabColors.init","content":"TabColors.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-css.html","title":"Css","content":"Css \n\n The html components have been adopted from\n https://github.com/alfonsogarciacaro/Feliz.Engine\n and are available under the Dash.NET.Html module.\n \nCss.Style \nStyle \nCss.Css \nCss"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-css.html#Css","title":"Css.Css","content":"Css.Css \nCss \n\n Additional Css helpers are available under the Feliz namespace\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-css-style.html","title":"Style","content":"Style \n \nStyle.StyleProperty \nStyleProperty"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-css-style.html#StyleProperty","title":"Style.StyleProperty","content":"Style.StyleProperty \nStyleProperty \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable.html","title":"DashTable","content":"DashTable \n \nDashTable.DataTable \nDataTable \nDashTable.CdnLink \nCdnLink"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable.html#CdnLink","title":"DashTable.CdnLink","content":"DashTable.CdnLink \nCdnLink \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable.html","title":"DataTable","content":"DataTable \n\nDash DataTable is an interactive table component designed for\ndesigned for viewing, editing, and exploring large datasets.\nDataTable is rendered with standard, semantic HTML \u003Ctable/\u003E markup,\nwhich makes it accessible, responsive, and easy to style. This\ncomponent was written from scratch in React.js specifically for the\nDash community. Its API was designed to be ergonomic and its behavior\nis completely customizable through its properties.\n \nDataTable.Alternate \nAlternate \nDataTable.Attr \nAttr \nDataTable.Cell \nCell \nDataTable.CellStyleCondition \nCellStyleCondition \nDataTable.ClearableColumn \nClearableColumn \nDataTable.Column \nColumn \nDataTable.ColumnFilterOption \nColumnFilterOption \nDataTable.ColumnFormat \nColumnFormat \nDataTable.ColumnOnChange \nColumnOnChange \nDataTable.ColumnPresentation \nColumnPresentation \nDataTable.ColumnTooltip \nColumnTooltip \nDataTable.ColumnType \nColumnType \nDataTable.ColumnValidation \nColumnValidation \nDataTable.ConditionalCellStyle \nConditionalCellStyle \nDataTable.ConditionalColumnIdType \nConditionalColumnIdType \nDataTable.ConditionalDataStyle \nConditionalDataStyle \nDataTable.ConditionalDropdown \nConditionalDropdown \nDataTable.ConditionalFilterAction \nConditionalFilterAction \nDataTable.ConditionalFilterStyle \nConditionalFilterStyle \nDataTable.ConditionalHeaderStyle \nConditionalHeaderStyle \nDataTable.ConditionalTooltip \nConditionalTooltip \nDataTable.Css \nCss \nDataTable.DataStyleCondition \nDataStyleCondition \nDataTable.DataStyleState \nDataStyleState \nDataTable.DataTable \nDataTable \nDataTable.DataTooltip \nDataTooltip \nDataTable.DeletableColumn \nDeletableColumn \nDataTable.Dropdown \nDropdown \nDataTable.DropdownCondition \nDropdownCondition \nDataTable.DropdownOption \nDropdownOption \nDataTable.ExportColumnsType \nExportColumnsType \nDataTable.FailureAction \nFailureAction \nDataTable.FilterAction \nFilterAction \nDataTable.FilterActionOperator \nFilterActionOperator \nDataTable.FilterActionType \nFilterActionType \nDataTable.FilterOption \nFilterOption \nDataTable.FilterSensitivity \nFilterSensitivity \nDataTable.FilterStyleCondition \nFilterStyleCondition \nDataTable.Fixed \nFixed \nDataTable.HeaderStyleCondition \nHeaderStyleCondition \nDataTable.HeaderTooltip \nHeaderTooltip \nDataTable.HideableColumn \nHideableColumn \nDataTable.LinkBehaviour \nLinkBehaviour \nDataTable.LinkTarget \nLinkTarget \nDataTable.Locale \nLocale \nDataTable.MarkdownOption \nMarkdownOption \nDataTable.MaybeActionType \nMaybeActionType \nDataTable.MaybeExportFormat \nMaybeExportFormat \nDataTable.MaybeExportHeaders \nMaybeExportHeaders \nDataTable.MaybeOnChangeAction \nMaybeOnChangeAction \nDataTable.MaybeTooltip \nMaybeTooltip \nDataTable.Prop \nProp \nDataTable.PropName \nPropName \nDataTable.RenamableColumn \nRenamableColumn \nDataTable.Select \nSelect \nDataTable.SelectRowBy \nSelectRowBy \nDataTable.SelectableColumn \nSelectableColumn \nDataTable.SortDirection \nSortDirection \nDataTable.SortModeType \nSortModeType \nDataTable.TableSortBy \nTableSortBy \nDataTable.TogglableColumn \nTogglableColumn \nDataTable.TogglePosition \nTogglePosition \nDataTable.TooltipCondition \nTooltipCondition \nDataTable.TooltipUseWith \nTooltipUseWith \nDataTable.TooltipValue \nTooltipValue \nDataTable.TooltipValueType \nTooltipValueType \nDataTable.UseWithTooltipValue \nUseWithTooltipValue \nDataTable.dataTable \ndataTable"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable.html#dataTable","title":"DataTable.dataTable","content":"DataTable.dataTable \ndataTable \n\nDash DataTable is an interactive table component designed for\ndesigned for viewing, editing, and exploring large datasets.\nDataTable is rendered with standard, semantic HTML \u003Ctable/\u003E markup,\nwhich makes it accessible, responsive, and easy to style. This\ncomponent was written from scratch in React.js specifically for the\nDash community. Its API was designed to be ergonomic and its behavior\nis completely customizable through its properties.\n\n\nProperties:\n\n\n\u2022 active_cell (record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027) - The row and column indices and IDs of the currently active cell.\n\u0060row_id\u0060 is only returned if the data rows have an \u0060id\u0060 key.\n\n\n\u2022 columns (list with values of type: record with the fields: \u0027clearable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027deletable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027editable: boolean (optional)\u0027, \u0027filter_options: record with the field: \u0027case: value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027 (optional)\u0027 (optional)\u0027, \u0027hideable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027renamable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027selectable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027format: record with the fields: \u0027locale: record with the fields: \u0027symbol: list with values of type: string (optional)\u0027, \u0027decimal: string (optional)\u0027, \u0027group: string (optional)\u0027, \u0027grouping: list with values of type: number (optional)\u0027, \u0027numerals: list with values of type: string (optional)\u0027, \u0027percent: string (optional)\u0027, \u0027separate_4digits: boolean (optional)\u0027 (optional)\u0027, \u0027nully: boolean | number | string | record | list (optional)\u0027, \u0027prefix: number (optional)\u0027, \u0027specifier: string (optional)\u0027 (optional)\u0027, \u0027id: string (required)\u0027, \u0027name: string | list with values of type: string (required)\u0027, \u0027presentation: value equal to: \u0027input\u0027, \u0027dropdown\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027on_change: record with the fields: \u0027action: value equal to: \u0027coerce\u0027, \u0027none\u0027, \u0027validate\u0027 (optional)\u0027, \u0027failure: value equal to: \u0027accept\u0027, \u0027default\u0027, \u0027reject\u0027 (optional)\u0027 (optional)\u0027, \u0027sort_as_null: list with values of type: string | number | boolean (optional)\u0027, \u0027validation: record with the fields: \u0027allow_null: boolean (optional)\u0027, \u0027default: boolean | number | string | record | list (optional)\u0027, \u0027allow_YY: boolean (optional)\u0027 (optional)\u0027, \u0027type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027) - Columns describes various aspects about each individual column.\n\u0060name\u0060 and \u0060id\u0060 are the only required parameters.\n\n\n\u2022 include_headers_on_copy_paste (boolean; default false) - If true, headers are included when copying from the table to different\ntabs and elsewhere. Note that headers are ignored when copying from the table onto itself and\nbetween two tables within the same tab.\n\n\n\u2022 locale_format (record with the fields: \u0027symbol: list with values of type: string (optional)\u0027, \u0027decimal: string (optional)\u0027, \u0027group: string (optional)\u0027, \u0027grouping: list with values of type: number (optional)\u0027, \u0027numerals: list with values of type: string (optional)\u0027, \u0027percent: string (optional)\u0027, \u0027separate_4digits: boolean (optional)\u0027) - The localization specific formatting information applied to all columns in the table.\nThis prop is derived from the [d3.formatLocale](https://github.com/d3/d3-format#formatLocale) data structure specification.\nWhen left unspecified, each individual nested prop will default to a pre-determined value.\n\n\n\u2022 markdown_options (record with the fields: \u0027link_target: string | value equal to: \u0027_blank\u0027, \u0027_parent\u0027, \u0027_self\u0027, \u0027_top\u0027 (optional)\u0027, \u0027html: boolean (optional)\u0027; default {\n    link_target: \u0027_blank\u0027,\n    html: false\n}) - The \u0060markdown_options\u0060 property allows customization of the markdown cells behavior.\n\n\n\u2022 css (list with values of type: record with the fields: \u0027selector: string (required)\u0027, \u0027rule: string (required)\u0027; default []) - The \u0060css\u0060 property is a way to embed CSS selectors and rules\nonto the page.\nWe recommend starting with the \u0060style_*\u0060 properties\nbefore using this \u0060css\u0060 property.\nExample:\n[\n    {\u0022selector\u0022: \u0022.dash-spreadsheet\u0022, \u0022rule\u0022: \u0027font-family: \u0022monospace\u0022\u0027}\n]\n\n\n\u2022 data (list with values of type: record) - The contents of the table.\nThe keys of each item in data should match the column IDs.\nEach item can also have an \u0027id\u0027 key, whose value is its row ID. If there\nis a column with ID=\u0027id\u0027 this will display the row ID, otherwise it is\njust used to reference the row for selections, filtering, etc.\nExample:\n[\n     {\u0027column-1\u0027: 4.5, \u0027column-2\u0027: \u0027montreal\u0027, \u0027column-3\u0027: \u0027canada\u0027},\n     {\u0027column-1\u0027: 8, \u0027column-2\u0027: \u0027boston\u0027, \u0027column-3\u0027: \u0027america\u0027}\n]\n\n\n\u2022 data_previous (list with values of type: record) - The previous state of \u0060data\u0060. \u0060data_previous\u0060\nhas the same structure as \u0060data\u0060 and it will be updated\nwhenever \u0060data\u0060 changes, either through a callback or\nby editing the table.\nThis is a read-only property: setting this property will not\nhave any impact on the table.\n\n\n\u2022 data_timestamp (number) - The unix timestamp when the data was last edited.\nUse this property with other timestamp properties\n(such as \u0060n_clicks_timestamp\u0060 in \u0060dash_html_components\u0060)\nto determine which property has changed within a callback.\n\n\n\u2022 editable (boolean; default false) - If True, then the data in all of the cells is editable.\nWhen \u0060editable\u0060 is True, particular columns can be made\nuneditable by setting \u0060editable\u0060 to \u0060False\u0060 inside the \u0060columns\u0060\nproperty.\nIf False, then the data in all of the cells is uneditable.\nWhen \u0060editable\u0060 is False, particular columns can be made\neditable by setting \u0060editable\u0060 to \u0060True\u0060 inside the \u0060columns\u0060\nproperty.\n\n\n\u2022 end_cell (record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027) - When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n\u0060end_cell\u0060 represents the row / column coordinates and IDs of the cell\nin one of the corners of the region.\n\u0060start_cell\u0060 represents the coordinates of the other corner.\n\n\n\u2022 export_columns (value equal to: \u0027all\u0027, \u0027visible\u0027; default visible) - Denotes the columns that will be used in the export data file.\nIf \u0060all\u0060, all columns will be used (visible \u002B hidden). If \u0060visible\u0060,\nonly the visible columns will be used. Defaults to \u0060visible\u0060.\n\n\n\u2022 export_format (value equal to: \u0027csv\u0027, \u0027xlsx\u0027, \u0027none\u0027; default none) - Denotes the type of the export data file,\nDefaults to \u0060\u0027none\u0027\u0060\n\n\n\u2022 export_headers (value equal to: \u0027none\u0027, \u0027ids\u0027, \u0027names\u0027, \u0027display\u0027) - Denotes the format of the headers in the export data file.\nIf \u0060\u0027none\u0027\u0060, there will be no header. If \u0060\u0027display\u0027\u0060, then the header\nof the data file will be be how it is currently displayed. Note that\n\u0060\u0027display\u0027\u0060 is only supported for \u0060\u0027xlsx\u0027\u0060 export_format and will behave\nlike \u0060\u0027names\u0027\u0060 for \u0060\u0027csv\u0027\u0060 export format. If \u0060\u0027ids\u0027\u0060 or \u0060\u0027names\u0027\u0060,\nthen the headers of data file will be the column id or the column\nnames, respectively\n\n\n\u2022 fill_width (boolean; default true) - \u0060fill_width\u0060 toggles between a set of CSS for two common behaviors:\nTrue: The table container\u0027s width will grow to fill the available space;\nFalse: The table container\u0027s width will equal the width of its content.\n\n\n\u2022 hidden_columns (list with values of type: string) - List of columns ids of the columns that are currently hidden.\nSee the associated nested prop \u0060columns.hideable\u0060.\n\n\n\u2022 id (string) - The ID of the table.\n\n\n\u2022 is_focused (boolean) - If True, then the \u0060active_cell\u0060 is in a focused state.\n\n\n\u2022 merge_duplicate_headers (boolean) - If True, then column headers that have neighbors with duplicate names\nwill be merged into a single cell.\nThis will be applied for single column headers and multi-column\nheaders.\n\n\n\u2022 fixed_columns (record with the fields: \u0027data: value equal to: \u00270\u0027 (optional)\u0027, \u0027headers: value equal to: \u0027false\u0027 (optional)\u0027 | record with the fields: \u0027data: number (optional)\u0027, \u0027headers: value equal to: \u0027true\u0027 (required)\u0027; default {\n    headers: false,\n    data: 0\n}) - \u0060fixed_columns\u0060 will \u0022fix\u0022 the set of columns so that\nthey remain visible when scrolling horizontally across\nthe unfixed columns. \u0060fixed_columns\u0060 fixes columns\nfrom left-to-right.\nIf \u0060headers\u0060 is False, no columns are fixed.\nIf \u0060headers\u0060 is True, all operation columns (see \u0060row_deletable\u0060 and \u0060row_selectable\u0060)\nare fixed. Additional data columns can be fixed by\nassigning a number to \u0060data\u0060.\nNote that fixing columns introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.\n\n\n\u2022 fixed_rows (record with the fields: \u0027data: value equal to: \u00270\u0027 (optional)\u0027, \u0027headers: value equal to: \u0027false\u0027 (optional)\u0027 | record with the fields: \u0027data: number (optional)\u0027, \u0027headers: value equal to: \u0027true\u0027 (required)\u0027; default {\n    headers: false,\n    data: 0\n}) - \u0060fixed_rows\u0060 will \u0022fix\u0022 the set of rows so that\nthey remain visible when scrolling vertically down\nthe table. \u0060fixed_rows\u0060 fixes rows\nfrom top-to-bottom, starting from the headers.\nIf \u0060headers\u0060 is False, no rows are fixed.\nIf \u0060headers\u0060 is True, all header and filter rows (see \u0060filter_action\u0060) are\nfixed. Additional data rows can be fixed by assigning\na number to \u0060data\u0060.  Note that fixing rows introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.\n\n\n\u2022 column_selectable (value equal to: \u0027single\u0027, \u0027multi\u0027, \u0027false\u0027; default false) - If \u0060single\u0060, then the user can select a single column or group\nof merged columns via the radio button that will appear in the\nheader rows.\nIf \u0060multi\u0060, then the user can select multiple columns or groups\nof merged columns via the checkbox that will appear in the header\nrows.\nIf false, then the user will not be able to select columns and no\ninput will appear in the header rows.\nWhen a column is selected, its id will be contained in \u0060selected_columns\u0060\nand \u0060derived_viewport_selected_columns\u0060.\n\n\n\u2022 row_deletable (boolean) - If True, then a \u0060x\u0060 will appear next to each \u0060row\u0060\nand the user can delete the row.\n\n\n\u2022 cell_selectable (boolean; default true) - If True (default), then it is possible to click and navigate\ntable cells.\n\n\n\u2022 row_selectable (value equal to: \u0027single\u0027, \u0027multi\u0027, \u0027false\u0027; default false) - If \u0060single\u0060, then the user can select a single row\nvia a radio button that will appear next to each row.\nIf \u0060multi\u0060, then the user can select multiple rows\nvia a checkbox that will appear next to each row.\nIf false, then the user will not be able to select rows\nand no additional UI elements will appear.\nWhen a row is selected, its index will be contained\nin \u0060selected_rows\u0060.\n\n\n\u2022 selected_cells (list with values of type: record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027; default []) - \u0060selected_cells\u0060 represents the set of cells that are selected,\nas an array of objects, each item similar to \u0060active_cell\u0060.\nMultiple cells can be selected by holding down shift and\nclicking on a different cell or holding down shift and navigating\nwith the arrow keys.\n\n\n\u2022 selected_rows (list with values of type: number; default []) - \u0060selected_rows\u0060 contains the indices of rows that\nare selected via the UI elements that appear when\n\u0060row_selectable\u0060 is \u0060\u0027single\u0027\u0060 or \u0060\u0027multi\u0027\u0060.\n\n\n\u2022 selected_columns (list with values of type: string; default []) - \u0060selected_columns\u0060 contains the ids of columns that\nare selected via the UI elements that appear when\n\u0060column_selectable\u0060 is \u0060\u0027single\u0027 or \u0027multi\u0027\u0060.\n\n\n\u2022 selected_row_ids (list with values of type: string | number; default []) - \u0060selected_row_ids\u0060 contains the ids of rows that\nare selected via the UI elements that appear when\n\u0060row_selectable\u0060 is \u0060\u0027single\u0027\u0060 or \u0060\u0027multi\u0027\u0060.\n\n\n\u2022 start_cell (record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027) - When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n\u0060start_cell\u0060 represents the [row, column] coordinates of the cell\nin one of the corners of the region.\n\u0060end_cell\u0060 represents the coordinates of the other corner.\n\n\n\u2022 style_as_list_view (boolean; default false) - If True, then the table will be styled like a list view\nand not have borders between the columns.\n\n\n\u2022 page_action (value equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027; default native) - \u0060page_action\u0060 refers to a mode of the table where\nnot all of the rows are displayed at once: only a subset\nare displayed (a \u0022page\u0022) and the next subset of rows\ncan viewed by clicking \u0022Next\u0022 or \u0022Previous\u0022 buttons\nat the bottom of the page.\nPagination is used to improve performance: instead of\nrendering all of the rows at once (which can be expensive),\nwe only display a subset of them.\nWith pagination, we can either page through data that exists\nin the table (e.g. page through \u006010,000\u0060 rows in \u0060data\u0060 \u0060100\u0060 rows at a time)\nor we can update the data on-the-fly with callbacks\nwhen the user clicks on the \u0022Previous\u0022 or \u0022Next\u0022 buttons.\nThese modes can be toggled with this \u0060page_action\u0060 parameter:\n\u0060\u0027native\u0027\u0060: all data is passed to the table up-front, paging logic is\nhandled by the table;\n\u0060\u0027custom\u0027\u0060: data is passed to the table one page at a time, paging logic\nis handled via callbacks;\n\u0060\u0027none\u0027\u0060: disables paging, render all of the data at once.\n\n\n\u2022 page_current (number; default 0) - \u0060page_current\u0060 represents which page the user is on.\nUse this property to index through data in your callbacks with\nbackend paging.\n\n\n\u2022 page_count (number) - \u0060page_count\u0060 represents the number of the pages in the\npaginated table. This is really only useful when performing\nbackend pagination, since the front end is able to use the\nfull size of the table to calculate the number of pages.\n\n\n\u2022 page_size (number; default 250) - \u0060page_size\u0060 represents the number of rows that will be\ndisplayed on a particular page when \u0060page_action\u0060 is \u0060\u0027custom\u0027\u0060 or \u0060\u0027native\u0027\u0060\n\n\n\u2022 dropdown (dict with values of type: record with the fields: \u0027clearable: boolean (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027; default {}) - \u0060dropdown\u0060 specifies dropdown options for different columns.\nEach entry refers to the column ID.\nThe \u0060clearable\u0060 property defines whether the value can be deleted.\nThe \u0060options\u0060 property refers to the \u0060options\u0060 of the dropdown.\n\n\n\u2022 dropdown_conditional (list with values of type: record with the fields: \u0027clearable: boolean (optional)\u0027, \u0027if: record with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027 (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027; default []) - \u0060dropdown_conditional\u0060 specifies dropdown options in various columns and cells.\nThis property allows you to specify different dropdowns\ndepending on certain conditions. For example, you may\nrender different \u0022city\u0022 dropdowns in a row depending on the\ncurrent value in the \u0022state\u0022 column.\n\n\n\u2022 dropdown_data (list with values of type: dict with values of type: record with the fields: \u0027clearable: boolean (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027; default []) - \u0060dropdown_data\u0060 specifies dropdown options on a row-by-row, column-by-column basis.\nEach item in the array corresponds to the corresponding dropdowns for the \u0060data\u0060 item\nat the same index. Each entry in the item refers to the Column ID.\n\n\n\u2022 tooltip (dict with values of type: string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027use_with: value equal to: \u0027both\u0027, \u0027data\u0027, \u0027header\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default {}) - \u0060tooltip\u0060 is the column based tooltip configuration applied to all rows. The key is the column\n id and the value is a tooltip configuration.\nExample: {i: {\u0027value\u0027: i, \u0027use_with: \u0027both\u0027} for i in df.columns}\n\n\n\u2022 tooltip_conditional (list with values of type: record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027if: record with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027 (required)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default []) - \u0060tooltip_conditional\u0060 represents the tooltip shown\nfor different columns and cells.\nThis property allows you to specify different tooltips\ndepending on certain conditions. For example, you may have\ndifferent tooltips in the same column based on the value\nof a certain data property.\nPriority is from first to last defined conditional tooltip\nin the list. Higher priority (more specific) conditional\ntooltips should be put at the beginning of the list.\n\n\n\u2022 tooltip_data (list with values of type: dict with values of type: string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default []) - \u0060tooltip_data\u0060 represents the tooltip shown\nfor different columns and cells.\nA list of dicts for which each key is\na column id and the value is a tooltip configuration.\n\n\n\u2022 tooltip_header (dict with values of type: string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027 | list with values of type: value equal to: \u0027null\u0027 | string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default {}) - \u0060tooltip_header\u0060 represents the tooltip shown\nfor each header column and optionally each header row.\nExample to show long column names in a tooltip: {i: i for i in df.columns}.\nExample to show different column names in a tooltip: {\u0027Rep\u0027: \u0027Republican\u0027, \u0027Dem\u0027: \u0027Democrat\u0027}.\nIf the table has multiple rows of headers, then use a list as the value of the\n\u0060tooltip_header\u0060 items.\n\n\n\u2022 tooltip_delay (number; default 350) - \u0060tooltip_delay\u0060 represents the table-wide delay in milliseconds before\nthe tooltip is shown when hovering a cell. If set to \u0060None\u0060, the tooltip\nwill be shown immediately.\nDefaults to 350.\n\n\n\u2022 tooltip_duration (number; default 2000) - \u0060tooltip_duration\u0060 represents the table-wide duration in milliseconds\nduring which the tooltip will be displayed when hovering a cell. If\nset to \u0060None\u0060, the tooltip will not disappear.\nDefaults to 2000.\n\n\n\u2022 filter_query (string; default ) - If \u0060filter_action\u0060 is enabled, then the current filtering\nstring is represented in this \u0060filter_query\u0060\nproperty.\n\n\n\u2022 filter_action (value equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027 | record with the fields: \u0027type: value equal to: \u0027custom\u0027, \u0027native\u0027 (required)\u0027, \u0027operator: value equal to: \u0027and\u0027, \u0027or\u0027 (optional)\u0027; default none) - The \u0060filter_action\u0060 property controls the behavior of the \u0060filtering\u0060 UI.\nIf \u0060\u0027none\u0027\u0060, then the filtering UI is not displayed.\nIf \u0060\u0027native\u0027\u0060, then the filtering UI is displayed and the filtering\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the \u0060data\u0060 property.\nIf \u0060\u0027custom\u0027\u0060, then the filtering UI is displayed but it is the\nresponsibility of the developer to program the filtering\nthrough a callback (where \u0060filter_query\u0060 or \u0060derived_filter_query_structure\u0060 would be the input\nand \u0060data\u0060 would be the output).\n\n\n\u2022 filter_options (record with the field: \u0027case: value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027 (optional)\u0027; default {}) - There are two \u0060filter_options\u0060 props in the table.\nThis is the table-level filter_options prop and there is\nalso the column-level \u0060filter_options\u0060 prop.\nThese props determine whether the applicable filter relational\noperators will default to \u0060sensitive\u0060 or \u0060insensitive\u0060 comparison.\nIf the column-level \u0060filter_options\u0060 prop is set it overrides\nthe table-level \u0060filter_options\u0060 prop for that column.\n\n\n\u2022 sort_action (value equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027; default none) - The \u0060sort_action\u0060 property enables data to be\nsorted on a per-column basis.\nIf \u0060\u0027none\u0027\u0060, then the sorting UI is not displayed.\nIf \u0060\u0027native\u0027\u0060, then the sorting UI is displayed and the sorting\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the \u0060data\u0060 property.\nIf \u0060\u0027custom\u0027\u0060, the the sorting UI is displayed but it is the\nresponsibility of the developer to program the sorting\nthrough a callback (where \u0060sort_by\u0060 would be the input and \u0060data\u0060\nwould be the output).\nClicking on the sort arrows will update the\n\u0060sort_by\u0060 property.\n\n\n\u2022 sort_mode (value equal to: \u0027single\u0027, \u0027multi\u0027; default single) - Sorting can be performed across multiple columns\n(e.g. sort by country, sort within each country,\n sort by year) or by a single column.\nNOTE - With multi-column sort, it\u0027s currently\nnot possible to determine the order in which\nthe columns were sorted through the UI.\nSee [https://github.com/plotly/dash-table/issues/170](https://github.com/plotly/dash-table/issues/170)\n\n\n\u2022 sort_by (list with values of type: record with the fields: \u0027column_id: string (required)\u0027, \u0027direction: value equal to: \u0027asc\u0027, \u0027desc\u0027 (required)\u0027; default []) - \u0060sort_by\u0060 describes the current state\nof the sorting UI.\nThat is, if the user clicked on the sort arrow\nof a column, then this property will be updated\nwith the column ID and the direction\n(\u0060asc\u0060 or \u0060desc\u0060) of the sort.\nFor multi-column sorting, this will be a list of\nsorting parameters, in the order in which they were\nclicked.\n\n\n\u2022 sort_as_null (list with values of type: string | number | boolean; default []) - An array of string, number and boolean values that are treated as \u0060None\u0060\n(i.e. ignored and always displayed last) when sorting.\nThis value will be used by columns without \u0060sort_as_null\u0060.\nDefaults to \u0060[]\u0060.\n\n\n\u2022 style_table (record; default {}) - CSS styles to be applied to the outer \u0060table\u0060 container.\nThis is commonly used for setting properties like the\nwidth or the height of the table.\n\n\n\u2022 style_cell (record) - CSS styles to be applied to each individual cell of the table.\nThis includes the header cells, the \u0060data\u0060 cells, and the filter\ncells.\n\n\n\u2022 style_data (record) - CSS styles to be applied to each individual data cell.\nThat is, unlike \u0060style_cell\u0060, it excludes the header and filter cells.\n\n\n\u2022 style_filter (record) - CSS styles to be applied to the filter cells.\nNote that this may change in the future as we build out a\nmore complex filtering UI.\n\n\n\u2022 style_header (record) - CSS styles to be applied to each individual header cell.\nThat is, unlike \u0060style_cell\u0060, it excludes the \u0060data\u0060 and filter cells.\n\n\n\u2022 style_cell_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the cells.\nThis can be used to apply styles to cells on a per-column basis.\n\n\n\u2022 style_data_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027state: value equal to: \u0027active\u0027, \u0027selected\u0027 (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 | list with values of type: number (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the data cells.\nThis can be used to apply styles to data cells on a per-column basis.\n\n\n\u2022 style_filter_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the filter cells.\nThis can be used to apply styles to filter cells on a per-column basis.\n\n\n\u2022 style_header_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027header_index: number | list with values of type: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the header cells.\nThis can be used to apply styles to header cells on a per-column basis.\n\n\n\u2022 virtualization (boolean; default false) - This property tells the table to use virtualization when rendering.\nAssumptions are that:\nthe width of the columns is fixed;\nthe height of the rows is always the same; and\nruntime styling changes will not affect width and height vs. first rendering\n\n\n\u2022 derived_filter_query_structure (record) - This property represents the current structure of\n\u0060filter_query\u0060 as a tree structure. Each node of the\nquery structure has:\ntype (string; required):\n  \u0027open-block\u0027,\n  \u0027logical-operator\u0027,\n  \u0027relational-operator\u0027,\n  \u0027unary-operator\u0027, or\n  \u0027expression\u0027;\nsubType (string; optional):\n  \u0027open-block\u0027: \u0027()\u0027,\n  \u0027logical-operator\u0027: \u0027\u0026\u0026\u0027, \u0027||\u0027,\n  \u0027relational-operator\u0027: \u0027=\u0027, \u0027\u003E=\u0027, \u0027\u003E\u0027, \u0027\u003C=\u0027, \u0027\u003C\u0027, \u0027!=\u0027, \u0027contains\u0027,\n  \u0027unary-operator\u0027: \u0027!\u0027, \u0027is bool\u0027, \u0027is even\u0027, \u0027is nil\u0027, \u0027is num\u0027, \u0027is object\u0027, \u0027is odd\u0027, \u0027is prime\u0027, \u0027is str\u0027,\n  \u0027expression\u0027: \u0027value\u0027, \u0027field\u0027;\nvalue (any):\n  \u0027expression, value\u0027: passed value,\n  \u0027expression, field\u0027: the field/prop name.\nblock (nested query structure; optional).\nleft (nested query structure; optional).\nright (nested query structure; optional).\nIf the query is invalid or empty, the \u0060derived_filter_query_structure\u0060 will\nbe \u0060None\u0060.\n\n\n\u2022 derived_viewport_data (list with values of type: record; default []) - This property represents the current state of \u0060data\u0060\non the current page. This property will be updated\non paging, sorting, and filtering.\n\n\n\u2022 derived_viewport_indices (list with values of type: number; default []) - \u0060derived_viewport_indices\u0060 indicates the order in which the original\nrows appear after being filtered, sorted, and/or paged.\n\u0060derived_viewport_indices\u0060 contains indices for the current page,\nwhile \u0060derived_virtual_indices\u0060 contains indices across all pages.\n\n\n\u2022 derived_viewport_row_ids (list with values of type: string | number; default []) - \u0060derived_viewport_row_ids\u0060 lists row IDs in the order they appear\nafter being filtered, sorted, and/or paged.\n\u0060derived_viewport_row_ids\u0060 contains IDs for the current page,\nwhile \u0060derived_virtual_row_ids\u0060 contains IDs across all pages.\n\n\n\u2022 derived_viewport_selected_columns (list with values of type: string) - \u0060derived_viewport_selected_columns\u0060 contains the ids of the\n\u0060selected_columns\u0060 that are not currently hidden.\n\n\n\u2022 derived_viewport_selected_rows (list with values of type: number; default []) - \u0060derived_viewport_selected_rows\u0060 represents the indices of the\n\u0060selected_rows\u0060 from the perspective of the \u0060derived_viewport_indices\u0060.\n\n\n\u2022 derived_viewport_selected_row_ids (list with values of type: string | number; default []) - \u0060derived_viewport_selected_row_ids\u0060 represents the IDs of the\n\u0060selected_rows\u0060 on the currently visible page.\n\n\n\u2022 derived_virtual_data (list with values of type: record; default []) - This property represents the visible state of \u0060data\u0060\nacross all pages after the front-end sorting and filtering\nas been applied.\n\n\n\u2022 derived_virtual_indices (list with values of type: number; default []) - \u0060derived_virtual_indices\u0060 indicates the order in which the original\nrows appear after being filtered and sorted.\n\u0060derived_viewport_indices\u0060 contains indices for the current page,\nwhile \u0060derived_virtual_indices\u0060 contains indices across all pages.\n\n\n\u2022 derived_virtual_row_ids (list with values of type: string | number; default []) - \u0060derived_virtual_row_ids\u0060 indicates the row IDs in the order in which\nthey appear after being filtered and sorted.\n\u0060derived_viewport_row_ids\u0060 contains IDs for the current page,\nwhile \u0060derived_virtual_row_ids\u0060 contains IDs across all pages.\n\n\n\u2022 derived_virtual_selected_rows (list with values of type: number; default []) - \u0060derived_virtual_selected_rows\u0060 represents the indices of the\n \u0060selected_rows\u0060 from the perspective of the \u0060derived_virtual_indices\u0060.\n\n\n\u2022 derived_virtual_selected_row_ids (list with values of type: string | number; default []) - \u0060derived_virtual_selected_row_ids\u0060 represents the IDs of the\n\u0060selected_rows\u0060 as they appear after filtering and sorting,\nacross all pages.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, any \u0060persisted_props\u0060 that the\nuser has changed while using the app will keep those changes, as long as\nthe new prop value also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060 and \u0060persisted_props\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027columns_name\u0027, \u0027data\u0027, \u0027filter_query\u0027, \u0027hidden_columns\u0027, \u0027selected_columns\u0027, \u0027selected_rows\u0027, \u0027sort_by\u0027; default [\n    \u0027columns_name\u0027,\n    \u0027filter_query\u0027,\n    \u0027hidden_columns\u0027,\n    \u0027selected_columns\u0027,\n    \u0027selected_rows\u0027,\n    \u0027sort_by\u0027\n]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-alternate.html","title":"Alternate","content":"Alternate \n\nvalue equal to: \u0027odd\u0027, \u0027even\u0027\n \nAlternate.convert \nconvert \nAlternate.Odd \nOdd \nAlternate.Even \nEven"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-alternate.html#convert","title":"Alternate.convert","content":"Alternate.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-alternate.html#Odd","title":"Alternate.Odd","content":"Alternate.Odd \nOdd \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-alternate.html#Even","title":"Alternate.Even","content":"Alternate.Even \nEven \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.activeCell \nactiveCell \nAttr.cellSelectable \ncellSelectable \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.columnSelectable \ncolumnSelectable \nAttr.columns \ncolumns \nAttr.css \ncss \nAttr.data \ndata \nAttr.data \ndata \nAttr.dataPrevious \ndataPrevious \nAttr.dataTimestamp \ndataTimestamp \nAttr.derivedFilterQueryStructure \nderivedFilterQueryStructure \nAttr.derivedViewportData \nderivedViewportData \nAttr.derivedViewportIndices \nderivedViewportIndices \nAttr.derivedViewportRowIds \nderivedViewportRowIds \nAttr.derivedViewportSelectedColumns \nderivedViewportSelectedColumns \nAttr.derivedViewportSelectedRowIds \nderivedViewportSelectedRowIds \nAttr.derivedViewportSelectedRows \nderivedViewportSelectedRows \nAttr.derivedVirtualData \nderivedVirtualData \nAttr.derivedVirtualIndices \nderivedVirtualIndices \nAttr.derivedVirtualRowIds \nderivedVirtualRowIds \nAttr.derivedVirtualSelectedRowIds \nderivedVirtualSelectedRowIds \nAttr.derivedVirtualSelectedRows \nderivedVirtualSelectedRows \nAttr.dropdown \ndropdown \nAttr.dropdownConditional \ndropdownConditional \nAttr.dropdownData \ndropdownData \nAttr.editable \neditable \nAttr.endCell \nendCell \nAttr.exportColumns \nexportColumns \nAttr.exportFormat \nexportFormat \nAttr.exportHeaders \nexportHeaders \nAttr.fillWidth \nfillWidth \nAttr.filterAction \nfilterAction \nAttr.filterAction \nfilterAction \nAttr.filterOptions \nfilterOptions \nAttr.filterQuery \nfilterQuery \nAttr.fixedColumns \nfixedColumns \nAttr.fixedRows \nfixedRows \nAttr.hiddenColumns \nhiddenColumns \nAttr.includeHeadersOnCopyPaste \nincludeHeadersOnCopyPaste \nAttr.isFocused \nisFocused \nAttr.loadingState \nloadingState \nAttr.localeFormat \nlocaleFormat \nAttr.markdownOptions \nmarkdownOptions \nAttr.mergeDuplicateHeaders \nmergeDuplicateHeaders \nAttr.pageAction \npageAction \nAttr.pageCount \npageCount \nAttr.pageCurrent \npageCurrent \nAttr.pageSize \npageSize \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.rowDeletable \nrowDeletable \nAttr.rowSelectable \nrowSelectable \nAttr.selectedCells \nselectedCells \nAttr.selectedColumns \nselectedColumns \nAttr.selectedRowIds \nselectedRowIds \nAttr.selectedRows \nselectedRows \nAttr.sortAction \nsortAction \nAttr.sortAsNull \nsortAsNull \nAttr.sortBy \nsortBy \nAttr.sortMode \nsortMode \nAttr.startCell \nstartCell \nAttr.styleAsListView \nstyleAsListView \nAttr.styleCell \nstyleCell \nAttr.styleCellConditional \nstyleCellConditional \nAttr.styleData \nstyleData \nAttr.styleDataConditional \nstyleDataConditional \nAttr.styleFilter \nstyleFilter \nAttr.styleFilterConditional \nstyleFilterConditional \nAttr.styleHeader \nstyleHeader \nAttr.styleHeaderConditional \nstyleHeaderConditional \nAttr.styleTable \nstyleTable \nAttr.tooltip \ntooltip \nAttr.tooltipConditional \ntooltipConditional \nAttr.tooltipData \ntooltipData \nAttr.tooltipDelay \ntooltipDelay \nAttr.tooltipDuration \ntooltipDuration \nAttr.tooltipHeader \ntooltipHeader \nAttr.virtualization \nvirtualization \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#activeCell","title":"Attr.activeCell","content":"Attr.activeCell \nactiveCell \n\nThe row and column indices and IDs of the currently active cell.\n\u0060row_id\u0060 is only returned if the data rows have an \u0060id\u0060 key.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#cellSelectable","title":"Attr.cellSelectable","content":"Attr.cellSelectable \ncellSelectable \n\nIf True (default), then it is possible to click and navigate\ntable cells.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#columnSelectable","title":"Attr.columnSelectable","content":"Attr.columnSelectable \ncolumnSelectable \n\nIf \u0060single\u0060, then the user can select a single column or group\nof merged columns via the radio button that will appear in the\nheader rows.\nIf \u0060multi\u0060, then the user can select multiple columns or groups\nof merged columns via the checkbox that will appear in the header\nrows.\nIf false, then the user will not be able to select columns and no\ninput will appear in the header rows.\nWhen a column is selected, its id will be contained in \u0060selected_columns\u0060\nand \u0060derived_viewport_selected_columns\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#columns","title":"Attr.columns","content":"Attr.columns \ncolumns \n\nColumns describes various aspects about each individual column.\n\u0060name\u0060 and \u0060id\u0060 are the only required parameters.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#css","title":"Attr.css","content":"Attr.css \ncss \n\nThe \u0060css\u0060 property is a way to embed CSS selectors and rules\nonto the page.\nWe recommend starting with the \u0060style_*\u0060 properties\nbefore using this \u0060css\u0060 property.\nExample:\n[\n    {\u0022selector\u0022: \u0022.dash-spreadsheet\u0022, \u0022rule\u0022: \u0027font-family: \u0022monospace\u0022\u0027}\n]\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#data","title":"Attr.data","content":"Attr.data \ndata \n\nThe contents of the table.\nThe keys of each item in data should match the column IDs.\nEach item can also have an \u0027id\u0027 key, whose value is its row ID. If there\nis a column with ID=\u0027id\u0027 this will display the row ID, otherwise it is\njust used to reference the row for selections, filtering, etc.\nExample:\n[\n     {\u0027column-1\u0027: 4.5, \u0027column-2\u0027: \u0027montreal\u0027, \u0027column-3\u0027: \u0027canada\u0027},\n     {\u0027column-1\u0027: 8, \u0027column-2\u0027: \u0027boston\u0027, \u0027column-3\u0027: \u0027america\u0027}\n]\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#data","title":"Attr.data","content":"Attr.data \ndata \n\nThe contents of the table.\nThe keys of each item in data should match the column IDs.\nEach item can also have an \u0027id\u0027 key, whose value is its row ID. If there\nis a column with ID=\u0027id\u0027 this will display the row ID, otherwise it is\njust used to reference the row for selections, filtering, etc.\nExample:\n[\n     {\u0027column-1\u0027: 4.5, \u0027column-2\u0027: \u0027montreal\u0027, \u0027column-3\u0027: \u0027canada\u0027},\n     {\u0027column-1\u0027: 8, \u0027column-2\u0027: \u0027boston\u0027, \u0027column-3\u0027: \u0027america\u0027}\n]\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#dataPrevious","title":"Attr.dataPrevious","content":"Attr.dataPrevious \ndataPrevious \n\nThe previous state of \u0060data\u0060. \u0060data_previous\u0060\nhas the same structure as \u0060data\u0060 and it will be updated\nwhenever \u0060data\u0060 changes, either through a callback or\nby editing the table.\nThis is a read-only property: setting this property will not\nhave any impact on the table.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#dataTimestamp","title":"Attr.dataTimestamp","content":"Attr.dataTimestamp \ndataTimestamp \n\nThe unix timestamp when the data was last edited.\nUse this property with other timestamp properties\n(such as \u0060n_clicks_timestamp\u0060 in \u0060dash_html_components\u0060)\nto determine which property has changed within a callback.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedFilterQueryStructure","title":"Attr.derivedFilterQueryStructure","content":"Attr.derivedFilterQueryStructure \nderivedFilterQueryStructure \n\nThis property represents the current structure of\n\u0060filter_query\u0060 as a tree structure. Each node of the\nquery structure has:\ntype (string; required):\n  \u0027open-block\u0027,\n  \u0027logical-operator\u0027,\n  \u0027relational-operator\u0027,\n  \u0027unary-operator\u0027, or\n  \u0027expression\u0027;\nsubType (string; optional):\n  \u0027open-block\u0027: \u0027()\u0027,\n  \u0027logical-operator\u0027: \u0027\u0026\u0026\u0027, \u0027||\u0027,\n  \u0027relational-operator\u0027: \u0027=\u0027, \u0027\u003E=\u0027, \u0027\u003E\u0027, \u0027\u003C=\u0027, \u0027\u003C\u0027, \u0027!=\u0027, \u0027contains\u0027,\n  \u0027unary-operator\u0027: \u0027!\u0027, \u0027is bool\u0027, \u0027is even\u0027, \u0027is nil\u0027, \u0027is num\u0027, \u0027is object\u0027, \u0027is odd\u0027, \u0027is prime\u0027, \u0027is str\u0027,\n  \u0027expression\u0027: \u0027value\u0027, \u0027field\u0027;\nvalue (any):\n  \u0027expression, value\u0027: passed value,\n  \u0027expression, field\u0027: the field/prop name.\nblock (nested query structure; optional).\nleft (nested query structure; optional).\nright (nested query structure; optional).\nIf the query is invalid or empty, the \u0060derived_filter_query_structure\u0060 will\nbe \u0060None\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedViewportData","title":"Attr.derivedViewportData","content":"Attr.derivedViewportData \nderivedViewportData \n\nThis property represents the current state of \u0060data\u0060\non the current page. This property will be updated\non paging, sorting, and filtering.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedViewportIndices","title":"Attr.derivedViewportIndices","content":"Attr.derivedViewportIndices \nderivedViewportIndices \n\n\u0060derived_viewport_indices\u0060 indicates the order in which the original\nrows appear after being filtered, sorted, and/or paged.\n\u0060derived_viewport_indices\u0060 contains indices for the current page,\nwhile \u0060derived_virtual_indices\u0060 contains indices across all pages.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedViewportRowIds","title":"Attr.derivedViewportRowIds","content":"Attr.derivedViewportRowIds \nderivedViewportRowIds \n\n\u0060derived_viewport_row_ids\u0060 lists row IDs in the order they appear\nafter being filtered, sorted, and/or paged.\n\u0060derived_viewport_row_ids\u0060 contains IDs for the current page,\nwhile \u0060derived_virtual_row_ids\u0060 contains IDs across all pages.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedViewportSelectedColumns","title":"Attr.derivedViewportSelectedColumns","content":"Attr.derivedViewportSelectedColumns \nderivedViewportSelectedColumns \n\n\u0060derived_viewport_selected_columns\u0060 contains the ids of the\n\u0060selected_columns\u0060 that are not currently hidden.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedViewportSelectedRowIds","title":"Attr.derivedViewportSelectedRowIds","content":"Attr.derivedViewportSelectedRowIds \nderivedViewportSelectedRowIds \n\n\u0060derived_viewport_selected_row_ids\u0060 represents the IDs of the\n\u0060selected_rows\u0060 on the currently visible page.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedViewportSelectedRows","title":"Attr.derivedViewportSelectedRows","content":"Attr.derivedViewportSelectedRows \nderivedViewportSelectedRows \n\n\u0060derived_viewport_selected_rows\u0060 represents the indices of the\n\u0060selected_rows\u0060 from the perspective of the \u0060derived_viewport_indices\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedVirtualData","title":"Attr.derivedVirtualData","content":"Attr.derivedVirtualData \nderivedVirtualData \n\nThis property represents the visible state of \u0060data\u0060\nacross all pages after the front-end sorting and filtering\nas been applied.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedVirtualIndices","title":"Attr.derivedVirtualIndices","content":"Attr.derivedVirtualIndices \nderivedVirtualIndices \n\n\u0060derived_virtual_indices\u0060 indicates the order in which the original\nrows appear after being filtered and sorted.\n\u0060derived_viewport_indices\u0060 contains indices for the current page,\nwhile \u0060derived_virtual_indices\u0060 contains indices across all pages.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedVirtualRowIds","title":"Attr.derivedVirtualRowIds","content":"Attr.derivedVirtualRowIds \nderivedVirtualRowIds \n\n\u0060derived_virtual_row_ids\u0060 indicates the row IDs in the order in which\nthey appear after being filtered and sorted.\n\u0060derived_viewport_row_ids\u0060 contains IDs for the current page,\nwhile \u0060derived_virtual_row_ids\u0060 contains IDs across all pages.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedVirtualSelectedRowIds","title":"Attr.derivedVirtualSelectedRowIds","content":"Attr.derivedVirtualSelectedRowIds \nderivedVirtualSelectedRowIds \n\n\u0060derived_virtual_selected_row_ids\u0060 represents the IDs of the\n\u0060selected_rows\u0060 as they appear after filtering and sorting,\nacross all pages.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#derivedVirtualSelectedRows","title":"Attr.derivedVirtualSelectedRows","content":"Attr.derivedVirtualSelectedRows \nderivedVirtualSelectedRows \n\n\u0060derived_virtual_selected_rows\u0060 represents the indices of the\n \u0060selected_rows\u0060 from the perspective of the \u0060derived_virtual_indices\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#dropdown","title":"Attr.dropdown","content":"Attr.dropdown \ndropdown \n\n\u0060dropdown\u0060 specifies dropdown options for different columns.\nEach entry refers to the column ID.\nThe \u0060clearable\u0060 property defines whether the value can be deleted.\nThe \u0060options\u0060 property refers to the \u0060options\u0060 of the dropdown.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#dropdownConditional","title":"Attr.dropdownConditional","content":"Attr.dropdownConditional \ndropdownConditional \n\n\u0060dropdown_conditional\u0060 specifies dropdown options in various columns and cells.\nThis property allows you to specify different dropdowns\ndepending on certain conditions. For example, you may\nrender different \u0022city\u0022 dropdowns in a row depending on the\ncurrent value in the \u0022state\u0022 column.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#dropdownData","title":"Attr.dropdownData","content":"Attr.dropdownData \ndropdownData \n\n\u0060dropdown_data\u0060 specifies dropdown options on a row-by-row, column-by-column basis.\nEach item in the array corresponds to the corresponding dropdowns for the \u0060data\u0060 item\nat the same index. Each entry in the item refers to the Column ID.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#editable","title":"Attr.editable","content":"Attr.editable \neditable \n\nIf True, then the data in all of the cells is editable.\nWhen \u0060editable\u0060 is True, particular columns can be made\nuneditable by setting \u0060editable\u0060 to \u0060False\u0060 inside the \u0060columns\u0060\nproperty.\nIf False, then the data in all of the cells is uneditable.\nWhen \u0060editable\u0060 is False, particular columns can be made\neditable by setting \u0060editable\u0060 to \u0060True\u0060 inside the \u0060columns\u0060\nproperty.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#endCell","title":"Attr.endCell","content":"Attr.endCell \nendCell \n\nWhen selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n\u0060end_cell\u0060 represents the row / column coordinates and IDs of the cell\nin one of the corners of the region.\n\u0060start_cell\u0060 represents the coordinates of the other corner.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#exportColumns","title":"Attr.exportColumns","content":"Attr.exportColumns \nexportColumns \n\nDenotes the columns that will be used in the export data file.\nIf \u0060all\u0060, all columns will be used (visible \u002B hidden). If \u0060visible\u0060,\nonly the visible columns will be used. Defaults to \u0060visible\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#exportFormat","title":"Attr.exportFormat","content":"Attr.exportFormat \nexportFormat \n\nDenotes the type of the export data file,\nDefaults to \u0060\u0027none\u0027\u0060\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#exportHeaders","title":"Attr.exportHeaders","content":"Attr.exportHeaders \nexportHeaders \n\nDenotes the format of the headers in the export data file.\nIf \u0060\u0027none\u0027\u0060, there will be no header. If \u0060\u0027display\u0027\u0060, then the header\nof the data file will be be how it is currently displayed. Note that\n\u0060\u0027display\u0027\u0060 is only supported for \u0060\u0027xlsx\u0027\u0060 export_format and will behave\nlike \u0060\u0027names\u0027\u0060 for \u0060\u0027csv\u0027\u0060 export format. If \u0060\u0027ids\u0027\u0060 or \u0060\u0027names\u0027\u0060,\nthen the headers of data file will be the column id or the column\nnames, respectively\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#fillWidth","title":"Attr.fillWidth","content":"Attr.fillWidth \nfillWidth \n\n\u0060fill_width\u0060 toggles between a set of CSS for two common behaviors:\nTrue: The table container\u0027s width will grow to fill the available space;\nFalse: The table container\u0027s width will equal the width of its content.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#filterAction","title":"Attr.filterAction","content":"Attr.filterAction \nfilterAction \n\nThe \u0060filter_action\u0060 property controls the behavior of the \u0060filtering\u0060 UI.\nIf \u0060\u0027none\u0027\u0060, then the filtering UI is not displayed.\nIf \u0060\u0027native\u0027\u0060, then the filtering UI is displayed and the filtering\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the \u0060data\u0060 property.\nIf \u0060\u0027custom\u0027\u0060, then the filtering UI is displayed but it is the\nresponsibility of the developer to program the filtering\nthrough a callback (where \u0060filter_query\u0060 or \u0060derived_filter_query_structure\u0060 would be the input\nand \u0060data\u0060 would be the output).\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#filterAction","title":"Attr.filterAction","content":"Attr.filterAction \nfilterAction \n\nThe \u0060filter_action\u0060 property controls the behavior of the \u0060filtering\u0060 UI.\nIf \u0060\u0027none\u0027\u0060, then the filtering UI is not displayed.\nIf \u0060\u0027native\u0027\u0060, then the filtering UI is displayed and the filtering\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the \u0060data\u0060 property.\nIf \u0060\u0027custom\u0027\u0060, then the filtering UI is displayed but it is the\nresponsibility of the developer to program the filtering\nthrough a callback (where \u0060filter_query\u0060 or \u0060derived_filter_query_structure\u0060 would be the input\nand \u0060data\u0060 would be the output).\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#filterOptions","title":"Attr.filterOptions","content":"Attr.filterOptions \nfilterOptions \n\nThere are two \u0060filter_options\u0060 props in the table.\nThis is the table-level filter_options prop and there is\nalso the column-level \u0060filter_options\u0060 prop.\nThese props determine whether the applicable filter relational\noperators will default to \u0060sensitive\u0060 or \u0060insensitive\u0060 comparison.\nIf the column-level \u0060filter_options\u0060 prop is set it overrides\nthe table-level \u0060filter_options\u0060 prop for that column.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#filterQuery","title":"Attr.filterQuery","content":"Attr.filterQuery \nfilterQuery \n\nIf \u0060filter_action\u0060 is enabled, then the current filtering\nstring is represented in this \u0060filter_query\u0060\nproperty.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#fixedColumns","title":"Attr.fixedColumns","content":"Attr.fixedColumns \nfixedColumns \n\n\u0060fixed_columns\u0060 will \u0022fix\u0022 the set of columns so that\nthey remain visible when scrolling horizontally across\nthe unfixed columns. \u0060fixed_columns\u0060 fixes columns\nfrom left-to-right.\nIf \u0060headers\u0060 is False, no columns are fixed.\nIf \u0060headers\u0060 is True, all operation columns (see \u0060row_deletable\u0060 and \u0060row_selectable\u0060)\nare fixed. Additional data columns can be fixed by\nassigning a number to \u0060data\u0060.\nNote that fixing columns introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#fixedRows","title":"Attr.fixedRows","content":"Attr.fixedRows \nfixedRows \n\n\u0060fixed_rows\u0060 will \u0022fix\u0022 the set of rows so that\nthey remain visible when scrolling vertically down\nthe table. \u0060fixed_rows\u0060 fixes rows\nfrom top-to-bottom, starting from the headers.\nIf \u0060headers\u0060 is False, no rows are fixed.\nIf \u0060headers\u0060 is True, all header and filter rows (see \u0060filter_action\u0060) are\nfixed. Additional data rows can be fixed by assigning\na number to \u0060data\u0060.  Note that fixing rows introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#hiddenColumns","title":"Attr.hiddenColumns","content":"Attr.hiddenColumns \nhiddenColumns \n\nList of columns ids of the columns that are currently hidden.\nSee the associated nested prop \u0060columns.hideable\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#includeHeadersOnCopyPaste","title":"Attr.includeHeadersOnCopyPaste","content":"Attr.includeHeadersOnCopyPaste \nincludeHeadersOnCopyPaste \n\nIf true, headers are included when copying from the table to different\ntabs and elsewhere. Note that headers are ignored when copying from the table onto itself and\nbetween two tables within the same tab.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#isFocused","title":"Attr.isFocused","content":"Attr.isFocused \nisFocused \n\nIf True, then the \u0060active_cell\u0060 is in a focused state.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#localeFormat","title":"Attr.localeFormat","content":"Attr.localeFormat \nlocaleFormat \n\nThe localization specific formatting information applied to all columns in the table.\nThis prop is derived from the [d3.formatLocale](https://github.com/d3/d3-format#formatLocale) data structure specification.\nWhen left unspecified, each individual nested prop will default to a pre-determined value.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#markdownOptions","title":"Attr.markdownOptions","content":"Attr.markdownOptions \nmarkdownOptions \n\nThe \u0060markdown_options\u0060 property allows customization of the markdown cells behavior.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#mergeDuplicateHeaders","title":"Attr.mergeDuplicateHeaders","content":"Attr.mergeDuplicateHeaders \nmergeDuplicateHeaders \n\nIf True, then column headers that have neighbors with duplicate names\nwill be merged into a single cell.\nThis will be applied for single column headers and multi-column\nheaders.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#pageAction","title":"Attr.pageAction","content":"Attr.pageAction \npageAction \n\n\u0060page_action\u0060 refers to a mode of the table where\nnot all of the rows are displayed at once: only a subset\nare displayed (a \u0022page\u0022) and the next subset of rows\ncan viewed by clicking \u0022Next\u0022 or \u0022Previous\u0022 buttons\nat the bottom of the page.\nPagination is used to improve performance: instead of\nrendering all of the rows at once (which can be expensive),\nwe only display a subset of them.\nWith pagination, we can either page through data that exists\nin the table (e.g. page through \u006010,000\u0060 rows in \u0060data\u0060 \u0060100\u0060 rows at a time)\nor we can update the data on-the-fly with callbacks\nwhen the user clicks on the \u0022Previous\u0022 or \u0022Next\u0022 buttons.\nThese modes can be toggled with this \u0060page_action\u0060 parameter:\n\u0060\u0027native\u0027\u0060: all data is passed to the table up-front, paging logic is\nhandled by the table;\n\u0060\u0027custom\u0027\u0060: data is passed to the table one page at a time, paging logic\nis handled via callbacks;\n\u0060\u0027none\u0027\u0060: disables paging, render all of the data at once.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#pageCount","title":"Attr.pageCount","content":"Attr.pageCount \npageCount \n\n\u0060page_count\u0060 represents the number of the pages in the\npaginated table. This is really only useful when performing\nbackend pagination, since the front end is able to use the\nfull size of the table to calculate the number of pages.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#pageCurrent","title":"Attr.pageCurrent","content":"Attr.pageCurrent \npageCurrent \n\n\u0060page_current\u0060 represents which page the user is on.\nUse this property to index through data in your callbacks with\nbackend paging.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#pageSize","title":"Attr.pageSize","content":"Attr.pageSize \npageSize \n\n\u0060page_size\u0060 represents the number of rows that will be\ndisplayed on a particular page when \u0060page_action\u0060 is \u0060\u0027custom\u0027\u0060 or \u0060\u0027native\u0027\u0060\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, any \u0060persisted_props\u0060 that the\nuser has changed while using the app will keep those changes, as long as\nthe new prop value also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060 and \u0060persisted_props\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#rowDeletable","title":"Attr.rowDeletable","content":"Attr.rowDeletable \nrowDeletable \n\nIf True, then a \u0060x\u0060 will appear next to each \u0060row\u0060\nand the user can delete the row.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#rowSelectable","title":"Attr.rowSelectable","content":"Attr.rowSelectable \nrowSelectable \n\nIf \u0060single\u0060, then the user can select a single row\nvia a radio button that will appear next to each row.\nIf \u0060multi\u0060, then the user can select multiple rows\nvia a checkbox that will appear next to each row.\nIf false, then the user will not be able to select rows\nand no additional UI elements will appear.\nWhen a row is selected, its index will be contained\nin \u0060selected_rows\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#selectedCells","title":"Attr.selectedCells","content":"Attr.selectedCells \nselectedCells \n\n\u0060selected_cells\u0060 represents the set of cells that are selected,\nas an array of objects, each item similar to \u0060active_cell\u0060.\nMultiple cells can be selected by holding down shift and\nclicking on a different cell or holding down shift and navigating\nwith the arrow keys.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#selectedColumns","title":"Attr.selectedColumns","content":"Attr.selectedColumns \nselectedColumns \n\n\u0060selected_columns\u0060 contains the ids of columns that\nare selected via the UI elements that appear when\n\u0060column_selectable\u0060 is \u0060\u0027single\u0027 or \u0027multi\u0027\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#selectedRowIds","title":"Attr.selectedRowIds","content":"Attr.selectedRowIds \nselectedRowIds \n\n\u0060selected_row_ids\u0060 contains the ids of rows that\nare selected via the UI elements that appear when\n\u0060row_selectable\u0060 is \u0060\u0027single\u0027\u0060 or \u0060\u0027multi\u0027\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#selectedRows","title":"Attr.selectedRows","content":"Attr.selectedRows \nselectedRows \n\n\u0060selected_rows\u0060 contains the indices of rows that\nare selected via the UI elements that appear when\n\u0060row_selectable\u0060 is \u0060\u0027single\u0027\u0060 or \u0060\u0027multi\u0027\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#sortAction","title":"Attr.sortAction","content":"Attr.sortAction \nsortAction \n\nThe \u0060sort_action\u0060 property enables data to be\nsorted on a per-column basis.\nIf \u0060\u0027none\u0027\u0060, then the sorting UI is not displayed.\nIf \u0060\u0027native\u0027\u0060, then the sorting UI is displayed and the sorting\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the \u0060data\u0060 property.\nIf \u0060\u0027custom\u0027\u0060, the the sorting UI is displayed but it is the\nresponsibility of the developer to program the sorting\nthrough a callback (where \u0060sort_by\u0060 would be the input and \u0060data\u0060\nwould be the output).\nClicking on the sort arrows will update the\n\u0060sort_by\u0060 property.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#sortAsNull","title":"Attr.sortAsNull","content":"Attr.sortAsNull \nsortAsNull \n\nAn array of string, number and boolean values that are treated as \u0060None\u0060\n(i.e. ignored and always displayed last) when sorting.\nThis value will be used by columns without \u0060sort_as_null\u0060.\nDefaults to \u0060[]\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#sortBy","title":"Attr.sortBy","content":"Attr.sortBy \nsortBy \n\n\u0060sort_by\u0060 describes the current state\nof the sorting UI.\nThat is, if the user clicked on the sort arrow\nof a column, then this property will be updated\nwith the column ID and the direction\n(\u0060asc\u0060 or \u0060desc\u0060) of the sort.\nFor multi-column sorting, this will be a list of\nsorting parameters, in the order in which they were\nclicked.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#sortMode","title":"Attr.sortMode","content":"Attr.sortMode \nsortMode \n\nSorting can be performed across multiple columns\n(e.g. sort by country, sort within each country,\n sort by year) or by a single column.\nNOTE - With multi-column sort, it\u0027s currently\nnot possible to determine the order in which\nthe columns were sorted through the UI.\nSee [https://github.com/plotly/dash-table/issues/170](https://github.com/plotly/dash-table/issues/170)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#startCell","title":"Attr.startCell","content":"Attr.startCell \nstartCell \n\nWhen selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n\u0060start_cell\u0060 represents the [row, column] coordinates of the cell\nin one of the corners of the region.\n\u0060end_cell\u0060 represents the coordinates of the other corner.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleAsListView","title":"Attr.styleAsListView","content":"Attr.styleAsListView \nstyleAsListView \n\nIf True, then the table will be styled like a list view\nand not have borders between the columns.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleCell","title":"Attr.styleCell","content":"Attr.styleCell \nstyleCell \n\nCSS styles to be applied to each individual cell of the table.\nThis includes the header cells, the \u0060data\u0060 cells, and the filter\ncells.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleCellConditional","title":"Attr.styleCellConditional","content":"Attr.styleCellConditional \nstyleCellConditional \n\nConditional CSS styles for the cells.\nThis can be used to apply styles to cells on a per-column basis.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleData","title":"Attr.styleData","content":"Attr.styleData \nstyleData \n\nCSS styles to be applied to each individual data cell.\nThat is, unlike \u0060style_cell\u0060, it excludes the header and filter cells.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleDataConditional","title":"Attr.styleDataConditional","content":"Attr.styleDataConditional \nstyleDataConditional \n\nConditional CSS styles for the data cells.\nThis can be used to apply styles to data cells on a per-column basis.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleFilter","title":"Attr.styleFilter","content":"Attr.styleFilter \nstyleFilter \n\nCSS styles to be applied to the filter cells.\nNote that this may change in the future as we build out a\nmore complex filtering UI.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleFilterConditional","title":"Attr.styleFilterConditional","content":"Attr.styleFilterConditional \nstyleFilterConditional \n\nConditional CSS styles for the filter cells.\nThis can be used to apply styles to filter cells on a per-column basis.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleHeader","title":"Attr.styleHeader","content":"Attr.styleHeader \nstyleHeader \n\nCSS styles to be applied to each individual header cell.\nThat is, unlike \u0060style_cell\u0060, it excludes the \u0060data\u0060 and filter cells.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleHeaderConditional","title":"Attr.styleHeaderConditional","content":"Attr.styleHeaderConditional \nstyleHeaderConditional \n\nConditional CSS styles for the header cells.\nThis can be used to apply styles to header cells on a per-column basis.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#styleTable","title":"Attr.styleTable","content":"Attr.styleTable \nstyleTable \n\nCSS styles to be applied to the outer \u0060table\u0060 container.\nThis is commonly used for setting properties like the\nwidth or the height of the table.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#tooltip","title":"Attr.tooltip","content":"Attr.tooltip \ntooltip \n\n\u0060tooltip\u0060 is the column based tooltip configuration applied to all rows. The key is the column\n id and the value is a tooltip configuration.\nExample: {i: {\u0027value\u0027: i, \u0027use_with: \u0027both\u0027} for i in df.columns}\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#tooltipConditional","title":"Attr.tooltipConditional","content":"Attr.tooltipConditional \ntooltipConditional \n\n\u0060tooltip_conditional\u0060 represents the tooltip shown\nfor different columns and cells.\nThis property allows you to specify different tooltips\ndepending on certain conditions. For example, you may have\ndifferent tooltips in the same column based on the value\nof a certain data property.\nPriority is from first to last defined conditional tooltip\nin the list. Higher priority (more specific) conditional\ntooltips should be put at the beginning of the list.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#tooltipData","title":"Attr.tooltipData","content":"Attr.tooltipData \ntooltipData \n\n\u0060tooltip_data\u0060 represents the tooltip shown\nfor different columns and cells.\nA list of dicts for which each key is\na column id and the value is a tooltip configuration.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#tooltipDelay","title":"Attr.tooltipDelay","content":"Attr.tooltipDelay \ntooltipDelay \n\n\u0060tooltip_delay\u0060 represents the table-wide delay in milliseconds before\nthe tooltip is shown when hovering a cell. If set to \u0060None\u0060, the tooltip\nwill be shown immediately.\nDefaults to 350.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#tooltipDuration","title":"Attr.tooltipDuration","content":"Attr.tooltipDuration \ntooltipDuration \n\n\u0060tooltip_duration\u0060 represents the table-wide duration in milliseconds\nduring which the tooltip will be displayed when hovering a cell. If\nset to \u0060None\u0060, the tooltip will not disappear.\nDefaults to 2000.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#tooltipHeader","title":"Attr.tooltipHeader","content":"Attr.tooltipHeader \ntooltipHeader \n\n\u0060tooltip_header\u0060 represents the tooltip shown\nfor each header column and optionally each header row.\nExample to show long column names in a tooltip: {i: i for i in df.columns}.\nExample to show different column names in a tooltip: {\u0027Rep\u0027: \u0027Republican\u0027, \u0027Dem\u0027: \u0027Democrat\u0027}.\nIf the table has multiple rows of headers, then use a list as the value of the\n\u0060tooltip_header\u0060 items.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#virtualization","title":"Attr.virtualization","content":"Attr.virtualization \nvirtualization \n\nThis property tells the table to use virtualization when rendering.\nAssumptions are that:\nthe width of the columns is fixed;\nthe height of the rows is always the same; and\nruntime styling changes will not affect width and height vs. first rendering\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-cell.html","title":"Cell","content":"Cell \n\nrecord with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027\n \nCell.( .ctor ) \n( .ctor ) \nCell.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-cell.html#( .ctor )","title":"Cell.( .ctor )","content":"Cell.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-cell.html#init","title":"Cell.init","content":"Cell.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-cellstylecondition.html","title":"CellStyleCondition","content":"CellStyleCondition \n\nrecord with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027\n \nCellStyleCondition.( .ctor ) \n( .ctor ) \nCellStyleCondition.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-cellstylecondition.html#( .ctor )","title":"CellStyleCondition.( .ctor )","content":"CellStyleCondition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-cellstylecondition.html#init","title":"CellStyleCondition.init","content":"CellStyleCondition.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-clearablecolumn.html","title":"ClearableColumn","content":"ClearableColumn \n\nvalue equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean\n\n\nIf true, the user can clear the column by clicking on the \u0060clear\u0060\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf \u0060last\u0060, the \u0060clear\u0060 action button will only appear on the last header\nrow. If \u0060first\u0060 it will only appear on the first header row. These\nare respectively shortcut equivalents to \u0060[false, ..., false, true]\u0060 and\n\u0060[true, false, ..., false]\u0060.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the \u0060clear\u0060 action button in by\nsupplying an array of booleans.\nFor example, \u0060[true, false]\u0060 will display the \u0060clear\u0060 action button\non the first row, but not the second row.\nIf the \u0060clear\u0060 action button appears on a merged column, then clicking\non that button will clear *all* of the merged columns associated with it.\nUnlike \u0060column.deletable\u0060, this action does not remove the column(s)\nfrom the table. It only removed the associated entries from \u0060data\u0060.\n \nClearableColumn.convert \nconvert"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-clearablecolumn.html#convert","title":"ClearableColumn.convert","content":"ClearableColumn.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-column.html","title":"Column","content":"Column \n\nrecord with the fields: \u0027clearable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027deletable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027editable: boolean (optional)\u0027, \u0027filter_options: record with the field: \u0027case: value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027 (optional)\u0027 (optional)\u0027, \u0027hideable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027renamable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027selectable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027format: record with the fields: \u0027locale: record with the fields: \u0027symbol: list with values of type: string (optional)\u0027, \u0027decimal: string (optional)\u0027, \u0027group: string (optional)\u0027, \u0027grouping: list with values of type: number (optional)\u0027, \u0027numerals: list with values of type: string (optional)\u0027, \u0027percent: string (optional)\u0027, \u0027separate_4digits: boolean (optional)\u0027 (optional)\u0027, \u0027nully: boolean | number | string | record | list (optional)\u0027, \u0027prefix: number (optional)\u0027, \u0027specifier: string (optional)\u0027 (optional)\u0027, \u0027id: string (required)\u0027, \u0027name: string | list with values of type: string (required)\u0027, \u0027presentation: value equal to: \u0027input\u0027, \u0027dropdown\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027on_change: record with the fields: \u0027action: value equal to: \u0027coerce\u0027, \u0027none\u0027, \u0027validate\u0027 (optional)\u0027, \u0027failure: value equal to: \u0027accept\u0027, \u0027default\u0027, \u0027reject\u0027 (optional)\u0027 (optional)\u0027, \u0027sort_as_null: list with values of type: string | number | boolean (optional)\u0027, \u0027validation: record with the fields: \u0027allow_null: boolean (optional)\u0027, \u0027default: boolean | number | string | record | list (optional)\u0027, \u0027allow_YY: boolean (optional)\u0027 (optional)\u0027, \u0027type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027\n \nColumn.init \ninit \nColumn.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-column.html#init","title":"Column.init","content":"Column.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-column.html#init","title":"Column.init","content":"Column.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnfilteroption.html","title":"ColumnFilterOption","content":"ColumnFilterOption \n\nrecord with the field: \u0027case: value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027 (optional)\u0027\n\n\nThere are two \u0060filter_options\u0060 props in the table.\nThis is the column-level filter_options prop and there is\nalso the table-level \u0060filter_options\u0060 prop.\nThese props determine whether the applicable filter relational\noperators will default to \u0060sensitive\u0060 or \u0060insensitive\u0060 comparison.\nIf the column-level \u0060filter_options\u0060 prop is set it overrides\nthe table-level \u0060filter_options\u0060 prop for that column.\n \nColumnFilterOption.( .ctor ) \n( .ctor ) \nColumnFilterOption.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnfilteroption.html#( .ctor )","title":"ColumnFilterOption.( .ctor )","content":"ColumnFilterOption.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnfilteroption.html#init","title":"ColumnFilterOption.init","content":"ColumnFilterOption.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnformat.html","title":"ColumnFormat","content":"ColumnFormat \n\nrecord with the fields: \u0027locale: record with the fields: \u0027symbol: list with values of type: string (optional)\u0027, \u0027decimal: string (optional)\u0027, \u0027group: string (optional)\u0027, \u0027grouping: list with values of type: number (optional)\u0027, \u0027numerals: list with values of type: string (optional)\u0027, \u0027percent: string (optional)\u0027, \u0027separate_4digits: boolean (optional)\u0027 (optional)\u0027, \u0027nully: boolean | number | string | record | list (optional)\u0027, \u0027prefix: number (optional)\u0027, \u0027specifier: string (optional)\u0027\n\n\nThe formatting applied to the column\u0027s data.\nThis prop is derived from the [d3-format](https://github.com/d3/d3-format) library specification. Apart from\nbeing structured slightly differently (under a single prop), the usage is the same.\nSee also dash_table.FormatTemplate.  It contains helper functions for typical number formats.\n \nColumnFormat.( .ctor ) \n( .ctor ) \nColumnFormat.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnformat.html#( .ctor )","title":"ColumnFormat.( .ctor )","content":"ColumnFormat.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnformat.html#init","title":"ColumnFormat.init","content":"ColumnFormat.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnonchange.html","title":"ColumnOnChange","content":"ColumnOnChange \n\nrecord with the fields: \u0027action: value equal to: \u0027coerce\u0027, \u0027none\u0027, \u0027validate\u0027 (optional)\u0027, \u0027failure: value equal to: \u0027accept\u0027, \u0027default\u0027, \u0027reject\u0027 (optional)\u0027\n\n\nThe \u0060on_change\u0060 behavior of the column for user-initiated modifications.\n \nColumnOnChange.( .ctor ) \n( .ctor ) \nColumnOnChange.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnonchange.html#( .ctor )","title":"ColumnOnChange.( .ctor )","content":"ColumnOnChange.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnonchange.html#init","title":"ColumnOnChange.init","content":"ColumnOnChange.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnpresentation.html","title":"ColumnPresentation","content":"ColumnPresentation \n\nvalue equal to: \u0027input\u0027, \u0027dropdown\u0027, \u0027markdown\u0027\n\n\nThe \u0060presentation\u0060 to use to display data. Markdown can be used on\ncolumns with type \u0027text\u0027.  See \u0027dropdown\u0027 for more info.\nDefaults to \u0027input\u0027 for [\u0027datetime\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027any\u0027].\n \nColumnPresentation.convert \nconvert \nColumnPresentation.Input \nInput \nColumnPresentation.Dropdown \nDropdown \nColumnPresentation.Markdown \nMarkdown"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnpresentation.html#convert","title":"ColumnPresentation.convert","content":"ColumnPresentation.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnpresentation.html#Input","title":"ColumnPresentation.Input","content":"ColumnPresentation.Input \nInput \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnpresentation.html#Dropdown","title":"ColumnPresentation.Dropdown","content":"ColumnPresentation.Dropdown \nDropdown \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnpresentation.html#Markdown","title":"ColumnPresentation.Markdown","content":"ColumnPresentation.Markdown \nMarkdown \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntooltip.html","title":"ColumnTooltip","content":"ColumnTooltip \n\nstring | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027use_with: value equal to: \u0027both\u0027, \u0027data\u0027, \u0027header\u0027 (optional)\u0027, \u0027value: string (required)\u0027\n \nColumnTooltip.convert \nconvert \nColumnTooltip.Text \nText \nColumnTooltip.UseWithValue \nUseWithValue"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntooltip.html#convert","title":"ColumnTooltip.convert","content":"ColumnTooltip.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntooltip.html#Text","title":"ColumnTooltip.Text","content":"ColumnTooltip.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntooltip.html#UseWithValue","title":"ColumnTooltip.UseWithValue","content":"ColumnTooltip.UseWithValue \nUseWithValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntype.html","title":"ColumnType","content":"ColumnType \n\nvalue equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027\n\n\nThe data-type provides support for per column typing and allows for data\nvalidation and coercion.\n\u0027numeric\u0027: represents both floats and ints.\n\u0027text\u0027: represents a string.\n\u0027datetime\u0027: a string representing a date or date-time, in the form:\n  \u0027YYYY-MM-DD HH:MM:SS.ssssss\u0027 or some truncation thereof. Years must\n  have 4 digits, unless you use \u0060validation.allow_YY: true\u0060. Also\n  accepts \u0027T\u0027 or \u0027t\u0027 between date and time, and allows timezone info\n  at the end. To convert these strings to Python \u0060datetime\u0060 objects,\n  use \u0060dateutil.parser.isoparse\u0060. In R use \u0060parse_iso_8601\u0060 from the\n  \u0060parsedate\u0060 library.\n  WARNING: these parsers do not work with 2-digit years, if you use\n  \u0060validation.allow_YY: true\u0060 and do not coerce to 4-digit years.\n  And parsers that do work with 2-digit years may make a different\n  guess about the century than we make on the front end.\n\u0027any\u0027: represents any type of data.\nDefaults to \u0027any\u0027 if undefined.\n \nColumnType.convert \nconvert \nColumnType.Any \nAny \nColumnType.Numeric \nNumeric \nColumnType.Text \nText \nColumnType.Datetime \nDatetime"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntype.html#convert","title":"ColumnType.convert","content":"ColumnType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntype.html#Any","title":"ColumnType.Any","content":"ColumnType.Any \nAny \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntype.html#Numeric","title":"ColumnType.Numeric","content":"ColumnType.Numeric \nNumeric \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntype.html#Text","title":"ColumnType.Text","content":"ColumnType.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columntype.html#Datetime","title":"ColumnType.Datetime","content":"ColumnType.Datetime \nDatetime \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnvalidation.html","title":"ColumnValidation","content":"ColumnValidation \n\nrecord with the fields: \u0027allow_null: boolean (optional)\u0027, \u0027default: boolean | number | string | record | list (optional)\u0027, \u0027allow_YY: boolean (optional)\u0027\n\n\nThe \u0060validation\u0060 options for user input processing that can accept, reject or apply a\ndefault value.\n \nColumnValidation.( .ctor ) \n( .ctor ) \nColumnValidation.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnvalidation.html#( .ctor )","title":"ColumnValidation.( .ctor )","content":"ColumnValidation.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-columnvalidation.html#init","title":"ColumnValidation.init","content":"ColumnValidation.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalcellstyle.html","title":"ConditionalCellStyle","content":"ConditionalCellStyle \n\nrecord with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027 (optional)\u0027\n \nConditionalCellStyle.( .ctor ) \n( .ctor ) \nConditionalCellStyle.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalcellstyle.html#( .ctor )","title":"ConditionalCellStyle.( .ctor )","content":"ConditionalCellStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalcellstyle.html#init","title":"ConditionalCellStyle.init","content":"ConditionalCellStyle.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalcolumnidtype.html","title":"ConditionalColumnIdType","content":"ConditionalColumnIdType \n\nstring | list with values of type: string\n \nConditionalColumnIdType.convert \nconvert \nConditionalColumnIdType.Id \nId \nConditionalColumnIdType.Ids \nIds"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalcolumnidtype.html#convert","title":"ConditionalColumnIdType.convert","content":"ConditionalColumnIdType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalcolumnidtype.html#Id","title":"ConditionalColumnIdType.Id","content":"ConditionalColumnIdType.Id \nId \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalcolumnidtype.html#Ids","title":"ConditionalColumnIdType.Ids","content":"ConditionalColumnIdType.Ids \nIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaldatastyle.html","title":"ConditionalDataStyle","content":"ConditionalDataStyle \n\nrecord with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027state: value equal to: \u0027active\u0027, \u0027selected\u0027 (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 | list with values of type: number (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027\n \nConditionalDataStyle.( .ctor ) \n( .ctor ) \nConditionalDataStyle.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaldatastyle.html#( .ctor )","title":"ConditionalDataStyle.( .ctor )","content":"ConditionalDataStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaldatastyle.html#init","title":"ConditionalDataStyle.init","content":"ConditionalDataStyle.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaldropdown.html","title":"ConditionalDropdown","content":"ConditionalDropdown \n\nrecord with the fields: \u0027clearable: boolean (optional)\u0027, \u0027if: record with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027 (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027\n \nConditionalDropdown.( .ctor ) \n( .ctor ) \nConditionalDropdown.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaldropdown.html#( .ctor )","title":"ConditionalDropdown.( .ctor )","content":"ConditionalDropdown.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaldropdown.html#init","title":"ConditionalDropdown.init","content":"ConditionalDropdown.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalfilteraction.html","title":"ConditionalFilterAction","content":"ConditionalFilterAction \n\nrecord with the fields: \u0027type: value equal to: \u0027custom\u0027, \u0027native\u0027 (required)\u0027, \u0027operator: value equal to: \u0027and\u0027, \u0027or\u0027 (optional)\u0027\n \nConditionalFilterAction.( .ctor ) \n( .ctor ) \nConditionalFilterAction.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalfilteraction.html#( .ctor )","title":"ConditionalFilterAction.( .ctor )","content":"ConditionalFilterAction.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalfilteraction.html#init","title":"ConditionalFilterAction.init","content":"ConditionalFilterAction.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalfilterstyle.html","title":"ConditionalFilterStyle","content":"ConditionalFilterStyle \n\nrecord with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027\n \nConditionalFilterStyle.( .ctor ) \n( .ctor ) \nConditionalFilterStyle.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalfilterstyle.html#( .ctor )","title":"ConditionalFilterStyle.( .ctor )","content":"ConditionalFilterStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalfilterstyle.html#init","title":"ConditionalFilterStyle.init","content":"ConditionalFilterStyle.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalheaderstyle.html","title":"ConditionalHeaderStyle","content":"ConditionalHeaderStyle \n\nrecord with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027header_index: number | list with values of type: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027\n \nConditionalHeaderStyle.( .ctor ) \n( .ctor ) \nConditionalHeaderStyle.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalheaderstyle.html#( .ctor )","title":"ConditionalHeaderStyle.( .ctor )","content":"ConditionalHeaderStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionalheaderstyle.html#init","title":"ConditionalHeaderStyle.init","content":"ConditionalHeaderStyle.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaltooltip.html","title":"ConditionalTooltip","content":"ConditionalTooltip \n\nrecord with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027if: record with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027 (required)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027\n \nConditionalTooltip.( .ctor ) \n( .ctor ) \nConditionalTooltip.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaltooltip.html#( .ctor )","title":"ConditionalTooltip.( .ctor )","content":"ConditionalTooltip.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-conditionaltooltip.html#init","title":"ConditionalTooltip.init","content":"ConditionalTooltip.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-css.html","title":"Css","content":"Css \n\nrecord with the fields: \u0027selector: string (required)\u0027, \u0027rule: string (required)\u0027\n \nCss.( .ctor ) \n( .ctor ) \nCss.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-css.html#( .ctor )","title":"Css.( .ctor )","content":"Css.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-css.html#init","title":"Css.init","content":"Css.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datastylecondition.html","title":"DataStyleCondition","content":"DataStyleCondition \n\nrecord with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027state: value equal to: \u0027active\u0027, \u0027selected\u0027 (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 | list with values of type: number (optional)\u0027, \u0027column_editable: boolean (optional)\u0027\n \nDataStyleCondition.( .ctor ) \n( .ctor ) \nDataStyleCondition.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datastylecondition.html#( .ctor )","title":"DataStyleCondition.( .ctor )","content":"DataStyleCondition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datastylecondition.html#init","title":"DataStyleCondition.init","content":"DataStyleCondition.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datastylestate.html","title":"DataStyleState","content":"DataStyleState \n\nvalue equal to: \u0027active\u0027, \u0027selected\u0027\n \nDataStyleState.convert \nconvert \nDataStyleState.Active \nActive \nDataStyleState.Selected \nSelected"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datastylestate.html#convert","title":"DataStyleState.convert","content":"DataStyleState.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datastylestate.html#Active","title":"DataStyleState.Active","content":"DataStyleState.Active \nActive \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datastylestate.html#Selected","title":"DataStyleState.Selected","content":"DataStyleState.Selected \nSelected \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatable.html","title":"DataTable","content":"DataTable \n\nDash DataTable is an interactive table component designed for\ndesigned for viewing, editing, and exploring large datasets.\nDataTable is rendered with standard, semantic HTML \u003Ctable/\u003E markup,\nwhich makes it accessible, responsive, and easy to style. This\ncomponent was written from scratch in React.js specifically for the\nDash community. Its API was designed to be ergonomic and its behavior\nis completely customizable through its properties.\n \nDataTable.( .ctor ) \n( .ctor ) \nDataTable.applyMembers \napplyMembers \nDataTable.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatable.html#( .ctor )","title":"DataTable.( .ctor )","content":"DataTable.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatable.html#applyMembers","title":"DataTable.applyMembers","content":"DataTable.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatable.html#init","title":"DataTable.init","content":"DataTable.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatooltip.html","title":"DataTooltip","content":"DataTooltip \n\nstring | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027\n \nDataTooltip.convert \nconvert \nDataTooltip.Text \nText \nDataTooltip.Value \nValue"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatooltip.html#convert","title":"DataTooltip.convert","content":"DataTooltip.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatooltip.html#Text","title":"DataTooltip.Text","content":"DataTooltip.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-datatooltip.html#Value","title":"DataTooltip.Value","content":"DataTooltip.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-deletablecolumn.html","title":"DeletableColumn","content":"DeletableColumn \n\nvalue equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean\n\n\nIf true, the user can remove the column by clicking on the \u0060delete\u0060\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf \u0060last\u0060, the \u0060delete\u0060 action button will only appear on the last header\nrow. If \u0060first\u0060 it will only appear on the first header row. These\nare respectively shortcut equivalents to \u0060[false, ..., false, true]\u0060 and\n\u0060[true, false, ..., false]\u0060.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the \u0060delete\u0060 action button in by\nsupplying an array of booleans.\nFor example, \u0060[true, false]\u0060 will display the \u0060delete\u0060 action button\non the first row, but not the second row.\nIf the \u0060delete\u0060 action button appears on a merged column, then clicking\non that button will remove *all* of the merged columns associated with it.\n \nDeletableColumn.convert \nconvert"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-deletablecolumn.html#convert","title":"DeletableColumn.convert","content":"DeletableColumn.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdown.html","title":"Dropdown","content":"Dropdown \n\nrecord with the fields: \u0027clearable: boolean (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027\n \nDropdown.( .ctor ) \n( .ctor ) \nDropdown.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdown.html#( .ctor )","title":"Dropdown.( .ctor )","content":"Dropdown.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdown.html#init","title":"Dropdown.init","content":"Dropdown.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdowncondition.html","title":"DropdownCondition","content":"DropdownCondition \n\nrecord with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027\n \nDropdownCondition.( .ctor ) \n( .ctor ) \nDropdownCondition.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdowncondition.html#( .ctor )","title":"DropdownCondition.( .ctor )","content":"DropdownCondition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdowncondition.html#init","title":"DropdownCondition.init","content":"DropdownCondition.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdownoption.html","title":"DropdownOption","content":"DropdownOption \n\nrecord with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027\n \nDropdownOption.( .ctor ) \n( .ctor ) \nDropdownOption.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdownoption.html#( .ctor )","title":"DropdownOption.( .ctor )","content":"DropdownOption.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-dropdownoption.html#init","title":"DropdownOption.init","content":"DropdownOption.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-exportcolumnstype.html","title":"ExportColumnsType","content":"ExportColumnsType \n\nvalue equal to: \u0027all\u0027, \u0027visible\u0027\n \nExportColumnsType.convert \nconvert \nExportColumnsType.All \nAll \nExportColumnsType.Visible \nVisible"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-exportcolumnstype.html#convert","title":"ExportColumnsType.convert","content":"ExportColumnsType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-exportcolumnstype.html#All","title":"ExportColumnsType.All","content":"ExportColumnsType.All \nAll \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-exportcolumnstype.html#Visible","title":"ExportColumnsType.Visible","content":"ExportColumnsType.Visible \nVisible \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-failureaction.html","title":"FailureAction","content":"FailureAction \n\nvalue equal to: \u0027accept\u0027, \u0027default\u0027, \u0027reject\u0027\n\n\n(default \u0027reject\u0027):  What to do with the value if the action fails.\n \u0027accept\u0027: use the invalid value;\n \u0027default\u0027: replace the provided value with \u0060validation.default\u0060;\n \u0027reject\u0027: do not modify the existing value.\n \nFailureAction.convert \nconvert \nFailureAction.Accept \nAccept \nFailureAction.Default \nDefault \nFailureAction.Reject \nReject"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-failureaction.html#convert","title":"FailureAction.convert","content":"FailureAction.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-failureaction.html#Accept","title":"FailureAction.Accept","content":"FailureAction.Accept \nAccept \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-failureaction.html#Default","title":"FailureAction.Default","content":"FailureAction.Default \nDefault \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-failureaction.html#Reject","title":"FailureAction.Reject","content":"FailureAction.Reject \nReject \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteraction.html","title":"FilterAction","content":"FilterAction \n\nvalue equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027 | record with the fields: \u0027type: value equal to: \u0027custom\u0027, \u0027native\u0027 (required)\u0027, \u0027operator: value equal to: \u0027and\u0027, \u0027or\u0027 (optional)\u0027\n \nFilterAction.convert \nconvert \nFilterAction.Action \nAction \nFilterAction.Conditional \nConditional"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteraction.html#convert","title":"FilterAction.convert","content":"FilterAction.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteraction.html#Action","title":"FilterAction.Action","content":"FilterAction.Action \nAction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteraction.html#Conditional","title":"FilterAction.Conditional","content":"FilterAction.Conditional \nConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractionoperator.html","title":"FilterActionOperator","content":"FilterActionOperator \n\nvalue equal to: \u0027and\u0027, \u0027or\u0027\n \nFilterActionOperator.convert \nconvert \nFilterActionOperator.And \nAnd \nFilterActionOperator.Or \nOr"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractionoperator.html#convert","title":"FilterActionOperator.convert","content":"FilterActionOperator.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractionoperator.html#And","title":"FilterActionOperator.And","content":"FilterActionOperator.And \nAnd \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractionoperator.html#Or","title":"FilterActionOperator.Or","content":"FilterActionOperator.Or \nOr \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractiontype.html","title":"FilterActionType","content":"FilterActionType \n\nvalue equal to: \u0027custom\u0027, \u0027native\u0027\n \nFilterActionType.convert \nconvert \nFilterActionType.Custom \nCustom \nFilterActionType.Native \nNative"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractiontype.html#convert","title":"FilterActionType.convert","content":"FilterActionType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractiontype.html#Custom","title":"FilterActionType.Custom","content":"FilterActionType.Custom \nCustom \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteractiontype.html#Native","title":"FilterActionType.Native","content":"FilterActionType.Native \nNative \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteroption.html","title":"FilterOption","content":"FilterOption \n\nrecord with the field: \u0027case: value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027 (optional)\u0027\n \nFilterOption.( .ctor ) \n( .ctor ) \nFilterOption.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteroption.html#( .ctor )","title":"FilterOption.( .ctor )","content":"FilterOption.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filteroption.html#init","title":"FilterOption.init","content":"FilterOption.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filtersensitivity.html","title":"FilterSensitivity","content":"FilterSensitivity \n\nSensitivity value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027\n \nFilterSensitivity.convert \nconvert \nFilterSensitivity.Sensitive \nSensitive \nFilterSensitivity.Insensitive \nInsensitive"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filtersensitivity.html#convert","title":"FilterSensitivity.convert","content":"FilterSensitivity.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filtersensitivity.html#Sensitive","title":"FilterSensitivity.Sensitive","content":"FilterSensitivity.Sensitive \nSensitive \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filtersensitivity.html#Insensitive","title":"FilterSensitivity.Insensitive","content":"FilterSensitivity.Insensitive \nInsensitive \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filterstylecondition.html","title":"FilterStyleCondition","content":"FilterStyleCondition \n\nrecord with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027\n \nFilterStyleCondition.( .ctor ) \n( .ctor ) \nFilterStyleCondition.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filterstylecondition.html#( .ctor )","title":"FilterStyleCondition.( .ctor )","content":"FilterStyleCondition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-filterstylecondition.html#init","title":"FilterStyleCondition.init","content":"FilterStyleCondition.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-fixed.html","title":"Fixed","content":"Fixed \n\nfixed_columns/fixed_headers (record with the fields: \u0027data: value equal to: \u00270\u0027 (optional)\u0027, \u0027headers: value equal to: \u0027false\u0027 (optional)\u0027 | record with the fields: \u0027data: number (optional)\u0027, \u0027headers: value equal to: \u0027true\u0027 (required)\u0027; default {\n \nFixed.( .ctor ) \n( .ctor ) \nFixed.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-fixed.html#( .ctor )","title":"Fixed.( .ctor )","content":"Fixed.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-fixed.html#init","title":"Fixed.init","content":"Fixed.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headerstylecondition.html","title":"HeaderStyleCondition","content":"HeaderStyleCondition \n\nrecord with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027header_index: number | list with values of type: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027\n \nHeaderStyleCondition.( .ctor ) \n( .ctor ) \nHeaderStyleCondition.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headerstylecondition.html#( .ctor )","title":"HeaderStyleCondition.( .ctor )","content":"HeaderStyleCondition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headerstylecondition.html#init","title":"HeaderStyleCondition.init","content":"HeaderStyleCondition.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headertooltip.html","title":"HeaderTooltip","content":"HeaderTooltip \n\nstring | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027 | list with values of type: value equal to: \u0027null\u0027 | string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027\n \nHeaderTooltip.convert \nconvert \nHeaderTooltip.Text \nText \nHeaderTooltip.Value \nValue \nHeaderTooltip.Values \nValues"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headertooltip.html#convert","title":"HeaderTooltip.convert","content":"HeaderTooltip.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headertooltip.html#Text","title":"HeaderTooltip.Text","content":"HeaderTooltip.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headertooltip.html#Value","title":"HeaderTooltip.Value","content":"HeaderTooltip.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-headertooltip.html#Values","title":"HeaderTooltip.Values","content":"HeaderTooltip.Values \nValues \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-hideablecolumn.html","title":"HideableColumn","content":"HideableColumn \n\nvalue equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean\n\n\nIf true, the user can hide the column by clicking on the \u0060hide\u0060\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf \u0060last\u0060, the \u0060hide\u0060 action button will only appear on the last header\nrow. If \u0060first\u0060 it will only appear on the first header row. These\nare respectively shortcut equivalents to \u0060[false, ..., false, true]\u0060 and\n\u0060[true, false, ..., false]\u0060.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the \u0060hide\u0060 action button in by\nsupplying an array of booleans.\nFor example, \u0060[true, false]\u0060 will display the \u0060hide\u0060 action button\non the first row, but not the second row.\nIf the \u0060hide\u0060 action button appears on a merged column, then clicking\non that button will hide *all* of the merged columns associated with it.\n \nHideableColumn.convert \nconvert"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-hideablecolumn.html#convert","title":"HideableColumn.convert","content":"HideableColumn.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linkbehaviour.html","title":"LinkBehaviour","content":"LinkBehaviour \n\nvalue equal to: \u0027_blank\u0027, \u0027_parent\u0027, \u0027_self\u0027, \u0027_top\u0027\n \nLinkBehaviour.convert \nconvert \nLinkBehaviour.Blank \nBlank \nLinkBehaviour.Parent \nParent \nLinkBehaviour.Self \nSelf \nLinkBehaviour.Top \nTop"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linkbehaviour.html#convert","title":"LinkBehaviour.convert","content":"LinkBehaviour.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linkbehaviour.html#Blank","title":"LinkBehaviour.Blank","content":"LinkBehaviour.Blank \nBlank \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linkbehaviour.html#Parent","title":"LinkBehaviour.Parent","content":"LinkBehaviour.Parent \nParent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linkbehaviour.html#Self","title":"LinkBehaviour.Self","content":"LinkBehaviour.Self \nSelf \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linkbehaviour.html#Top","title":"LinkBehaviour.Top","content":"LinkBehaviour.Top \nTop \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linktarget.html","title":"LinkTarget","content":"LinkTarget \n\nstring | value equal to: \u0027_blank\u0027, \u0027_parent\u0027, \u0027_self\u0027, \u0027_top\u0027\n\n\n(default: \u0027_blank\u0027).  The link\u0027s behavior (_blank opens the link in a\nnew tab, _parent opens the link in the parent frame, _self opens the link in the\ncurrent tab, and _top opens the link in the top frame) or a string\n \nLinkTarget.convert \nconvert \nLinkTarget.Text \nText \nLinkTarget.Behaviour \nBehaviour"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linktarget.html#convert","title":"LinkTarget.convert","content":"LinkTarget.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linktarget.html#Text","title":"LinkTarget.Text","content":"LinkTarget.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-linktarget.html#Behaviour","title":"LinkTarget.Behaviour","content":"LinkTarget.Behaviour \nBehaviour \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-locale.html","title":"Locale","content":"Locale \n\nrecord with the fields: \u0027symbol: list with values of type: string (optional)\u0027, \u0027decimal: string (optional)\u0027, \u0027group: string (optional)\u0027, \u0027grouping: list with values of type: number (optional)\u0027, \u0027numerals: list with values of type: string (optional)\u0027, \u0027percent: string (optional)\u0027, \u0027separate_4digits: boolean (optional)\u0027\n \nLocale.( .ctor ) \n( .ctor ) \nLocale.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-locale.html#( .ctor )","title":"Locale.( .ctor )","content":"Locale.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-locale.html#init","title":"Locale.init","content":"Locale.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-markdownoption.html","title":"MarkdownOption","content":"MarkdownOption \n\nrecord with the fields: \u0027link_target: string | value equal to: \u0027_blank\u0027, \u0027_parent\u0027, \u0027_self\u0027, \u0027_top\u0027 (optional)\u0027, \u0027html: boolean (optional)\u0027\n \nMarkdownOption.( .ctor ) \n( .ctor ) \nMarkdownOption.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-markdownoption.html#( .ctor )","title":"MarkdownOption.( .ctor )","content":"MarkdownOption.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-markdownoption.html#init","title":"MarkdownOption.init","content":"MarkdownOption.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeactiontype.html","title":"MaybeActionType","content":"MaybeActionType \n\nvalue equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027\n \nMaybeActionType.convert \nconvert \nMaybeActionType.Custom \nCustom \nMaybeActionType.Native \nNative \nMaybeActionType.None \nNone"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeactiontype.html#convert","title":"MaybeActionType.convert","content":"MaybeActionType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeactiontype.html#Custom","title":"MaybeActionType.Custom","content":"MaybeActionType.Custom \nCustom \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeactiontype.html#Native","title":"MaybeActionType.Native","content":"MaybeActionType.Native \nNative \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeactiontype.html#None","title":"MaybeActionType.None","content":"MaybeActionType.None \nNone \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportformat.html","title":"MaybeExportFormat","content":"MaybeExportFormat \n\nvalue equal to: \u0027csv\u0027, \u0027xlsx\u0027, \u0027none\u0027\n \nMaybeExportFormat.convert \nconvert \nMaybeExportFormat.Csv \nCsv \nMaybeExportFormat.Xlsx \nXlsx \nMaybeExportFormat.None \nNone"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportformat.html#convert","title":"MaybeExportFormat.convert","content":"MaybeExportFormat.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportformat.html#Csv","title":"MaybeExportFormat.Csv","content":"MaybeExportFormat.Csv \nCsv \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportformat.html#Xlsx","title":"MaybeExportFormat.Xlsx","content":"MaybeExportFormat.Xlsx \nXlsx \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportformat.html#None","title":"MaybeExportFormat.None","content":"MaybeExportFormat.None \nNone \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportheaders.html","title":"MaybeExportHeaders","content":"MaybeExportHeaders \n\nvalue equal to: \u0027none\u0027, \u0027ids\u0027, \u0027names\u0027, \u0027display\u0027\n \nMaybeExportHeaders.convert \nconvert \nMaybeExportHeaders.None \nNone \nMaybeExportHeaders.Ids \nIds \nMaybeExportHeaders.Names \nNames \nMaybeExportHeaders.Display \nDisplay"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportheaders.html#convert","title":"MaybeExportHeaders.convert","content":"MaybeExportHeaders.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportheaders.html#None","title":"MaybeExportHeaders.None","content":"MaybeExportHeaders.None \nNone \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportheaders.html#Ids","title":"MaybeExportHeaders.Ids","content":"MaybeExportHeaders.Ids \nIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportheaders.html#Names","title":"MaybeExportHeaders.Names","content":"MaybeExportHeaders.Names \nNames \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeexportheaders.html#Display","title":"MaybeExportHeaders.Display","content":"MaybeExportHeaders.Display \nDisplay \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeonchangeaction.html","title":"MaybeOnChangeAction","content":"MaybeOnChangeAction \n\nvalue equal to: \u0027coerce\u0027, \u0027none\u0027, \u0027validate\u0027\n\n\n(default \u0027coerce\u0027):  \u0027none\u0027: do not validate data;\n \u0027coerce\u0027: check if the data corresponds to the destination type and\n attempts to coerce it into the destination type if not;\n \u0027validate\u0027: check if the data corresponds to the destination type (no coercion).\n \nMaybeOnChangeAction.convert \nconvert \nMaybeOnChangeAction.Coerce \nCoerce \nMaybeOnChangeAction.None \nNone \nMaybeOnChangeAction.Validate \nValidate"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeonchangeaction.html#convert","title":"MaybeOnChangeAction.convert","content":"MaybeOnChangeAction.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeonchangeaction.html#Coerce","title":"MaybeOnChangeAction.Coerce","content":"MaybeOnChangeAction.Coerce \nCoerce \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeonchangeaction.html#None","title":"MaybeOnChangeAction.None","content":"MaybeOnChangeAction.None \nNone \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybeonchangeaction.html#Validate","title":"MaybeOnChangeAction.Validate","content":"MaybeOnChangeAction.Validate \nValidate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybetooltip.html","title":"MaybeTooltip","content":"MaybeTooltip \n\nvalue equal to: \u0027null\u0027 | string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027\n \nMaybeTooltip.convert \nconvert \nMaybeTooltip.Text \nText \nMaybeTooltip.Value \nValue \nMaybeTooltip.Null \nNull"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybetooltip.html#convert","title":"MaybeTooltip.convert","content":"MaybeTooltip.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybetooltip.html#Text","title":"MaybeTooltip.Text","content":"MaybeTooltip.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybetooltip.html#Value","title":"MaybeTooltip.Value","content":"MaybeTooltip.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-maybetooltip.html#Null","title":"MaybeTooltip.Null","content":"MaybeTooltip.Null \nNull \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html","title":"Prop","content":"Prop \n\n\u2022 active_cell (record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027) - The row and column indices and IDs of the currently active cell.\n\u0060row_id\u0060 is only returned if the data rows have an \u0060id\u0060 key.\n\n\n\u2022 columns (list with values of type: record with the fields: \u0027clearable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027deletable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027editable: boolean (optional)\u0027, \u0027filter_options: record with the field: \u0027case: value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027 (optional)\u0027 (optional)\u0027, \u0027hideable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027renamable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027selectable: value equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean (optional)\u0027, \u0027format: record with the fields: \u0027locale: record with the fields: \u0027symbol: list with values of type: string (optional)\u0027, \u0027decimal: string (optional)\u0027, \u0027group: string (optional)\u0027, \u0027grouping: list with values of type: number (optional)\u0027, \u0027numerals: list with values of type: string (optional)\u0027, \u0027percent: string (optional)\u0027, \u0027separate_4digits: boolean (optional)\u0027 (optional)\u0027, \u0027nully: boolean | number | string | record | list (optional)\u0027, \u0027prefix: number (optional)\u0027, \u0027specifier: string (optional)\u0027 (optional)\u0027, \u0027id: string (required)\u0027, \u0027name: string | list with values of type: string (required)\u0027, \u0027presentation: value equal to: \u0027input\u0027, \u0027dropdown\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027on_change: record with the fields: \u0027action: value equal to: \u0027coerce\u0027, \u0027none\u0027, \u0027validate\u0027 (optional)\u0027, \u0027failure: value equal to: \u0027accept\u0027, \u0027default\u0027, \u0027reject\u0027 (optional)\u0027 (optional)\u0027, \u0027sort_as_null: list with values of type: string | number | boolean (optional)\u0027, \u0027validation: record with the fields: \u0027allow_null: boolean (optional)\u0027, \u0027default: boolean | number | string | record | list (optional)\u0027, \u0027allow_YY: boolean (optional)\u0027 (optional)\u0027, \u0027type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027) - Columns describes various aspects about each individual column.\n\u0060name\u0060 and \u0060id\u0060 are the only required parameters.\n\n\n\u2022 include_headers_on_copy_paste (boolean; default false) - If true, headers are included when copying from the table to different\ntabs and elsewhere. Note that headers are ignored when copying from the table onto itself and\nbetween two tables within the same tab.\n\n\n\u2022 locale_format (record with the fields: \u0027symbol: list with values of type: string (optional)\u0027, \u0027decimal: string (optional)\u0027, \u0027group: string (optional)\u0027, \u0027grouping: list with values of type: number (optional)\u0027, \u0027numerals: list with values of type: string (optional)\u0027, \u0027percent: string (optional)\u0027, \u0027separate_4digits: boolean (optional)\u0027) - The localization specific formatting information applied to all columns in the table.\nThis prop is derived from the [d3.formatLocale](https://github.com/d3/d3-format#formatLocale) data structure specification.\nWhen left unspecified, each individual nested prop will default to a pre-determined value.\n\n\n\u2022 markdown_options (record with the fields: \u0027link_target: string | value equal to: \u0027_blank\u0027, \u0027_parent\u0027, \u0027_self\u0027, \u0027_top\u0027 (optional)\u0027, \u0027html: boolean (optional)\u0027; default {\n    link_target: \u0027_blank\u0027,\n    html: false\n}) - The \u0060markdown_options\u0060 property allows customization of the markdown cells behavior.\n\n\n\u2022 css (list with values of type: record with the fields: \u0027selector: string (required)\u0027, \u0027rule: string (required)\u0027; default []) - The \u0060css\u0060 property is a way to embed CSS selectors and rules\nonto the page.\nWe recommend starting with the \u0060style_*\u0060 properties\nbefore using this \u0060css\u0060 property.\nExample:\n[\n    {\u0022selector\u0022: \u0022.dash-spreadsheet\u0022, \u0022rule\u0022: \u0027font-family: \u0022monospace\u0022\u0027}\n]\n\n\n\u2022 data (list with values of type: record) - The contents of the table.\nThe keys of each item in data should match the column IDs.\nEach item can also have an \u0027id\u0027 key, whose value is its row ID. If there\nis a column with ID=\u0027id\u0027 this will display the row ID, otherwise it is\njust used to reference the row for selections, filtering, etc.\nExample:\n[\n     {\u0027column-1\u0027: 4.5, \u0027column-2\u0027: \u0027montreal\u0027, \u0027column-3\u0027: \u0027canada\u0027},\n     {\u0027column-1\u0027: 8, \u0027column-2\u0027: \u0027boston\u0027, \u0027column-3\u0027: \u0027america\u0027}\n]\n\n\n\u2022 data_previous (list with values of type: record) - The previous state of \u0060data\u0060. \u0060data_previous\u0060\nhas the same structure as \u0060data\u0060 and it will be updated\nwhenever \u0060data\u0060 changes, either through a callback or\nby editing the table.\nThis is a read-only property: setting this property will not\nhave any impact on the table.\n\n\n\u2022 data_timestamp (number) - The unix timestamp when the data was last edited.\nUse this property with other timestamp properties\n(such as \u0060n_clicks_timestamp\u0060 in \u0060dash_html_components\u0060)\nto determine which property has changed within a callback.\n\n\n\u2022 editable (boolean; default false) - If True, then the data in all of the cells is editable.\nWhen \u0060editable\u0060 is True, particular columns can be made\nuneditable by setting \u0060editable\u0060 to \u0060False\u0060 inside the \u0060columns\u0060\nproperty.\nIf False, then the data in all of the cells is uneditable.\nWhen \u0060editable\u0060 is False, particular columns can be made\neditable by setting \u0060editable\u0060 to \u0060True\u0060 inside the \u0060columns\u0060\nproperty.\n\n\n\u2022 end_cell (record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027) - When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n\u0060end_cell\u0060 represents the row / column coordinates and IDs of the cell\nin one of the corners of the region.\n\u0060start_cell\u0060 represents the coordinates of the other corner.\n\n\n\u2022 export_columns (value equal to: \u0027all\u0027, \u0027visible\u0027; default visible) - Denotes the columns that will be used in the export data file.\nIf \u0060all\u0060, all columns will be used (visible \u002B hidden). If \u0060visible\u0060,\nonly the visible columns will be used. Defaults to \u0060visible\u0060.\n\n\n\u2022 export_format (value equal to: \u0027csv\u0027, \u0027xlsx\u0027, \u0027none\u0027; default none) - Denotes the type of the export data file,\nDefaults to \u0060\u0027none\u0027\u0060\n\n\n\u2022 export_headers (value equal to: \u0027none\u0027, \u0027ids\u0027, \u0027names\u0027, \u0027display\u0027) - Denotes the format of the headers in the export data file.\nIf \u0060\u0027none\u0027\u0060, there will be no header. If \u0060\u0027display\u0027\u0060, then the header\nof the data file will be be how it is currently displayed. Note that\n\u0060\u0027display\u0027\u0060 is only supported for \u0060\u0027xlsx\u0027\u0060 export_format and will behave\nlike \u0060\u0027names\u0027\u0060 for \u0060\u0027csv\u0027\u0060 export format. If \u0060\u0027ids\u0027\u0060 or \u0060\u0027names\u0027\u0060,\nthen the headers of data file will be the column id or the column\nnames, respectively\n\n\n\u2022 fill_width (boolean; default true) - \u0060fill_width\u0060 toggles between a set of CSS for two common behaviors:\nTrue: The table container\u0027s width will grow to fill the available space;\nFalse: The table container\u0027s width will equal the width of its content.\n\n\n\u2022 hidden_columns (list with values of type: string) - List of columns ids of the columns that are currently hidden.\nSee the associated nested prop \u0060columns.hideable\u0060.\n\n\n\u2022 is_focused (boolean) - If True, then the \u0060active_cell\u0060 is in a focused state.\n\n\n\u2022 merge_duplicate_headers (boolean) - If True, then column headers that have neighbors with duplicate names\nwill be merged into a single cell.\nThis will be applied for single column headers and multi-column\nheaders.\n\n\n\u2022 fixed_columns (record with the fields: \u0027data: value equal to: \u00270\u0027 (optional)\u0027, \u0027headers: value equal to: \u0027false\u0027 (optional)\u0027 | record with the fields: \u0027data: number (optional)\u0027, \u0027headers: value equal to: \u0027true\u0027 (required)\u0027; default {\n    headers: false,\n    data: 0\n}) - \u0060fixed_columns\u0060 will \u0022fix\u0022 the set of columns so that\nthey remain visible when scrolling horizontally across\nthe unfixed columns. \u0060fixed_columns\u0060 fixes columns\nfrom left-to-right.\nIf \u0060headers\u0060 is False, no columns are fixed.\nIf \u0060headers\u0060 is True, all operation columns (see \u0060row_deletable\u0060 and \u0060row_selectable\u0060)\nare fixed. Additional data columns can be fixed by\nassigning a number to \u0060data\u0060.\nNote that fixing columns introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.\n\n\n\u2022 fixed_rows (record with the fields: \u0027data: value equal to: \u00270\u0027 (optional)\u0027, \u0027headers: value equal to: \u0027false\u0027 (optional)\u0027 | record with the fields: \u0027data: number (optional)\u0027, \u0027headers: value equal to: \u0027true\u0027 (required)\u0027; default {\n    headers: false,\n    data: 0\n}) - \u0060fixed_rows\u0060 will \u0022fix\u0022 the set of rows so that\nthey remain visible when scrolling vertically down\nthe table. \u0060fixed_rows\u0060 fixes rows\nfrom top-to-bottom, starting from the headers.\nIf \u0060headers\u0060 is False, no rows are fixed.\nIf \u0060headers\u0060 is True, all header and filter rows (see \u0060filter_action\u0060) are\nfixed. Additional data rows can be fixed by assigning\na number to \u0060data\u0060.  Note that fixing rows introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.\n\n\n\u2022 column_selectable (value equal to: \u0027single\u0027, \u0027multi\u0027, \u0027false\u0027; default false) - If \u0060single\u0060, then the user can select a single column or group\nof merged columns via the radio button that will appear in the\nheader rows.\nIf \u0060multi\u0060, then the user can select multiple columns or groups\nof merged columns via the checkbox that will appear in the header\nrows.\nIf false, then the user will not be able to select columns and no\ninput will appear in the header rows.\nWhen a column is selected, its id will be contained in \u0060selected_columns\u0060\nand \u0060derived_viewport_selected_columns\u0060.\n\n\n\u2022 row_deletable (boolean) - If True, then a \u0060x\u0060 will appear next to each \u0060row\u0060\nand the user can delete the row.\n\n\n\u2022 cell_selectable (boolean; default true) - If True (default), then it is possible to click and navigate\ntable cells.\n\n\n\u2022 row_selectable (value equal to: \u0027single\u0027, \u0027multi\u0027, \u0027false\u0027; default false) - If \u0060single\u0060, then the user can select a single row\nvia a radio button that will appear next to each row.\nIf \u0060multi\u0060, then the user can select multiple rows\nvia a checkbox that will appear next to each row.\nIf false, then the user will not be able to select rows\nand no additional UI elements will appear.\nWhen a row is selected, its index will be contained\nin \u0060selected_rows\u0060.\n\n\n\u2022 selected_cells (list with values of type: record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027; default []) - \u0060selected_cells\u0060 represents the set of cells that are selected,\nas an array of objects, each item similar to \u0060active_cell\u0060.\nMultiple cells can be selected by holding down shift and\nclicking on a different cell or holding down shift and navigating\nwith the arrow keys.\n\n\n\u2022 selected_rows (list with values of type: number; default []) - \u0060selected_rows\u0060 contains the indices of rows that\nare selected via the UI elements that appear when\n\u0060row_selectable\u0060 is \u0060\u0027single\u0027\u0060 or \u0060\u0027multi\u0027\u0060.\n\n\n\u2022 selected_columns (list with values of type: string; default []) - \u0060selected_columns\u0060 contains the ids of columns that\nare selected via the UI elements that appear when\n\u0060column_selectable\u0060 is \u0060\u0027single\u0027 or \u0027multi\u0027\u0060.\n\n\n\u2022 selected_row_ids (list with values of type: string | number; default []) - \u0060selected_row_ids\u0060 contains the ids of rows that\nare selected via the UI elements that appear when\n\u0060row_selectable\u0060 is \u0060\u0027single\u0027\u0060 or \u0060\u0027multi\u0027\u0060.\n\n\n\u2022 start_cell (record with the fields: \u0027row: number (optional)\u0027, \u0027column: number (optional)\u0027, \u0027row_id: string | number (optional)\u0027, \u0027column_id: string (optional)\u0027) - When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n\u0060start_cell\u0060 represents the [row, column] coordinates of the cell\nin one of the corners of the region.\n\u0060end_cell\u0060 represents the coordinates of the other corner.\n\n\n\u2022 style_as_list_view (boolean; default false) - If True, then the table will be styled like a list view\nand not have borders between the columns.\n\n\n\u2022 page_action (value equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027; default native) - \u0060page_action\u0060 refers to a mode of the table where\nnot all of the rows are displayed at once: only a subset\nare displayed (a \u0022page\u0022) and the next subset of rows\ncan viewed by clicking \u0022Next\u0022 or \u0022Previous\u0022 buttons\nat the bottom of the page.\nPagination is used to improve performance: instead of\nrendering all of the rows at once (which can be expensive),\nwe only display a subset of them.\nWith pagination, we can either page through data that exists\nin the table (e.g. page through \u006010,000\u0060 rows in \u0060data\u0060 \u0060100\u0060 rows at a time)\nor we can update the data on-the-fly with callbacks\nwhen the user clicks on the \u0022Previous\u0022 or \u0022Next\u0022 buttons.\nThese modes can be toggled with this \u0060page_action\u0060 parameter:\n\u0060\u0027native\u0027\u0060: all data is passed to the table up-front, paging logic is\nhandled by the table;\n\u0060\u0027custom\u0027\u0060: data is passed to the table one page at a time, paging logic\nis handled via callbacks;\n\u0060\u0027none\u0027\u0060: disables paging, render all of the data at once.\n\n\n\u2022 page_current (number; default 0) - \u0060page_current\u0060 represents which page the user is on.\nUse this property to index through data in your callbacks with\nbackend paging.\n\n\n\u2022 page_count (number) - \u0060page_count\u0060 represents the number of the pages in the\npaginated table. This is really only useful when performing\nbackend pagination, since the front end is able to use the\nfull size of the table to calculate the number of pages.\n\n\n\u2022 page_size (number; default 250) - \u0060page_size\u0060 represents the number of rows that will be\ndisplayed on a particular page when \u0060page_action\u0060 is \u0060\u0027custom\u0027\u0060 or \u0060\u0027native\u0027\u0060\n\n\n\u2022 dropdown (dict with values of type: record with the fields: \u0027clearable: boolean (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027; default {}) - \u0060dropdown\u0060 specifies dropdown options for different columns.\nEach entry refers to the column ID.\nThe \u0060clearable\u0060 property defines whether the value can be deleted.\nThe \u0060options\u0060 property refers to the \u0060options\u0060 of the dropdown.\n\n\n\u2022 dropdown_conditional (list with values of type: record with the fields: \u0027clearable: boolean (optional)\u0027, \u0027if: record with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027 (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027; default []) - \u0060dropdown_conditional\u0060 specifies dropdown options in various columns and cells.\nThis property allows you to specify different dropdowns\ndepending on certain conditions. For example, you may\nrender different \u0022city\u0022 dropdowns in a row depending on the\ncurrent value in the \u0022state\u0022 column.\n\n\n\u2022 dropdown_data (list with values of type: dict with values of type: record with the fields: \u0027clearable: boolean (optional)\u0027, \u0027options: list with values of type: record with the fields: \u0027label: string (required)\u0027, \u0027value: number | string | boolean (required)\u0027 (required)\u0027; default []) - \u0060dropdown_data\u0060 specifies dropdown options on a row-by-row, column-by-column basis.\nEach item in the array corresponds to the corresponding dropdowns for the \u0060data\u0060 item\nat the same index. Each entry in the item refers to the Column ID.\n\n\n\u2022 tooltip (dict with values of type: string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027use_with: value equal to: \u0027both\u0027, \u0027data\u0027, \u0027header\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default {}) - \u0060tooltip\u0060 is the column based tooltip configuration applied to all rows. The key is the column\n id and the value is a tooltip configuration.\nExample: {i: {\u0027value\u0027: i, \u0027use_with: \u0027both\u0027} for i in df.columns}\n\n\n\u2022 tooltip_conditional (list with values of type: record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027if: record with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027 (required)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default []) - \u0060tooltip_conditional\u0060 represents the tooltip shown\nfor different columns and cells.\nThis property allows you to specify different tooltips\ndepending on certain conditions. For example, you may have\ndifferent tooltips in the same column based on the value\nof a certain data property.\nPriority is from first to last defined conditional tooltip\nin the list. Higher priority (more specific) conditional\ntooltips should be put at the beginning of the list.\n\n\n\u2022 tooltip_data (list with values of type: dict with values of type: string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default []) - \u0060tooltip_data\u0060 represents the tooltip shown\nfor different columns and cells.\nA list of dicts for which each key is\na column id and the value is a tooltip configuration.\n\n\n\u2022 tooltip_header (dict with values of type: string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027 | list with values of type: value equal to: \u0027null\u0027 | string | record with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027; default {}) - \u0060tooltip_header\u0060 represents the tooltip shown\nfor each header column and optionally each header row.\nExample to show long column names in a tooltip: {i: i for i in df.columns}.\nExample to show different column names in a tooltip: {\u0027Rep\u0027: \u0027Republican\u0027, \u0027Dem\u0027: \u0027Democrat\u0027}.\nIf the table has multiple rows of headers, then use a list as the value of the\n\u0060tooltip_header\u0060 items.\n\n\n\u2022 tooltip_delay (number; default 350) - \u0060tooltip_delay\u0060 represents the table-wide delay in milliseconds before\nthe tooltip is shown when hovering a cell. If set to \u0060None\u0060, the tooltip\nwill be shown immediately.\nDefaults to 350.\n\n\n\u2022 tooltip_duration (number; default 2000) - \u0060tooltip_duration\u0060 represents the table-wide duration in milliseconds\nduring which the tooltip will be displayed when hovering a cell. If\nset to \u0060None\u0060, the tooltip will not disappear.\nDefaults to 2000.\n\n\n\u2022 filter_query (string; default ) - If \u0060filter_action\u0060 is enabled, then the current filtering\nstring is represented in this \u0060filter_query\u0060\nproperty.\n\n\n\u2022 filter_action (value equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027 | record with the fields: \u0027type: value equal to: \u0027custom\u0027, \u0027native\u0027 (required)\u0027, \u0027operator: value equal to: \u0027and\u0027, \u0027or\u0027 (optional)\u0027; default none) - The \u0060filter_action\u0060 property controls the behavior of the \u0060filtering\u0060 UI.\nIf \u0060\u0027none\u0027\u0060, then the filtering UI is not displayed.\nIf \u0060\u0027native\u0027\u0060, then the filtering UI is displayed and the filtering\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the \u0060data\u0060 property.\nIf \u0060\u0027custom\u0027\u0060, then the filtering UI is displayed but it is the\nresponsibility of the developer to program the filtering\nthrough a callback (where \u0060filter_query\u0060 or \u0060derived_filter_query_structure\u0060 would be the input\nand \u0060data\u0060 would be the output).\n\n\n\u2022 filter_options (record with the field: \u0027case: value equal to: \u0027sensitive\u0027, \u0027insensitive\u0027 (optional)\u0027; default {}) - There are two \u0060filter_options\u0060 props in the table.\nThis is the table-level filter_options prop and there is\nalso the column-level \u0060filter_options\u0060 prop.\nThese props determine whether the applicable filter relational\noperators will default to \u0060sensitive\u0060 or \u0060insensitive\u0060 comparison.\nIf the column-level \u0060filter_options\u0060 prop is set it overrides\nthe table-level \u0060filter_options\u0060 prop for that column.\n\n\n\u2022 sort_action (value equal to: \u0027custom\u0027, \u0027native\u0027, \u0027none\u0027; default none) - The \u0060sort_action\u0060 property enables data to be\nsorted on a per-column basis.\nIf \u0060\u0027none\u0027\u0060, then the sorting UI is not displayed.\nIf \u0060\u0027native\u0027\u0060, then the sorting UI is displayed and the sorting\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the \u0060data\u0060 property.\nIf \u0060\u0027custom\u0027\u0060, the the sorting UI is displayed but it is the\nresponsibility of the developer to program the sorting\nthrough a callback (where \u0060sort_by\u0060 would be the input and \u0060data\u0060\nwould be the output).\nClicking on the sort arrows will update the\n\u0060sort_by\u0060 property.\n\n\n\u2022 sort_mode (value equal to: \u0027single\u0027, \u0027multi\u0027; default single) - Sorting can be performed across multiple columns\n(e.g. sort by country, sort within each country,\n sort by year) or by a single column.\nNOTE - With multi-column sort, it\u0027s currently\nnot possible to determine the order in which\nthe columns were sorted through the UI.\nSee [https://github.com/plotly/dash-table/issues/170](https://github.com/plotly/dash-table/issues/170)\n\n\n\u2022 sort_by (list with values of type: record with the fields: \u0027column_id: string (required)\u0027, \u0027direction: value equal to: \u0027asc\u0027, \u0027desc\u0027 (required)\u0027; default []) - \u0060sort_by\u0060 describes the current state\nof the sorting UI.\nThat is, if the user clicked on the sort arrow\nof a column, then this property will be updated\nwith the column ID and the direction\n(\u0060asc\u0060 or \u0060desc\u0060) of the sort.\nFor multi-column sorting, this will be a list of\nsorting parameters, in the order in which they were\nclicked.\n\n\n\u2022 sort_as_null (list with values of type: string | number | boolean; default []) - An array of string, number and boolean values that are treated as \u0060None\u0060\n(i.e. ignored and always displayed last) when sorting.\nThis value will be used by columns without \u0060sort_as_null\u0060.\nDefaults to \u0060[]\u0060.\n\n\n\u2022 style_table (record; default {}) - CSS styles to be applied to the outer \u0060table\u0060 container.\nThis is commonly used for setting properties like the\nwidth or the height of the table.\n\n\n\u2022 style_cell (record) - CSS styles to be applied to each individual cell of the table.\nThis includes the header cells, the \u0060data\u0060 cells, and the filter\ncells.\n\n\n\u2022 style_data (record) - CSS styles to be applied to each individual data cell.\nThat is, unlike \u0060style_cell\u0060, it excludes the header and filter cells.\n\n\n\u2022 style_filter (record) - CSS styles to be applied to the filter cells.\nNote that this may change in the future as we build out a\nmore complex filtering UI.\n\n\n\u2022 style_header (record) - CSS styles to be applied to each individual header cell.\nThat is, unlike \u0060style_cell\u0060, it excludes the \u0060data\u0060 and filter cells.\n\n\n\u2022 style_cell_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the cells.\nThis can be used to apply styles to cells on a per-column basis.\n\n\n\u2022 style_data_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027state: value equal to: \u0027active\u0027, \u0027selected\u0027 (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 | list with values of type: number (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the data cells.\nThis can be used to apply styles to data cells on a per-column basis.\n\n\n\u2022 style_filter_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the filter cells.\nThis can be used to apply styles to filter cells on a per-column basis.\n\n\n\u2022 style_header_conditional (list with values of type: record with the field: \u0027if: record with the fields: \u0027column_id: string | list with values of type: string (optional)\u0027, \u0027column_type: value equal to: \u0027any\u0027, \u0027numeric\u0027, \u0027text\u0027, \u0027datetime\u0027 (optional)\u0027, \u0027header_index: number | list with values of type: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027, \u0027column_editable: boolean (optional)\u0027 (optional)\u0027; default []) - Conditional CSS styles for the header cells.\nThis can be used to apply styles to header cells on a per-column basis.\n\n\n\u2022 virtualization (boolean; default false) - This property tells the table to use virtualization when rendering.\nAssumptions are that:\nthe width of the columns is fixed;\nthe height of the rows is always the same; and\nruntime styling changes will not affect width and height vs. first rendering\n\n\n\u2022 derived_filter_query_structure (record) - This property represents the current structure of\n\u0060filter_query\u0060 as a tree structure. Each node of the\nquery structure has:\ntype (string; required):\n  \u0027open-block\u0027,\n  \u0027logical-operator\u0027,\n  \u0027relational-operator\u0027,\n  \u0027unary-operator\u0027, or\n  \u0027expression\u0027;\nsubType (string; optional):\n  \u0027open-block\u0027: \u0027()\u0027,\n  \u0027logical-operator\u0027: \u0027\u0026\u0026\u0027, \u0027||\u0027,\n  \u0027relational-operator\u0027: \u0027=\u0027, \u0027\u003E=\u0027, \u0027\u003E\u0027, \u0027\u003C=\u0027, \u0027\u003C\u0027, \u0027!=\u0027, \u0027contains\u0027,\n  \u0027unary-operator\u0027: \u0027!\u0027, \u0027is bool\u0027, \u0027is even\u0027, \u0027is nil\u0027, \u0027is num\u0027, \u0027is object\u0027, \u0027is odd\u0027, \u0027is prime\u0027, \u0027is str\u0027,\n  \u0027expression\u0027: \u0027value\u0027, \u0027field\u0027;\nvalue (any):\n  \u0027expression, value\u0027: passed value,\n  \u0027expression, field\u0027: the field/prop name.\nblock (nested query structure; optional).\nleft (nested query structure; optional).\nright (nested query structure; optional).\nIf the query is invalid or empty, the \u0060derived_filter_query_structure\u0060 will\nbe \u0060None\u0060.\n\n\n\u2022 derived_viewport_data (list with values of type: record; default []) - This property represents the current state of \u0060data\u0060\non the current page. This property will be updated\non paging, sorting, and filtering.\n\n\n\u2022 derived_viewport_indices (list with values of type: number; default []) - \u0060derived_viewport_indices\u0060 indicates the order in which the original\nrows appear after being filtered, sorted, and/or paged.\n\u0060derived_viewport_indices\u0060 contains indices for the current page,\nwhile \u0060derived_virtual_indices\u0060 contains indices across all pages.\n\n\n\u2022 derived_viewport_row_ids (list with values of type: string | number; default []) - \u0060derived_viewport_row_ids\u0060 lists row IDs in the order they appear\nafter being filtered, sorted, and/or paged.\n\u0060derived_viewport_row_ids\u0060 contains IDs for the current page,\nwhile \u0060derived_virtual_row_ids\u0060 contains IDs across all pages.\n\n\n\u2022 derived_viewport_selected_columns (list with values of type: string) - \u0060derived_viewport_selected_columns\u0060 contains the ids of the\n\u0060selected_columns\u0060 that are not currently hidden.\n\n\n\u2022 derived_viewport_selected_rows (list with values of type: number; default []) - \u0060derived_viewport_selected_rows\u0060 represents the indices of the\n\u0060selected_rows\u0060 from the perspective of the \u0060derived_viewport_indices\u0060.\n\n\n\u2022 derived_viewport_selected_row_ids (list with values of type: string | number; default []) - \u0060derived_viewport_selected_row_ids\u0060 represents the IDs of the\n\u0060selected_rows\u0060 on the currently visible page.\n\n\n\u2022 derived_virtual_data (list with values of type: record; default []) - This property represents the visible state of \u0060data\u0060\nacross all pages after the front-end sorting and filtering\nas been applied.\n\n\n\u2022 derived_virtual_indices (list with values of type: number; default []) - \u0060derived_virtual_indices\u0060 indicates the order in which the original\nrows appear after being filtered and sorted.\n\u0060derived_viewport_indices\u0060 contains indices for the current page,\nwhile \u0060derived_virtual_indices\u0060 contains indices across all pages.\n\n\n\u2022 derived_virtual_row_ids (list with values of type: string | number; default []) - \u0060derived_virtual_row_ids\u0060 indicates the row IDs in the order in which\nthey appear after being filtered and sorted.\n\u0060derived_viewport_row_ids\u0060 contains IDs for the current page,\nwhile \u0060derived_virtual_row_ids\u0060 contains IDs across all pages.\n\n\n\u2022 derived_virtual_selected_rows (list with values of type: number; default []) - \u0060derived_virtual_selected_rows\u0060 represents the indices of the\n \u0060selected_rows\u0060 from the perspective of the \u0060derived_virtual_indices\u0060.\n\n\n\u2022 derived_virtual_selected_row_ids (list with values of type: string | number; default []) - \u0060derived_virtual_selected_row_ids\u0060 represents the IDs of the\n\u0060selected_rows\u0060 as they appear after filtering and sorting,\nacross all pages.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, any \u0060persisted_props\u0060 that the\nuser has changed while using the app will keep those changes, as long as\nthe new prop value also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060 and \u0060persisted_props\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027columns_name\u0027, \u0027data\u0027, \u0027filter_query\u0027, \u0027hidden_columns\u0027, \u0027selected_columns\u0027, \u0027selected_rows\u0027, \u0027sort_by\u0027; default [\n    \u0027columns_name\u0027,\n    \u0027filter_query\u0027,\n    \u0027hidden_columns\u0027,\n    \u0027selected_columns\u0027,\n    \u0027selected_rows\u0027,\n    \u0027sort_by\u0027\n]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.convert \nconvert \nProp.toPropName \ntoPropName \nProp.ActiveCell \nActiveCell \nProp.Columns \nColumns \nProp.IncludeHeadersOnCopyPaste \nIncludeHeadersOnCopyPaste \nProp.LocaleFormat \nLocaleFormat \nProp.MarkdownOptions \nMarkdownOptions \nProp.Css \nCss \nProp.Data \nData \nProp.DataPrevious \nDataPrevious \nProp.DataTimestamp \nDataTimestamp \nProp.Editable \nEditable \nProp.EndCell \nEndCell \nProp.ExportColumns \nExportColumns \nProp.ExportFormat \nExportFormat \nProp.ExportHeaders \nExportHeaders \nProp.FillWidth \nFillWidth \nProp.HiddenColumns \nHiddenColumns \nProp.IsFocused \nIsFocused \nProp.MergeDuplicateHeaders \nMergeDuplicateHeaders \nProp.FixedColumns \nFixedColumns \nProp.FixedRows \nFixedRows \nProp.ColumnSelectable \nColumnSelectable \nProp.RowDeletable \nRowDeletable \nProp.CellSelectable \nCellSelectable \nProp.RowSelectable \nRowSelectable \nProp.SelectedCells \nSelectedCells \nProp.SelectedRows \nSelectedRows \nProp.SelectedColumns \nSelectedColumns \nProp.SelectedRowIds \nSelectedRowIds \nProp.StartCell \nStartCell \nProp.StyleAsListView \nStyleAsListView \nProp.PageAction \nPageAction \nProp.PageCurrent \nPageCurrent \nProp.PageCount \nPageCount \nProp.PageSize \nPageSize \nProp.Dropdown \nDropdown \nProp.DropdownConditional \nDropdownConditional \nProp.DropdownData \nDropdownData \nProp.Tooltip \nTooltip \nProp.TooltipConditional \nTooltipConditional \nProp.TooltipData \nTooltipData \nProp.TooltipHeader \nTooltipHeader \nProp.TooltipDelay \nTooltipDelay \nProp.TooltipDuration \nTooltipDuration \nProp.FilterQuery \nFilterQuery \nProp.FilterAction \nFilterAction \nProp.FilterOptions \nFilterOptions \nProp.SortAction \nSortAction \nProp.SortMode \nSortMode \nProp.SortBy \nSortBy \nProp.SortAsNull \nSortAsNull \nProp.StyleTable \nStyleTable \nProp.StyleCell \nStyleCell \nProp.StyleData \nStyleData \nProp.StyleFilter \nStyleFilter \nProp.StyleHeader \nStyleHeader \nProp.StyleCellConditional \nStyleCellConditional \nProp.StyleDataConditional \nStyleDataConditional \nProp.StyleFilterConditional \nStyleFilterConditional \nProp.StyleHeaderConditional \nStyleHeaderConditional \nProp.Virtualization \nVirtualization \nProp.DerivedFilterQueryStructure \nDerivedFilterQueryStructure \nProp.DerivedViewportData \nDerivedViewportData \nProp.DerivedViewportIndices \nDerivedViewportIndices \nProp.DerivedViewportRowIds \nDerivedViewportRowIds \nProp.DerivedViewportSelectedColumns \nDerivedViewportSelectedColumns \nProp.DerivedViewportSelectedRows \nDerivedViewportSelectedRows \nProp.DerivedViewportSelectedRowIds \nDerivedViewportSelectedRowIds \nProp.DerivedVirtualData \nDerivedVirtualData \nProp.DerivedVirtualIndices \nDerivedVirtualIndices \nProp.DerivedVirtualRowIds \nDerivedVirtualRowIds \nProp.DerivedVirtualSelectedRows \nDerivedVirtualSelectedRows \nProp.DerivedVirtualSelectedRowIds \nDerivedVirtualSelectedRowIds \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#convert","title":"Prop.convert","content":"Prop.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#toPropName","title":"Prop.toPropName","content":"Prop.toPropName \ntoPropName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#ActiveCell","title":"Prop.ActiveCell","content":"Prop.ActiveCell \nActiveCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Columns","title":"Prop.Columns","content":"Prop.Columns \nColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#IncludeHeadersOnCopyPaste","title":"Prop.IncludeHeadersOnCopyPaste","content":"Prop.IncludeHeadersOnCopyPaste \nIncludeHeadersOnCopyPaste \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#LocaleFormat","title":"Prop.LocaleFormat","content":"Prop.LocaleFormat \nLocaleFormat \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#MarkdownOptions","title":"Prop.MarkdownOptions","content":"Prop.MarkdownOptions \nMarkdownOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Css","title":"Prop.Css","content":"Prop.Css \nCss \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Data","title":"Prop.Data","content":"Prop.Data \nData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DataPrevious","title":"Prop.DataPrevious","content":"Prop.DataPrevious \nDataPrevious \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DataTimestamp","title":"Prop.DataTimestamp","content":"Prop.DataTimestamp \nDataTimestamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Editable","title":"Prop.Editable","content":"Prop.Editable \nEditable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#EndCell","title":"Prop.EndCell","content":"Prop.EndCell \nEndCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#ExportColumns","title":"Prop.ExportColumns","content":"Prop.ExportColumns \nExportColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#ExportFormat","title":"Prop.ExportFormat","content":"Prop.ExportFormat \nExportFormat \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#ExportHeaders","title":"Prop.ExportHeaders","content":"Prop.ExportHeaders \nExportHeaders \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#FillWidth","title":"Prop.FillWidth","content":"Prop.FillWidth \nFillWidth \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#HiddenColumns","title":"Prop.HiddenColumns","content":"Prop.HiddenColumns \nHiddenColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#IsFocused","title":"Prop.IsFocused","content":"Prop.IsFocused \nIsFocused \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#MergeDuplicateHeaders","title":"Prop.MergeDuplicateHeaders","content":"Prop.MergeDuplicateHeaders \nMergeDuplicateHeaders \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#FixedColumns","title":"Prop.FixedColumns","content":"Prop.FixedColumns \nFixedColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#FixedRows","title":"Prop.FixedRows","content":"Prop.FixedRows \nFixedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#ColumnSelectable","title":"Prop.ColumnSelectable","content":"Prop.ColumnSelectable \nColumnSelectable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#RowDeletable","title":"Prop.RowDeletable","content":"Prop.RowDeletable \nRowDeletable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#CellSelectable","title":"Prop.CellSelectable","content":"Prop.CellSelectable \nCellSelectable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#RowSelectable","title":"Prop.RowSelectable","content":"Prop.RowSelectable \nRowSelectable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SelectedCells","title":"Prop.SelectedCells","content":"Prop.SelectedCells \nSelectedCells \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SelectedRows","title":"Prop.SelectedRows","content":"Prop.SelectedRows \nSelectedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SelectedColumns","title":"Prop.SelectedColumns","content":"Prop.SelectedColumns \nSelectedColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SelectedRowIds","title":"Prop.SelectedRowIds","content":"Prop.SelectedRowIds \nSelectedRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StartCell","title":"Prop.StartCell","content":"Prop.StartCell \nStartCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleAsListView","title":"Prop.StyleAsListView","content":"Prop.StyleAsListView \nStyleAsListView \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#PageAction","title":"Prop.PageAction","content":"Prop.PageAction \nPageAction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#PageCurrent","title":"Prop.PageCurrent","content":"Prop.PageCurrent \nPageCurrent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#PageCount","title":"Prop.PageCount","content":"Prop.PageCount \nPageCount \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#PageSize","title":"Prop.PageSize","content":"Prop.PageSize \nPageSize \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Dropdown","title":"Prop.Dropdown","content":"Prop.Dropdown \nDropdown \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DropdownConditional","title":"Prop.DropdownConditional","content":"Prop.DropdownConditional \nDropdownConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DropdownData","title":"Prop.DropdownData","content":"Prop.DropdownData \nDropdownData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Tooltip","title":"Prop.Tooltip","content":"Prop.Tooltip \nTooltip \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#TooltipConditional","title":"Prop.TooltipConditional","content":"Prop.TooltipConditional \nTooltipConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#TooltipData","title":"Prop.TooltipData","content":"Prop.TooltipData \nTooltipData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#TooltipHeader","title":"Prop.TooltipHeader","content":"Prop.TooltipHeader \nTooltipHeader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#TooltipDelay","title":"Prop.TooltipDelay","content":"Prop.TooltipDelay \nTooltipDelay \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#TooltipDuration","title":"Prop.TooltipDuration","content":"Prop.TooltipDuration \nTooltipDuration \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#FilterQuery","title":"Prop.FilterQuery","content":"Prop.FilterQuery \nFilterQuery \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#FilterAction","title":"Prop.FilterAction","content":"Prop.FilterAction \nFilterAction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#FilterOptions","title":"Prop.FilterOptions","content":"Prop.FilterOptions \nFilterOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SortAction","title":"Prop.SortAction","content":"Prop.SortAction \nSortAction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SortMode","title":"Prop.SortMode","content":"Prop.SortMode \nSortMode \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SortBy","title":"Prop.SortBy","content":"Prop.SortBy \nSortBy \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#SortAsNull","title":"Prop.SortAsNull","content":"Prop.SortAsNull \nSortAsNull \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleTable","title":"Prop.StyleTable","content":"Prop.StyleTable \nStyleTable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleCell","title":"Prop.StyleCell","content":"Prop.StyleCell \nStyleCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleData","title":"Prop.StyleData","content":"Prop.StyleData \nStyleData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleFilter","title":"Prop.StyleFilter","content":"Prop.StyleFilter \nStyleFilter \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleHeader","title":"Prop.StyleHeader","content":"Prop.StyleHeader \nStyleHeader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleCellConditional","title":"Prop.StyleCellConditional","content":"Prop.StyleCellConditional \nStyleCellConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleDataConditional","title":"Prop.StyleDataConditional","content":"Prop.StyleDataConditional \nStyleDataConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleFilterConditional","title":"Prop.StyleFilterConditional","content":"Prop.StyleFilterConditional \nStyleFilterConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#StyleHeaderConditional","title":"Prop.StyleHeaderConditional","content":"Prop.StyleHeaderConditional \nStyleHeaderConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Virtualization","title":"Prop.Virtualization","content":"Prop.Virtualization \nVirtualization \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedFilterQueryStructure","title":"Prop.DerivedFilterQueryStructure","content":"Prop.DerivedFilterQueryStructure \nDerivedFilterQueryStructure \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedViewportData","title":"Prop.DerivedViewportData","content":"Prop.DerivedViewportData \nDerivedViewportData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedViewportIndices","title":"Prop.DerivedViewportIndices","content":"Prop.DerivedViewportIndices \nDerivedViewportIndices \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedViewportRowIds","title":"Prop.DerivedViewportRowIds","content":"Prop.DerivedViewportRowIds \nDerivedViewportRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedViewportSelectedColumns","title":"Prop.DerivedViewportSelectedColumns","content":"Prop.DerivedViewportSelectedColumns \nDerivedViewportSelectedColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedViewportSelectedRows","title":"Prop.DerivedViewportSelectedRows","content":"Prop.DerivedViewportSelectedRows \nDerivedViewportSelectedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedViewportSelectedRowIds","title":"Prop.DerivedViewportSelectedRowIds","content":"Prop.DerivedViewportSelectedRowIds \nDerivedViewportSelectedRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedVirtualData","title":"Prop.DerivedVirtualData","content":"Prop.DerivedVirtualData \nDerivedVirtualData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedVirtualIndices","title":"Prop.DerivedVirtualIndices","content":"Prop.DerivedVirtualIndices \nDerivedVirtualIndices \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedVirtualRowIds","title":"Prop.DerivedVirtualRowIds","content":"Prop.DerivedVirtualRowIds \nDerivedVirtualRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedVirtualSelectedRows","title":"Prop.DerivedVirtualSelectedRows","content":"Prop.DerivedVirtualSelectedRows \nDerivedVirtualSelectedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#DerivedVirtualSelectedRowIds","title":"Prop.DerivedVirtualSelectedRowIds","content":"Prop.DerivedVirtualSelectedRowIds \nDerivedVirtualSelectedRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html","title":"PropName","content":"PropName \n \nPropName.toString \ntoString \nPropName.ActiveCell \nActiveCell \nPropName.Columns \nColumns \nPropName.IncludeHeadersOnCopyPaste \nIncludeHeadersOnCopyPaste \nPropName.LocaleFormat \nLocaleFormat \nPropName.MarkdownOptions \nMarkdownOptions \nPropName.Css \nCss \nPropName.Data \nData \nPropName.DataPrevious \nDataPrevious \nPropName.DataTimestamp \nDataTimestamp \nPropName.Editable \nEditable \nPropName.EndCell \nEndCell \nPropName.ExportColumns \nExportColumns \nPropName.ExportFormat \nExportFormat \nPropName.ExportHeaders \nExportHeaders \nPropName.FillWidth \nFillWidth \nPropName.HiddenColumns \nHiddenColumns \nPropName.IsFocused \nIsFocused \nPropName.MergeDuplicateHeaders \nMergeDuplicateHeaders \nPropName.FixedColumns \nFixedColumns \nPropName.FixedRows \nFixedRows \nPropName.ColumnSelectable \nColumnSelectable \nPropName.RowDeletable \nRowDeletable \nPropName.CellSelectable \nCellSelectable \nPropName.RowSelectable \nRowSelectable \nPropName.SelectedCells \nSelectedCells \nPropName.SelectedRows \nSelectedRows \nPropName.SelectedColumns \nSelectedColumns \nPropName.SelectedRowIds \nSelectedRowIds \nPropName.StartCell \nStartCell \nPropName.StyleAsListView \nStyleAsListView \nPropName.PageAction \nPageAction \nPropName.PageCurrent \nPageCurrent \nPropName.PageCount \nPageCount \nPropName.PageSize \nPageSize \nPropName.Dropdown \nDropdown \nPropName.DropdownConditional \nDropdownConditional \nPropName.DropdownData \nDropdownData \nPropName.Tooltip \nTooltip \nPropName.TooltipConditional \nTooltipConditional \nPropName.TooltipData \nTooltipData \nPropName.TooltipHeader \nTooltipHeader \nPropName.TooltipDelay \nTooltipDelay \nPropName.TooltipDuration \nTooltipDuration \nPropName.FilterQuery \nFilterQuery \nPropName.FilterAction \nFilterAction \nPropName.FilterOptions \nFilterOptions \nPropName.SortAction \nSortAction \nPropName.SortMode \nSortMode \nPropName.SortBy \nSortBy \nPropName.SortAsNull \nSortAsNull \nPropName.StyleTable \nStyleTable \nPropName.StyleCell \nStyleCell \nPropName.StyleData \nStyleData \nPropName.StyleFilter \nStyleFilter \nPropName.StyleHeader \nStyleHeader \nPropName.StyleCellConditional \nStyleCellConditional \nPropName.StyleDataConditional \nStyleDataConditional \nPropName.StyleFilterConditional \nStyleFilterConditional \nPropName.StyleHeaderConditional \nStyleHeaderConditional \nPropName.Virtualization \nVirtualization \nPropName.DerivedFilterQueryStructure \nDerivedFilterQueryStructure \nPropName.DerivedViewportData \nDerivedViewportData \nPropName.DerivedViewportIndices \nDerivedViewportIndices \nPropName.DerivedViewportRowIds \nDerivedViewportRowIds \nPropName.DerivedViewportSelectedColumns \nDerivedViewportSelectedColumns \nPropName.DerivedViewportSelectedRows \nDerivedViewportSelectedRows \nPropName.DerivedViewportSelectedRowIds \nDerivedViewportSelectedRowIds \nPropName.DerivedVirtualData \nDerivedVirtualData \nPropName.DerivedVirtualIndices \nDerivedVirtualIndices \nPropName.DerivedVirtualRowIds \nDerivedVirtualRowIds \nPropName.DerivedVirtualSelectedRows \nDerivedVirtualSelectedRows \nPropName.DerivedVirtualSelectedRowIds \nDerivedVirtualSelectedRowIds \nPropName.LoadingState \nLoadingState \nPropName.Persistence \nPersistence \nPropName.PersistedProps \nPersistedProps \nPropName.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#toString","title":"PropName.toString","content":"PropName.toString \ntoString \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#ActiveCell","title":"PropName.ActiveCell","content":"PropName.ActiveCell \nActiveCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Columns","title":"PropName.Columns","content":"PropName.Columns \nColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#IncludeHeadersOnCopyPaste","title":"PropName.IncludeHeadersOnCopyPaste","content":"PropName.IncludeHeadersOnCopyPaste \nIncludeHeadersOnCopyPaste \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#LocaleFormat","title":"PropName.LocaleFormat","content":"PropName.LocaleFormat \nLocaleFormat \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#MarkdownOptions","title":"PropName.MarkdownOptions","content":"PropName.MarkdownOptions \nMarkdownOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Css","title":"PropName.Css","content":"PropName.Css \nCss \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Data","title":"PropName.Data","content":"PropName.Data \nData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DataPrevious","title":"PropName.DataPrevious","content":"PropName.DataPrevious \nDataPrevious \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DataTimestamp","title":"PropName.DataTimestamp","content":"PropName.DataTimestamp \nDataTimestamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Editable","title":"PropName.Editable","content":"PropName.Editable \nEditable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#EndCell","title":"PropName.EndCell","content":"PropName.EndCell \nEndCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#ExportColumns","title":"PropName.ExportColumns","content":"PropName.ExportColumns \nExportColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#ExportFormat","title":"PropName.ExportFormat","content":"PropName.ExportFormat \nExportFormat \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#ExportHeaders","title":"PropName.ExportHeaders","content":"PropName.ExportHeaders \nExportHeaders \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#FillWidth","title":"PropName.FillWidth","content":"PropName.FillWidth \nFillWidth \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#HiddenColumns","title":"PropName.HiddenColumns","content":"PropName.HiddenColumns \nHiddenColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#IsFocused","title":"PropName.IsFocused","content":"PropName.IsFocused \nIsFocused \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#MergeDuplicateHeaders","title":"PropName.MergeDuplicateHeaders","content":"PropName.MergeDuplicateHeaders \nMergeDuplicateHeaders \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#FixedColumns","title":"PropName.FixedColumns","content":"PropName.FixedColumns \nFixedColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#FixedRows","title":"PropName.FixedRows","content":"PropName.FixedRows \nFixedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#ColumnSelectable","title":"PropName.ColumnSelectable","content":"PropName.ColumnSelectable \nColumnSelectable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#RowDeletable","title":"PropName.RowDeletable","content":"PropName.RowDeletable \nRowDeletable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#CellSelectable","title":"PropName.CellSelectable","content":"PropName.CellSelectable \nCellSelectable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#RowSelectable","title":"PropName.RowSelectable","content":"PropName.RowSelectable \nRowSelectable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SelectedCells","title":"PropName.SelectedCells","content":"PropName.SelectedCells \nSelectedCells \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SelectedRows","title":"PropName.SelectedRows","content":"PropName.SelectedRows \nSelectedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SelectedColumns","title":"PropName.SelectedColumns","content":"PropName.SelectedColumns \nSelectedColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SelectedRowIds","title":"PropName.SelectedRowIds","content":"PropName.SelectedRowIds \nSelectedRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StartCell","title":"PropName.StartCell","content":"PropName.StartCell \nStartCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleAsListView","title":"PropName.StyleAsListView","content":"PropName.StyleAsListView \nStyleAsListView \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#PageAction","title":"PropName.PageAction","content":"PropName.PageAction \nPageAction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#PageCurrent","title":"PropName.PageCurrent","content":"PropName.PageCurrent \nPageCurrent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#PageCount","title":"PropName.PageCount","content":"PropName.PageCount \nPageCount \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#PageSize","title":"PropName.PageSize","content":"PropName.PageSize \nPageSize \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Dropdown","title":"PropName.Dropdown","content":"PropName.Dropdown \nDropdown \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DropdownConditional","title":"PropName.DropdownConditional","content":"PropName.DropdownConditional \nDropdownConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DropdownData","title":"PropName.DropdownData","content":"PropName.DropdownData \nDropdownData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Tooltip","title":"PropName.Tooltip","content":"PropName.Tooltip \nTooltip \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#TooltipConditional","title":"PropName.TooltipConditional","content":"PropName.TooltipConditional \nTooltipConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#TooltipData","title":"PropName.TooltipData","content":"PropName.TooltipData \nTooltipData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#TooltipHeader","title":"PropName.TooltipHeader","content":"PropName.TooltipHeader \nTooltipHeader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#TooltipDelay","title":"PropName.TooltipDelay","content":"PropName.TooltipDelay \nTooltipDelay \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#TooltipDuration","title":"PropName.TooltipDuration","content":"PropName.TooltipDuration \nTooltipDuration \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#FilterQuery","title":"PropName.FilterQuery","content":"PropName.FilterQuery \nFilterQuery \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#FilterAction","title":"PropName.FilterAction","content":"PropName.FilterAction \nFilterAction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#FilterOptions","title":"PropName.FilterOptions","content":"PropName.FilterOptions \nFilterOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SortAction","title":"PropName.SortAction","content":"PropName.SortAction \nSortAction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SortMode","title":"PropName.SortMode","content":"PropName.SortMode \nSortMode \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SortBy","title":"PropName.SortBy","content":"PropName.SortBy \nSortBy \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#SortAsNull","title":"PropName.SortAsNull","content":"PropName.SortAsNull \nSortAsNull \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleTable","title":"PropName.StyleTable","content":"PropName.StyleTable \nStyleTable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleCell","title":"PropName.StyleCell","content":"PropName.StyleCell \nStyleCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleData","title":"PropName.StyleData","content":"PropName.StyleData \nStyleData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleFilter","title":"PropName.StyleFilter","content":"PropName.StyleFilter \nStyleFilter \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleHeader","title":"PropName.StyleHeader","content":"PropName.StyleHeader \nStyleHeader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleCellConditional","title":"PropName.StyleCellConditional","content":"PropName.StyleCellConditional \nStyleCellConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleDataConditional","title":"PropName.StyleDataConditional","content":"PropName.StyleDataConditional \nStyleDataConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleFilterConditional","title":"PropName.StyleFilterConditional","content":"PropName.StyleFilterConditional \nStyleFilterConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#StyleHeaderConditional","title":"PropName.StyleHeaderConditional","content":"PropName.StyleHeaderConditional \nStyleHeaderConditional \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Virtualization","title":"PropName.Virtualization","content":"PropName.Virtualization \nVirtualization \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedFilterQueryStructure","title":"PropName.DerivedFilterQueryStructure","content":"PropName.DerivedFilterQueryStructure \nDerivedFilterQueryStructure \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedViewportData","title":"PropName.DerivedViewportData","content":"PropName.DerivedViewportData \nDerivedViewportData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedViewportIndices","title":"PropName.DerivedViewportIndices","content":"PropName.DerivedViewportIndices \nDerivedViewportIndices \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedViewportRowIds","title":"PropName.DerivedViewportRowIds","content":"PropName.DerivedViewportRowIds \nDerivedViewportRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedViewportSelectedColumns","title":"PropName.DerivedViewportSelectedColumns","content":"PropName.DerivedViewportSelectedColumns \nDerivedViewportSelectedColumns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedViewportSelectedRows","title":"PropName.DerivedViewportSelectedRows","content":"PropName.DerivedViewportSelectedRows \nDerivedViewportSelectedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedViewportSelectedRowIds","title":"PropName.DerivedViewportSelectedRowIds","content":"PropName.DerivedViewportSelectedRowIds \nDerivedViewportSelectedRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedVirtualData","title":"PropName.DerivedVirtualData","content":"PropName.DerivedVirtualData \nDerivedVirtualData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedVirtualIndices","title":"PropName.DerivedVirtualIndices","content":"PropName.DerivedVirtualIndices \nDerivedVirtualIndices \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedVirtualRowIds","title":"PropName.DerivedVirtualRowIds","content":"PropName.DerivedVirtualRowIds \nDerivedVirtualRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedVirtualSelectedRows","title":"PropName.DerivedVirtualSelectedRows","content":"PropName.DerivedVirtualSelectedRows \nDerivedVirtualSelectedRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#DerivedVirtualSelectedRowIds","title":"PropName.DerivedVirtualSelectedRowIds","content":"PropName.DerivedVirtualSelectedRowIds \nDerivedVirtualSelectedRowIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#LoadingState","title":"PropName.LoadingState","content":"PropName.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#Persistence","title":"PropName.Persistence","content":"PropName.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#PersistedProps","title":"PropName.PersistedProps","content":"PropName.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-propname.html#PersistenceType","title":"PropName.PersistenceType","content":"PropName.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-renamablecolumn.html","title":"RenamableColumn","content":"RenamableColumn \n\nvalue equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean\n\n\nIf true, the user can rename the column by clicking on the \u0060rename\u0060\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf \u0060last\u0060, the \u0060rename\u0060 action button will only appear on the last header\nrow. If \u0060first\u0060 it will only appear on the first header row. These\nare respectively shortcut equivalents to \u0060[false, ..., false, true]\u0060 and\n\u0060[true, false, ..., false]\u0060.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the \u0060rename\u0060 action button in by\nsupplying an array of booleans.\nFor example, \u0060[true, false]\u0060 will display the \u0060rename\u0060 action button\non the first row, but not the second row.\nIf the \u0060rename\u0060 action button appears on a merged column, then clicking\non that button will rename *all* of the merged columns associated with it.\n \nRenamableColumn.convert \nconvert"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-renamablecolumn.html#convert","title":"RenamableColumn.convert","content":"RenamableColumn.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-select.html","title":"Select","content":"Select \n\nvalue equal to: \u0027single\u0027, \u0027multi\u0027, \u0027false\u0027\n \nSelect.convert \nconvert \nSelect.Single \nSingle \nSelect.Multi \nMulti \nSelect.False \nFalse"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-select.html#convert","title":"Select.convert","content":"Select.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-select.html#Single","title":"Select.Single","content":"Select.Single \nSingle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-select.html#Multi","title":"Select.Multi","content":"Select.Multi \nMulti \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-select.html#False","title":"Select.False","content":"Select.False \nFalse \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-selectrowby.html","title":"SelectRowBy","content":"SelectRowBy \n\nnumber | list with values of type: number | value equal to: \u0027odd\u0027, \u0027even\u0027\n \nSelectRowBy.convert \nconvert \nSelectRowBy.Index \nIndex \nSelectRowBy.Indices \nIndices \nSelectRowBy.Alternate \nAlternate"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-selectrowby.html#convert","title":"SelectRowBy.convert","content":"SelectRowBy.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-selectrowby.html#Index","title":"SelectRowBy.Index","content":"SelectRowBy.Index \nIndex \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-selectrowby.html#Indices","title":"SelectRowBy.Indices","content":"SelectRowBy.Indices \nIndices \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-selectrowby.html#Alternate","title":"SelectRowBy.Alternate","content":"SelectRowBy.Alternate \nAlternate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-selectablecolumn.html","title":"SelectableColumn","content":"SelectableColumn \n\nvalue equal to: \u0027first\u0027, \u0027last\u0027 | boolean | list with values of type: boolean\n\n\nIf true, the user can select the column by clicking on the checkbox or radio button\nin the column. If there are multiple header rows, true will display the input\non each row.\nIf \u0060last\u0060, the input will only appear on the last header row. If \u0060first\u0060 it will only\nappear on the first header row. These are respectively shortcut equivalents to\n\u0060[false, ..., false, true]\u0060 and \u0060[true, false, ..., false]\u0060.\nIf there are merged, multi-header columns then you can choose which column header\nrow to display the input in by supplying an array of booleans.\nFor example, \u0060[true, false]\u0060 will display the \u0060selectable\u0060 input on the first row,\nbut now on the second row.\nIf the \u0060selectable\u0060 input appears on a merged columns, then clicking on that input\nwill select *all* of the merged columns associated with it.\nThe table-level prop \u0060column_selectable\u0060 is used to determine the type of column\nselection to use.\n \nSelectableColumn.convert \nconvert"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-selectablecolumn.html#convert","title":"SelectableColumn.convert","content":"SelectableColumn.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortdirection.html","title":"SortDirection","content":"SortDirection \n\nvalue equal to: \u0027asc\u0027, \u0027desc\u0027\n \nSortDirection.convert \nconvert \nSortDirection.Asc \nAsc \nSortDirection.Desc \nDesc"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortdirection.html#convert","title":"SortDirection.convert","content":"SortDirection.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortdirection.html#Asc","title":"SortDirection.Asc","content":"SortDirection.Asc \nAsc \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortdirection.html#Desc","title":"SortDirection.Desc","content":"SortDirection.Desc \nDesc \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortmodetype.html","title":"SortModeType","content":"SortModeType \n\nvalue equal to: \u0027single\u0027, \u0027multi\u0027\n \nSortModeType.convert \nconvert \nSortModeType.Single \nSingle \nSortModeType.Multi \nMulti"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortmodetype.html#convert","title":"SortModeType.convert","content":"SortModeType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortmodetype.html#Single","title":"SortModeType.Single","content":"SortModeType.Single \nSingle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-sortmodetype.html#Multi","title":"SortModeType.Multi","content":"SortModeType.Multi \nMulti \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tablesortby.html","title":"TableSortBy","content":"TableSortBy \n\nrecord with the fields: \u0027column_id: string (required)\u0027, \u0027direction: value equal to: \u0027asc\u0027, \u0027desc\u0027 (required)\u0027\n \nTableSortBy.( .ctor ) \n( .ctor ) \nTableSortBy.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tablesortby.html#( .ctor )","title":"TableSortBy.( .ctor )","content":"TableSortBy.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tablesortby.html#init","title":"TableSortBy.init","content":"TableSortBy.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-togglablecolumn.html","title":"TogglableColumn","content":"TogglableColumn \n \nTogglableColumn.convert \nconvert \nTogglableColumn.Position \nPosition \nTogglableColumn.Enabled \nEnabled \nTogglableColumn.MergedMultiHeader \nMergedMultiHeader"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-togglablecolumn.html#convert","title":"TogglableColumn.convert","content":"TogglableColumn.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-togglablecolumn.html#Position","title":"TogglableColumn.Position","content":"TogglableColumn.Position \nPosition \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-togglablecolumn.html#Enabled","title":"TogglableColumn.Enabled","content":"TogglableColumn.Enabled \nEnabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-togglablecolumn.html#MergedMultiHeader","title":"TogglableColumn.MergedMultiHeader","content":"TogglableColumn.MergedMultiHeader \nMergedMultiHeader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-toggleposition.html","title":"TogglePosition","content":"TogglePosition \n\nvalue equal to: \u0027first\u0027, \u0027last\u0027\n \nTogglePosition.convert \nconvert \nTogglePosition.First \nFirst \nTogglePosition.Last \nLast"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-toggleposition.html#convert","title":"TogglePosition.convert","content":"TogglePosition.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-toggleposition.html#First","title":"TogglePosition.First","content":"TogglePosition.First \nFirst \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-toggleposition.html#Last","title":"TogglePosition.Last","content":"TogglePosition.Last \nLast \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipcondition.html","title":"TooltipCondition","content":"TooltipCondition \n\nrecord with the fields: \u0027column_id: string (optional)\u0027, \u0027filter_query: string (optional)\u0027, \u0027row_index: number | value equal to: \u0027odd\u0027, \u0027even\u0027 (optional)\u0027\n\n\nThe \u0060if\u0060 refers to the condition that needs to be fulfilled\nin order for the associated tooltip configuration to be\nused. If multiple conditions are defined, all conditions\nmust be met for the tooltip to be used by a cell.\n \nTooltipCondition.( .ctor ) \n( .ctor ) \nTooltipCondition.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipcondition.html#( .ctor )","title":"TooltipCondition.( .ctor )","content":"TooltipCondition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipcondition.html#init","title":"TooltipCondition.init","content":"TooltipCondition.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipusewith.html","title":"TooltipUseWith","content":"TooltipUseWith \n\nvalue equal to: \u0027both\u0027, \u0027data\u0027, \u0027header\u0027\n\n\nRefers to whether the tooltip will be shown\nonly on data or headers. Can be \u0060both\u0060, \u0060data\u0060, \u0060header\u0060.\nDefaults to \u0060both\u0060.\n \nTooltipUseWith.convert \nconvert \nTooltipUseWith.Both \nBoth \nTooltipUseWith.Data \nData \nTooltipUseWith.Header \nHeader"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipusewith.html#convert","title":"TooltipUseWith.convert","content":"TooltipUseWith.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipusewith.html#Both","title":"TooltipUseWith.Both","content":"TooltipUseWith.Both \nBoth \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipusewith.html#Data","title":"TooltipUseWith.Data","content":"TooltipUseWith.Data \nData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipusewith.html#Header","title":"TooltipUseWith.Header","content":"TooltipUseWith.Header \nHeader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipvalue.html","title":"TooltipValue","content":"TooltipValue \n\nrecord with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027value: string (required)\u0027\n \nTooltipValue.( .ctor ) \n( .ctor ) \nTooltipValue.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipvalue.html#( .ctor )","title":"TooltipValue.( .ctor )","content":"TooltipValue.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipvalue.html#init","title":"TooltipValue.init","content":"TooltipValue.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipvaluetype.html","title":"TooltipValueType","content":"TooltipValueType \n\nvalue equal to: \u0027text\u0027, \u0027markdown\u0027\n\n\nrefers to the type of tooltip syntax used\nfor the tooltip generation. Can either be \u0060markdown\u0060\nor \u0060text\u0060. Defaults to \u0060text\u0060.\n \nTooltipValueType.convert \nconvert \nTooltipValueType.Text \nText \nTooltipValueType.Markdown \nMarkdown"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipvaluetype.html#convert","title":"TooltipValueType.convert","content":"TooltipValueType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipvaluetype.html#Text","title":"TooltipValueType.Text","content":"TooltipValueType.Text \nText \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-tooltipvaluetype.html#Markdown","title":"TooltipValueType.Markdown","content":"TooltipValueType.Markdown \nMarkdown \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-usewithtooltipvalue.html","title":"UseWithTooltipValue","content":"UseWithTooltipValue \n\nrecord with the fields: \u0027delay: number (optional)\u0027, \u0027duration: number (optional)\u0027, \u0027type: value equal to: \u0027text\u0027, \u0027markdown\u0027 (optional)\u0027, \u0027use_with: value equal to: \u0027both\u0027, \u0027data\u0027, \u0027header\u0027 (optional)\u0027, \u0027value: string (required)\u0027\n \nUseWithTooltipValue.( .ctor ) \n( .ctor ) \nUseWithTooltipValue.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-usewithtooltipvalue.html#( .ctor )","title":"UseWithTooltipValue.( .ctor )","content":"UseWithTooltipValue.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashtable-datatable-usewithtooltipvalue.html#init","title":"UseWithTooltipValue.init","content":"UseWithTooltipValue.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke.html","title":"DynamicInvoke","content":"DynamicInvoke \n\n Reflection based dynamic invocation of functions and related helpers\n \nDynamicInvoke.InvokeResult \nInvokeResult \nDynamicInvoke.getFunctionDomain \ngetFunctionDomain \nDynamicInvoke.getFunctionRange \ngetFunctionRange \nDynamicInvoke.isIConvertible \nisIConvertible \nDynamicInvoke.isSeq \nisSeq \nDynamicInvoke.isIConvertibleSeq \nisIConvertibleSeq \nDynamicInvoke.invokeDynamic \ninvokeDynamic"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke.html#getFunctionDomain","title":"DynamicInvoke.getFunctionDomain","content":"DynamicInvoke.getFunctionDomain \ngetFunctionDomain \n\n Returns an array of input types (the domain) for the given function type (without the range)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke.html#getFunctionRange","title":"DynamicInvoke.getFunctionRange","content":"DynamicInvoke.getFunctionRange \ngetFunctionRange \n\n Returns an array of input types (the domain) for the given function type (without the range)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke.html#isIConvertible","title":"DynamicInvoke.isIConvertible","content":"DynamicInvoke.isIConvertible \nisIConvertible \n\n Returns true if the given type implements the IConvertible interface\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke.html#isSeq","title":"DynamicInvoke.isSeq","content":"DynamicInvoke.isSeq \nisSeq \n\n Returns true if the given type implements the IEnumerable interface\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke.html#isIConvertibleSeq","title":"DynamicInvoke.isIConvertibleSeq","content":"DynamicInvoke.isIConvertibleSeq \nisIConvertibleSeq \n\n Returns true if the given type implements the IEnumerable interface and the type contained in the collection implements the IConvertible interface\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke.html#invokeDynamic","title":"DynamicInvoke.invokeDynamic","content":"DynamicInvoke.invokeDynamic \ninvokeDynamic \nInvokes the given function with the given arguments (passed as boxed values) "},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke-invokeresult.html","title":"InvokeResult","content":"InvokeResult \n \nInvokeResult.InvokeSuccess \nInvokeSuccess \nInvokeResult.ObjectWasNotAFunction \nObjectWasNotAFunction"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke-invokeresult.html#InvokeSuccess","title":"InvokeResult.InvokeSuccess","content":"InvokeResult.InvokeSuccess \nInvokeSuccess \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dynamicinvoke-invokeresult.html#ObjectWasNotAFunction","title":"InvokeResult.ObjectWasNotAFunction","content":"InvokeResult.ObjectWasNotAFunction \nObjectWasNotAFunction \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html.html","title":"Html","content":"Html \n \nHtml.DashAttrEngine \nDashAttrEngine \nHtml.DashHtmlEngine \nDashHtmlEngine \nHtml.HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E \nHtml.HtmlProp \nHtmlProp \nHtml.Html \nHtml \nHtml.Attr \nAttr"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html.html#Html","title":"Html.Html","content":"Html.Html \nHtml \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html.html#Attr","title":"Html.Attr","content":"Html.Attr \nAttr \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html","title":"DashAttrEngine","content":"DashAttrEngine \n \nDashAttrEngine.( .ctor ) \n( .ctor ) \nDashAttrEngine.children \nchildren \nDashAttrEngine.children \nchildren \nDashAttrEngine.children \nchildren \nDashAttrEngine.children \nchildren \nDashAttrEngine.children \nchildren \nDashAttrEngine.children \nchildren \nDashAttrEngine.children \nchildren \nDashAttrEngine.contextMenu \ncontextMenu \nDashAttrEngine.custom \ncustom \nDashAttrEngine.dir \ndir \nDashAttrEngine.download \ndownload \nDashAttrEngine.draggable \ndraggable \nDashAttrEngine.key \nkey \nDashAttrEngine.loadingState \nloadingState \nDashAttrEngine.n_clicks \nn_clicks \nDashAttrEngine.n_clicks_timestamp \nn_clicks_timestamp \nDashAttrEngine.style \nstyle"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#( .ctor )","title":"DashAttrEngine.( .ctor )","content":"DashAttrEngine.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#children","title":"DashAttrEngine.children","content":"DashAttrEngine.children \nchildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#children","title":"DashAttrEngine.children","content":"DashAttrEngine.children \nchildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#children","title":"DashAttrEngine.children","content":"DashAttrEngine.children \nchildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#children","title":"DashAttrEngine.children","content":"DashAttrEngine.children \nchildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#children","title":"DashAttrEngine.children","content":"DashAttrEngine.children \nchildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#children","title":"DashAttrEngine.children","content":"DashAttrEngine.children \nchildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#children","title":"DashAttrEngine.children","content":"DashAttrEngine.children \nchildren \n\n children (a list of or a singular dash component, string or number; optional): The children of this component.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#contextMenu","title":"DashAttrEngine.contextMenu","content":"DashAttrEngine.contextMenu \ncontextMenu \n\n contextMenu (string; optional): Defines the ID of a \u003Cmenu\u003E element which will serve as the element\u0027s context menu.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#custom","title":"DashAttrEngine.custom","content":"DashAttrEngine.custom \ncustom \n\n Create a custom attribute\n\n You generally shouldn\u0027t need to use this, if you notice an attribute missing please submit an issue.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#dir","title":"DashAttrEngine.dir","content":"DashAttrEngine.dir \ndir \n\n dir (string; optional): Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left).\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#download","title":"DashAttrEngine.download","content":"DashAttrEngine.download \ndownload \n\n download (string; optional): Indicates that the hyperlink is to be used for downloading a resource.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#draggable","title":"DashAttrEngine.draggable","content":"DashAttrEngine.draggable \ndraggable \n\n draggable (string; optional): Indicates that the hyperlink is to be used for downloading a resource.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#key","title":"DashAttrEngine.key","content":"DashAttrEngine.key \nkey \n\n draggable (string; optional): Indicates that the hyperlink is to be used for downloading a resource.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#loadingState","title":"DashAttrEngine.loadingState","content":"DashAttrEngine.loadingState \nloadingState \n\n Object that holds the loading state object coming from dash-renderer. loading_state is a dict with keys:\n component_name (string; optional): Holds the name of the component that is loading.\n is_loading (boolean; optional): Determines if the component is loading or not.\n prop_name (string; optional): Holds which property is loading.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#n_clicks","title":"DashAttrEngine.n_clicks","content":"DashAttrEngine.n_clicks \nn_clicks \n\n An integer that represents the number of times that this element has been clicked on.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#n_clicks_timestamp","title":"DashAttrEngine.n_clicks_timestamp","content":"DashAttrEngine.n_clicks_timestamp \nn_clicks_timestamp \n\n An integer that represents the time (in ms since 1970) at which n_clicks changed. This can be used to tell which button was changed most recently.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashattrengine.html#style","title":"DashAttrEngine.style","content":"DashAttrEngine.style \nstyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashhtmlengine.html","title":"DashHtmlEngine","content":"DashHtmlEngine \n \nDashHtmlEngine.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-dashhtmlengine.html#( .ctor )","title":"DashHtmlEngine.( .ctor )","content":"DashHtmlEngine.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E \n \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.( .ctor ) \n( .ctor ) \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.a \na \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.abbr \nabbr \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.address \naddress \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.anchor \nanchor \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.area \narea \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.article \narticle \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.aside \naside \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.audio \naudio \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.b \nb \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.base\u0027 \nbase\u0027 \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.bdi \nbdi \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.bdo \nbdo \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.blockquote \nblockquote \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.body \nbody \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.br \nbr \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.button \nbutton \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.canvas \ncanvas \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.caption \ncaption \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.cite \ncite \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.code \ncode \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.col \ncol \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.colgroup \ncolgroup \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.custom \ncustom \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.data \ndata \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.datalist \ndatalist \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dd \ndd \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.del \ndel \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.details \ndetails \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dfn \ndfn \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dialog \ndialog \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.div \ndiv \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dl \ndl \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dt \ndt \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.em \nem \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.fieldSet \nfieldSet \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.figcaption \nfigcaption \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.figure \nfigure \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.footer \nfooter \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.form \nform \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h1 \nh1 \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h2 \nh2 \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h3 \nh3 \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h4 \nh4 \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h5 \nh5 \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h6 \nh6 \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.head \nhead \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.header \nheader \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.hr \nhr \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.html \nhtml \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.i \ni \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.iframe \niframe \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.img \nimg \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.input \ninput \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ins \nins \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.kbd \nkbd \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.label \nlabel \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.legend \nlegend \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.li \nli \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.listItem \nlistItem \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.main \nmain \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.map \nmap \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.mark \nmark \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.metadata \nmetadata \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.meter \nmeter \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.nav \nnav \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.noscript \nnoscript \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.object \nobject \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ol \nol \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.optgroup \noptgroup \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.option \noption \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.orderedList \norderedList \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.output \noutput \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.p \np \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.paragraph \nparagraph \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.picture \npicture \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.pre \npre \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.progress \nprogress \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.q \nq \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rb \nrb \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rp \nrp \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rt \nrt \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rtc \nrtc \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ruby \nruby \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.s \ns \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.samp \nsamp \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.script \nscript \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.section \nsection \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.select \nselect \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.small \nsmall \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.source \nsource \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.span \nspan \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.strong \nstrong \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.sub \nsub \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.summary \nsummary \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.sup \nsup \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.table \ntable \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableBody \ntableBody \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableCell \ntableCell \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableHeader \ntableHeader \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableRow \ntableRow \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tbody \ntbody \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.td \ntd \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.template \ntemplate \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.textarea \ntextarea \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tfoot \ntfoot \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.th \nth \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.thead \nthead \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.time \ntime \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tr \ntr \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.track \ntrack \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.u \nu \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ul \nul \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.unorderedList \nunorderedList \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.var \nvar \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.video \nvideo \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.wbr \nwbr \nHtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.none \nnone"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#( .ctor )","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.( .ctor )","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#a","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.a","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.a \na \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#abbr","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.abbr","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.abbr \nabbr \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#address","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.address","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.address \naddress \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#anchor","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.anchor","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.anchor \nanchor \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#area","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.area","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.area \narea \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#article","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.article","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.article \narticle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#aside","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.aside","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.aside \naside \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#audio","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.audio","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.audio \naudio \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#b","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.b","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.b \nb \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#base\u0027","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.base\u0027","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.base\u0027 \nbase\u0027 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#bdi","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.bdi","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.bdi \nbdi \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#bdo","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.bdo","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.bdo \nbdo \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#blockquote","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.blockquote","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.blockquote \nblockquote \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#body","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.body","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.body \nbody \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#br","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.br","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.br \nbr \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#button","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.button","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.button \nbutton \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#canvas","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.canvas","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.canvas \ncanvas \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#caption","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.caption","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.caption \ncaption \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#cite","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.cite","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.cite \ncite \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#code","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.code","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.code \ncode \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#col","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.col","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.col \ncol \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#colgroup","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.colgroup","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.colgroup \ncolgroup \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#custom","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.custom","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.custom \ncustom \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#data","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.data","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.data \ndata \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#datalist","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.datalist","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.datalist \ndatalist \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#dd","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dd","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dd \ndd \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#del","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.del","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.del \ndel \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#details","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.details","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.details \ndetails \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#dfn","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dfn","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dfn \ndfn \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#dialog","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dialog","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dialog \ndialog \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#div","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.div","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.div \ndiv \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#dl","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dl","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dl \ndl \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#dt","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dt","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.dt \ndt \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#em","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.em","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.em \nem \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#fieldSet","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.fieldSet","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.fieldSet \nfieldSet \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#figcaption","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.figcaption","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.figcaption \nfigcaption \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#figure","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.figure","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.figure \nfigure \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#footer","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.footer","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.footer \nfooter \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#form","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.form","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.form \nform \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#h1","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h1","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h1 \nh1 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#h2","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h2","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h2 \nh2 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#h3","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h3","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h3 \nh3 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#h4","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h4","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h4 \nh4 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#h5","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h5","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h5 \nh5 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#h6","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h6","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.h6 \nh6 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#head","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.head","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.head \nhead \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#header","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.header","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.header \nheader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#hr","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.hr","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.hr \nhr \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#html","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.html","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.html \nhtml \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#i","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.i","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.i \ni \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#iframe","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.iframe","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.iframe \niframe \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#img","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.img","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.img \nimg \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#input","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.input","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.input \ninput \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#ins","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ins","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ins \nins \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#kbd","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.kbd","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.kbd \nkbd \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#label","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.label","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.label \nlabel \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#legend","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.legend","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.legend \nlegend \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#li","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.li","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.li \nli \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#listItem","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.listItem","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.listItem \nlistItem \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#main","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.main","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.main \nmain \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#map","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.map","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.map \nmap \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#mark","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.mark","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.mark \nmark \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#metadata","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.metadata","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.metadata \nmetadata \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#meter","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.meter","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.meter \nmeter \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#nav","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.nav","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.nav \nnav \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#noscript","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.noscript","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.noscript \nnoscript \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#object","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.object","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.object \nobject \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#ol","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ol","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ol \nol \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#optgroup","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.optgroup","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.optgroup \noptgroup \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#option","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.option","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.option \noption \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#orderedList","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.orderedList","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.orderedList \norderedList \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#output","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.output","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.output \noutput \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#p","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.p","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.p \np \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#paragraph","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.paragraph","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.paragraph \nparagraph \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#picture","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.picture","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.picture \npicture \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#pre","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.pre","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.pre \npre \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#progress","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.progress","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.progress \nprogress \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#q","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.q","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.q \nq \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#rb","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rb","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rb \nrb \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#rp","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rp","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rp \nrp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#rt","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rt","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rt \nrt \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#rtc","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rtc","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.rtc \nrtc \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#ruby","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ruby","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ruby \nruby \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#s","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.s","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.s \ns \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#samp","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.samp","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.samp \nsamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#script","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.script","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.script \nscript \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#section","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.section","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.section \nsection \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#select","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.select","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.select \nselect \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#small","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.small","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.small \nsmall \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#source","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.source","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.source \nsource \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#span","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.span","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.span \nspan \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#strong","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.strong","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.strong \nstrong \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#sub","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.sub","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.sub \nsub \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#summary","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.summary","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.summary \nsummary \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#sup","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.sup","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.sup \nsup \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#table","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.table","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.table \ntable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#tableBody","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableBody","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableBody \ntableBody \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#tableCell","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableCell","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableCell \ntableCell \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#tableHeader","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableHeader","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableHeader \ntableHeader \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#tableRow","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableRow","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tableRow \ntableRow \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#tbody","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tbody","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tbody \ntbody \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#td","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.td","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.td \ntd \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#template","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.template","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.template \ntemplate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#text","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#text","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#text","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#text","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.text \ntext \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#textarea","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.textarea","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.textarea \ntextarea \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#tfoot","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tfoot","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tfoot \ntfoot \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#th","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.th","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.th \nth \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#thead","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.thead","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.thead \nthead \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#time","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.time","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.time \ntime \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#tr","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tr","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.tr \ntr \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#track","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.track","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.track \ntrack \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#u","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.u","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.u \nu \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#ul","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ul","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.ul \nul \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#unorderedList","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.unorderedList","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.unorderedList \nunorderedList \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#var","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.var","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.var \nvar \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#video","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.video","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.video \nvideo \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#wbr","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.wbr","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.wbr \nwbr \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlengine-2.html#none","title":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.none","content":"HtmlEngine\u003C\u0027HtmlProp, \u0027DashComponent\u003E.none \nnone \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlprop.html","title":"HtmlProp","content":"HtmlProp \n \nHtmlProp.Prop \nProp \nHtmlProp.Children\u0027 \nChildren\u0027"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlprop.html#Prop","title":"HtmlProp.Prop","content":"HtmlProp.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-html-htmlprop.html#Children\u0027","title":"HtmlProp.Children\u0027","content":"HtmlProp.Children\u0027 \nChildren\u0027 \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-operators.html","title":"Operators","content":"Operators \n \nOperators.( @. ) \n( @. ) \nOperators.( =\u003E ) \n( =\u003E )"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-operators.html#( @. )","title":"Operators.( @. )","content":"Operators.( @. ) \n( @. ) \n\n Shorthand for creation of a dependency (binding of the property of a component)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-operators.html#( =\u003E )","title":"Operators.( =\u003E )","content":"Operators.( =\u003E ) \n( =\u003E ) \n\n Shorthand operator for defining a CallbackResultBinding\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html","title":"Callback\u003C\u0027Function\u003E","content":"Callback\u003C\u0027Function\u003E \n\n The Central Callback type. \n This type serves two purposes:\n\n 1. Externally, the Serialized object is returned via the \u0060_dash-dependencies\u0060 endpoint of a dash application to set up the dash renderer loop\n\n 2. Internally, the HandlerFunction of the Callback is evaluated when a qualified call to \u0060_dash-update-component\u0060 is performed.\n\n As this type needs dynamic members in addition to the static members created by the default constructor, it is not recommended to use the constructor to create a callback,\n but rather the \u0060singleOut\u0060 or \u0060multiOut\u0060 members.\n\n Creating an instance of this type and registering it on the callback map of the DashApp is the equivalent of the @app.callback decorator in python.\n \nCallback\u003C\u0027Function\u003E.( .ctor ) \n( .ctor ) \nCallback\u003C\u0027Function\u003E.ClientSideFunction \nClientSideFunction \nCallback\u003C\u0027Function\u003E.Multi \nMulti \nCallback\u003C\u0027Function\u003E.PreventInitialCall \nPreventInitialCall \nCallback\u003C\u0027Function\u003E.HandlerFunction \nHandlerFunction \nCallback\u003C\u0027Function\u003E.copy \ncopy \nCallback\u003C\u0027Function\u003E.eval \neval \nCallback\u003C\u0027Function\u003E.evalAs \nevalAs \nCallback\u003C\u0027Function\u003E.getResponseObject \ngetResponseObject \nCallback\u003C\u0027Function\u003E.multiOut \nmultiOut \nCallback\u003C\u0027Function\u003E.multiOut \nmultiOut \nCallback\u003C\u0027Function\u003E.pack \npack \nCallback\u003C\u0027Function\u003E.singleOut \nsingleOut \nCallback\u003C\u0027Function\u003E.singleOut \nsingleOut \nCallback\u003C\u0027Function\u003E.toDependencyGraph \ntoDependencyGraph"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#( .ctor )","title":"Callback\u003C\u0027Function\u003E.( .ctor )","content":"Callback\u003C\u0027Function\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#ClientSideFunction","title":"Callback\u003C\u0027Function\u003E.ClientSideFunction","content":"Callback\u003C\u0027Function\u003E.ClientSideFunction \nClientSideFunction \n\n A clientside function that should be run by this callback\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#Multi","title":"Callback\u003C\u0027Function\u003E.Multi","content":"Callback\u003C\u0027Function\u003E.Multi \nMulti \n\n Indicates wether the callback is a n -\u003E i mapping (false) or n -\u003E n mapping (true)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#PreventInitialCall","title":"Callback\u003C\u0027Function\u003E.PreventInitialCall","content":"Callback\u003C\u0027Function\u003E.PreventInitialCall \nPreventInitialCall \n\n If true, the callback will not be called during initialization of the DashApp\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#HandlerFunction","title":"Callback\u003C\u0027Function\u003E.HandlerFunction","content":"Callback\u003C\u0027Function\u003E.HandlerFunction \nHandlerFunction \n\n The handler function that maps the callback input components to the callback output components\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#copy","title":"Callback\u003C\u0027Function\u003E.copy","content":"Callback\u003C\u0027Function\u003E.copy \ncopy \n\n Returns a copy of the given \u0060Callback\u0060 (copies dynamic members aswell)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#eval","title":"Callback\u003C\u0027Function\u003E.eval","content":"Callback\u003C\u0027Function\u003E.eval \neval \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#evalAs","title":"Callback\u003C\u0027Function\u003E.evalAs","content":"Callback\u003C\u0027Function\u003E.evalAs \nevalAs \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#getResponseObject","title":"Callback\u003C\u0027Function\u003E.getResponseObject","content":"Callback\u003C\u0027Function\u003E.getResponseObject \ngetResponseObject \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#multiOut","title":"Callback\u003C\u0027Function\u003E.multiOut","content":"Callback\u003C\u0027Function\u003E.multiOut \nmultiOut \n\n returns a callback that binds a handler function mapping from a single input component to multiple output components (1 -\u003E n)\n \u003Cparam name=\u0022input\u0022\u003E A \u0060CallbackInput\u0060 that represents the input component of this callback. Changes to this component signalled by the client will trigger the callback. \u003C/param\u003E\n \u003Cparam name=\u0022outputs\u0022\u003E A sequence of \u0060CallbackOutput\u0060 that represents the output components of this callback \u003C/param\u003E\n \u003Cparam name=\u0022handlerFunction\u0022\u003E The handler function that maps the callback input components to the callback output components \u003C/param\u003E\n \u003Cparam name=\u0022?State\u0022\u003E A sequence of \u0060CallbackState\u0060 that represents additional input components of this callback. In contrast to the other input componenst, these will not trigger the handler function when changed on the client.\u003C/param\u003E\n \u003Cparam name=\u0022?PreventInitialCall\u0022\u003E Wether to prevent the app to call this callback on initialization \u003C/param\u003E\n \u003Cparam name=\u0022?ClientSideFunction\u0022\u003E A client side function to execute with the callback \u003C/param\u003E\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#multiOut","title":"Callback\u003C\u0027Function\u003E.multiOut","content":"Callback\u003C\u0027Function\u003E.multiOut \nmultiOut \nreturns a callback that binds a handler function mapping from multiple input components to multiple output components (n -\u003E n)"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#pack","title":"Callback\u003C\u0027Function\u003E.pack","content":"Callback\u003C\u0027Function\u003E.pack \npack \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#singleOut","title":"Callback\u003C\u0027Function\u003E.singleOut","content":"Callback\u003C\u0027Function\u003E.singleOut \nsingleOut \nreturns a callback that binds a handler function mapping from a single input component to a single output component (1 -\u003E 1)"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#singleOut","title":"Callback\u003C\u0027Function\u003E.singleOut","content":"Callback\u003C\u0027Function\u003E.singleOut \nsingleOut \nreturns a callback that binds a handler function mapping from multiple input components to a single output component (n -\u003E 1)"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callback-1.html#toDependencyGraph","title":"Callback\u003C\u0027Function\u003E.toDependencyGraph","content":"Callback\u003C\u0027Function\u003E.toDependencyGraph \ntoDependencyGraph \n\n Returns a copy of the callback with all dynamic fields removed that prevent the callback to be correctly serialized and returned as dependency graph at \u0060_dash-dependencies\u0060\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackinput.html","title":"CallbackInput","content":"CallbackInput \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackmap.html","title":"CallbackMap","content":"CallbackMap \n \nCallbackMap.( .ctor ) \n( .ctor ) \nCallbackMap.getPackedCallbackById \ngetPackedCallbackById \nCallbackMap.registerCallback \nregisterCallback \nCallbackMap.toDependencies \ntoDependencies \nCallbackMap.unregisterCallback \nunregisterCallback"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackmap.html#( .ctor )","title":"CallbackMap.( .ctor )","content":"CallbackMap.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackmap.html#getPackedCallbackById","title":"CallbackMap.getPackedCallbackById","content":"CallbackMap.getPackedCallbackById \ngetPackedCallbackById \n\n Returns the packed \u0060Callback\u0060 (meaning the generic type annotation of the \u0060Callback\u0060 is obj, as its handlerfunction is boxed) registered at the given id when it exists.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackmap.html#registerCallback","title":"CallbackMap.registerCallback","content":"CallbackMap.registerCallback \nregisterCallback \n\n adds the given \u0060Callback\u0060 to the given \u0060CallbackMap\u0060 by setting it as dynamic member with the field name equal to the callback output composite id.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackmap.html#toDependencies","title":"CallbackMap.toDependencies","content":"CallbackMap.toDependencies \ntoDependencies \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackmap.html#unregisterCallback","title":"CallbackMap.unregisterCallback","content":"CallbackMap.unregisterCallback \nunregisterCallback \n\n If there is a callback registered at the given id (meaning if there is a dynamic member with the given field name) , removes it from the \u0060CallbackMap\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackoutput.html","title":"CallbackOutput","content":"CallbackOutput \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackrequest.html","title":"CallbackRequest","content":"CallbackRequest \n\nType to deserialize calls to _dash-update-component into\n \nCallbackRequest.Output \nOutput \nCallbackRequest.Outputs \nOutputs \nCallbackRequest.ChangedPropIds \nChangedPropIds \nCallbackRequest.Inputs \nInputs \nCallbackRequest.State \nState"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackrequest.html#Output","title":"CallbackRequest.Output","content":"CallbackRequest.Output \nOutput \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackrequest.html#Outputs","title":"CallbackRequest.Outputs","content":"CallbackRequest.Outputs \nOutputs \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackrequest.html#ChangedPropIds","title":"CallbackRequest.ChangedPropIds","content":"CallbackRequest.ChangedPropIds \nChangedPropIds \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackrequest.html#Inputs","title":"CallbackRequest.Inputs","content":"CallbackRequest.Inputs \nInputs \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackrequest.html#State","title":"CallbackRequest.State","content":"CallbackRequest.State \nState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresponse.html","title":"CallbackResponse","content":"CallbackResponse \n\n The response object that will be serialized and returned as response to requests at \u0060_dash-update-component\u0060\n \nCallbackResponse.( .ctor ) \n( .ctor ) \nCallbackResponse.multiOut \nmultiOut \nCallbackResponse.multiOut \nmultiOut \nCallbackResponse.singleOut \nsingleOut \nCallbackResponse.singleOut \nsingleOut"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresponse.html#( .ctor )","title":"CallbackResponse.( .ctor )","content":"CallbackResponse.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresponse.html#multiOut","title":"CallbackResponse.multiOut","content":"CallbackResponse.multiOut \nmultiOut \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresponse.html#multiOut","title":"CallbackResponse.multiOut","content":"CallbackResponse.multiOut \nmultiOut \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresponse.html#singleOut","title":"CallbackResponse.singleOut","content":"CallbackResponse.singleOut \nsingleOut \n\n creates a \u0060CallbackResponse\u0060 object for a single output callback response from the given \u0060CallbackResultBinding\u0060\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresponse.html#singleOut","title":"CallbackResponse.singleOut","content":"CallbackResponse.singleOut \nsingleOut \n\n creates a \u0060CallbackResponse\u0060 object for a single output callback response for the given property of the given component with the given evaluation result\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresultbinding.html","title":"CallbackResultBinding","content":"CallbackResultBinding \n \nCallbackResultBinding.bindResult \nbindResult \nCallbackResultBinding.create \ncreate \nCallbackResultBinding.Target \nTarget \nCallbackResultBinding.BoxedResult \nBoxedResult"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresultbinding.html#bindResult","title":"CallbackResultBinding.bindResult","content":"CallbackResultBinding.bindResult \nbindResult \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresultbinding.html#create","title":"CallbackResultBinding.create","content":"CallbackResultBinding.create \ncreate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresultbinding.html#Target","title":"CallbackResultBinding.Target","content":"CallbackResultBinding.Target \nTarget \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackresultbinding.html#BoxedResult","title":"CallbackResultBinding.BoxedResult","content":"CallbackResultBinding.BoxedResult \nBoxedResult \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-callbackstate.html","title":"CallbackState","content":"CallbackState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-clientsidefunction.html","title":"ClientSideFunction","content":"ClientSideFunction \n\n Client side function that can be bound to a callback\n \nClientSideFunction.Namespace \nNamespace \nClientSideFunction.FunctionName \nFunctionName"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-clientsidefunction.html#Namespace","title":"ClientSideFunction.Namespace","content":"ClientSideFunction.Namespace \nNamespace \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-clientsidefunction.html#FunctionName","title":"ClientSideFunction.FunctionName","content":"ClientSideFunction.FunctionName \nFunctionName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproperty.html","title":"ComponentProperty","content":"ComponentProperty \n \nComponentProperty.toPropertyName \ntoPropertyName \nComponentProperty.Children \nChildren \nComponentProperty.Value \nValue \nComponentProperty.N_Clicks \nN_Clicks \nComponentProperty.CustomProperty \nCustomProperty"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproperty.html#toPropertyName","title":"ComponentProperty.toPropertyName","content":"ComponentProperty.toPropertyName \ntoPropertyName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproperty.html#Children","title":"ComponentProperty.Children","content":"ComponentProperty.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproperty.html#Value","title":"ComponentProperty.Value","content":"ComponentProperty.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproperty.html#N_Clicks","title":"ComponentProperty.N_Clicks","content":"ComponentProperty.N_Clicks \nN_Clicks \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-componentproperty.html#CustomProperty","title":"ComponentProperty.CustomProperty","content":"ComponentProperty.CustomProperty \nCustomProperty \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponent.html","title":"DashComponent","content":"DashComponent \n \nDashComponent.( .ctor ) \n( .ctor ) \nDashComponent.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponent.html#( .ctor )","title":"DashComponent.( .ctor )","content":"DashComponent.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponent.html#( .ctor )","title":"DashComponent.( .ctor )","content":"DashComponent.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponentprops.html","title":"DashComponentProps","content":"DashComponentProps \n \nDashComponentProps.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponentprops.html#( .ctor )","title":"DashComponentProps.( .ctor )","content":"DashComponentProps.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponentstyle.html","title":"DashComponentStyle","content":"DashComponentStyle \n \nDashComponentStyle.( .ctor ) \n( .ctor ) \nDashComponentStyle.fromCssStyle \nfromCssStyle"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponentstyle.html#( .ctor )","title":"DashComponentStyle.( .ctor )","content":"DashComponentStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashcomponentstyle.html#fromCssStyle","title":"DashComponentStyle.fromCssStyle","content":"DashComponentStyle.fromCssStyle \nfromCssStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html","title":"DashConfig","content":"DashConfig \n \nDashConfig.create \ncreate \nDashConfig.initDefault \ninitDefault \nDashConfig.initDefaultWith \ninitDefaultWith \nDashConfig.UrlBasePathname \nUrlBasePathname \nDashConfig.RequestsPathamePrefix \nRequestsPathamePrefix \nDashConfig.ServeLocally \nServeLocally \nDashConfig.UI \nUI \nDashConfig.PropsCheck \nPropsCheck \nDashConfig.ShowUndoRedo \nShowUndoRedo \nDashConfig.SuppressCallbackExceptions \nSuppressCallbackExceptions \nDashConfig.UpdateTitle \nUpdateTitle"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#create","title":"DashConfig.create","content":"DashConfig.create \ncreate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#initDefault","title":"DashConfig.initDefault","content":"DashConfig.initDefault \ninitDefault \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#initDefaultWith","title":"DashConfig.initDefaultWith","content":"DashConfig.initDefaultWith \ninitDefaultWith \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#UrlBasePathname","title":"DashConfig.UrlBasePathname","content":"DashConfig.UrlBasePathname \nUrlBasePathname \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#RequestsPathamePrefix","title":"DashConfig.RequestsPathamePrefix","content":"DashConfig.RequestsPathamePrefix \nRequestsPathamePrefix \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#ServeLocally","title":"DashConfig.ServeLocally","content":"DashConfig.ServeLocally \nServeLocally \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#UI","title":"DashConfig.UI","content":"DashConfig.UI \nUI \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#PropsCheck","title":"DashConfig.PropsCheck","content":"DashConfig.PropsCheck \nPropsCheck \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#ShowUndoRedo","title":"DashConfig.ShowUndoRedo","content":"DashConfig.ShowUndoRedo \nShowUndoRedo \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#SuppressCallbackExceptions","title":"DashConfig.SuppressCallbackExceptions","content":"DashConfig.SuppressCallbackExceptions \nSuppressCallbackExceptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dashconfig.html#UpdateTitle","title":"DashConfig.UpdateTitle","content":"DashConfig.UpdateTitle \nUpdateTitle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html","title":"Dependency","content":"Dependency \n \nDependency.create \ncreate \nDependency.create \ncreate \nDependency.ofList \nofList \nDependency.toCompositeId \ntoCompositeId \nDependency.toMultiCompositeId \ntoMultiCompositeId \nDependency.Id \nId \nDependency.Property \nProperty"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html#create","title":"Dependency.create","content":"Dependency.create \ncreate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html#create","title":"Dependency.create","content":"Dependency.create \ncreate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html#ofList","title":"Dependency.ofList","content":"Dependency.ofList \nofList \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html#toCompositeId","title":"Dependency.toCompositeId","content":"Dependency.toCompositeId \ntoCompositeId \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html#toMultiCompositeId","title":"Dependency.toMultiCompositeId","content":"Dependency.toMultiCompositeId \ntoMultiCompositeId \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html#Id","title":"Dependency.Id","content":"Dependency.Id \nId \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dependency.html#Property","title":"Dependency.Property","content":"Dependency.Property \nProperty \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-hotreloadsettings.html","title":"HotReloadSettings","content":"HotReloadSettings \n \nHotReloadSettings.Intervall \nIntervall \nHotReloadSettings.MaxRetry \nMaxRetry"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-hotreloadsettings.html#Intervall","title":"HotReloadSettings.Intervall","content":"HotReloadSettings.Intervall \nIntervall \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-hotreloadsettings.html#MaxRetry","title":"HotReloadSettings.MaxRetry","content":"HotReloadSettings.MaxRetry \nMaxRetry \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-loadablecomponentdefinition.html","title":"LoadableComponentDefinition","content":"LoadableComponentDefinition \n \nLoadableComponentDefinition.ComponentName \nComponentName \nLoadableComponentDefinition.ComponentJavascript \nComponentJavascript"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-loadablecomponentdefinition.html#ComponentName","title":"LoadableComponentDefinition.ComponentName","content":"LoadableComponentDefinition.ComponentName \nComponentName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-loadablecomponentdefinition.html#ComponentJavascript","title":"LoadableComponentDefinition.ComponentJavascript","content":"LoadableComponentDefinition.ComponentJavascript \nComponentJavascript \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-requestinput.html","title":"RequestInput","content":"RequestInput \n\n A single element of the \u0060inputs\u0060 field of a JSON request to \u0060_dash-update-component\u0060\n \nRequestInput.Id \nId \nRequestInput.Property \nProperty \nRequestInput.Value \nValue"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-requestinput.html#Id","title":"RequestInput.Id","content":"RequestInput.Id \nId \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-requestinput.html#Property","title":"RequestInput.Property","content":"RequestInput.Property \nProperty \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-requestinput.html#Value","title":"RequestInput.Value","content":"RequestInput.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-singleorarrayconverter-1.html","title":"SingleOrArrayConverter\u003C\u0027T\u003E","content":"SingleOrArrayConverter\u003C\u0027T\u003E \n\n JSON converter to always convert a single item as well as a JArray of items on the same field to \u0060Seq\u003C\u0027T\u003E\u0060\n \nSingleOrArrayConverter\u003C\u0027T\u003E.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-singleorarrayconverter-1.html#( .ctor )","title":"SingleOrArrayConverter\u003C\u0027T\u003E.( .ctor )","content":"SingleOrArrayConverter\u003C\u0027T\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-du.html","title":"DU","content":"DU \n \nDU.convertAsString \nconvertAsString \nDU.convertMapped \nconvertMapped"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-du.html#convertAsString","title":"DU.convertAsString","content":"DU.convertAsString \nconvertAsString \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-du.html#convertMapped","title":"DU.convertMapped","content":"DU.convertMapped \nconvertMapped \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-dynobj.html","title":"DynObj","content":"DynObj \n \nDynObj.setPropValueOpt \nsetPropValueOpt \nDynObj.setDUValueOpt \nsetDUValueOpt"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-dynobj.html#setPropValueOpt","title":"DynObj.setPropValueOpt","content":"DynObj.setPropValueOpt \nsetPropValueOpt \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-dynobj.html#setDUValueOpt","title":"DynObj.setDUValueOpt","content":"DynObj.setDUValueOpt \nsetDUValueOpt \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-json.html","title":"Json","content":"Json \n \nJson.OptionConverter\u003C\u0027T\u003E \nOptionConverter\u003C\u0027T\u003E \nJson.mkSerializerSettings \nmkSerializerSettings"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-json.html#mkSerializerSettings","title":"Json.mkSerializerSettings","content":"Json.mkSerializerSettings \nmkSerializerSettings \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-json-optionconverter-1.html","title":"OptionConverter\u003C\u0027T\u003E","content":"OptionConverter\u003C\u0027T\u003E \n \nOptionConverter\u003C\u0027T\u003E.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-json-optionconverter-1.html#( .ctor )","title":"OptionConverter\u003C\u0027T\u003E.( .ctor )","content":"OptionConverter\u003C\u0027T\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-namingstrategy.html","title":"NamingStrategy","content":"NamingStrategy \n \nNamingStrategy.toSnakeCase \ntoSnakeCase \nNamingStrategy.toCamelCase \ntoCamelCase \nNamingStrategy.toKebabCase \ntoKebabCase"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-namingstrategy.html#toSnakeCase","title":"NamingStrategy.toSnakeCase","content":"NamingStrategy.toSnakeCase \ntoSnakeCase \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-namingstrategy.html#toCamelCase","title":"NamingStrategy.toCamelCase","content":"NamingStrategy.toCamelCase \ntoCamelCase \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-namingstrategy.html#toKebabCase","title":"NamingStrategy.toKebabCase","content":"NamingStrategy.toKebabCase \ntoKebabCase \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-prop.html","title":"Prop","content":"Prop \n \nProp.createName \ncreateName"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-common-prop.html#createName","title":"Prop.createName","content":"Prop.createName \ncreateName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist.html","title":"Checklist","content":"Checklist \n\nChecklist is a component that encapsulates several checkboxes.\nThe values and labels of the checklist are specified in the \u0060options\u0060\nproperty and the checked items are specified with the \u0060value\u0060 property.\nEach checkbox is rendered as an input with a surrounding label.\n \nChecklist.Attr \nAttr \nChecklist.Checklist \nChecklist \nChecklist.Prop \nProp \nChecklist.checklist \nchecklist"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist.html#checklist","title":"Checklist.checklist","content":"Checklist.checklist \nchecklist \n\nChecklist is a component that encapsulates several checkboxes.\nThe values and labels of the checklist are specified in the \u0060options\u0060\nproperty and the checked items are specified with the \u0060value\u0060 property.\nEach checkbox is rendered as an input with a surrounding label.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 options (list with values of type: record with the fields: \u0027label: string | number (required)\u0027, \u0027value: string | number (required)\u0027, \u0027disabled: boolean (optional)\u0027; default []) - An array of options\n\n\n\u2022 value (list with values of type: string | number; default []) - The currently selected value\n\n\n\u2022 className (string) - The class of the container (div)\n\n\n\u2022 style (record) - The style of the container (div)\n\n\n\u2022 inputStyle (record; default {}) - The style of the \u003Cinput\u003E checkbox element\n\n\n\u2022 inputClassName (string; default ) - The class of the \u003Cinput\u003E checkbox element\n\n\n\u2022 labelStyle (record; default {}) - The style of the \u003Clabel\u003E that wraps the checkbox input\n and the option\u0027s label\n\n\n\u2022 labelClassName (string; default ) - The class of the \u003Clabel\u003E that wraps the checkbox input\n and the option\u0027s label\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.inputClassName \ninputClassName \nAttr.inputStyle \ninputStyle \nAttr.labelClassName \nlabelClassName \nAttr.labelStyle \nlabelStyle \nAttr.loadingState \nloadingState \nAttr.options \noptions \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.persistenceType \npersistenceType \nAttr.style \nstyle \nAttr.value \nvalue \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nThe class of the container (div)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#inputClassName","title":"Attr.inputClassName","content":"Attr.inputClassName \ninputClassName \n\nThe class of the \u003Cinput\u003E checkbox element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#inputStyle","title":"Attr.inputStyle","content":"Attr.inputStyle \ninputStyle \n\nThe style of the \u003Cinput\u003E checkbox element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#labelClassName","title":"Attr.labelClassName","content":"Attr.labelClassName \nlabelClassName \n\nThe class of the \u003Clabel\u003E that wraps the checkbox input\n and the option\u0027s label\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#labelStyle","title":"Attr.labelStyle","content":"Attr.labelStyle \nlabelStyle \n\nThe style of the \u003Clabel\u003E that wraps the checkbox input\n and the option\u0027s label\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#options","title":"Attr.options","content":"Attr.options \noptions \n\nAn array of options\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#persistenceType","title":"Attr.persistenceType","content":"Attr.persistenceType \npersistenceType \n\nWhere persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nDefines CSS styles which will override styles previously set.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe currently selected value\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-checklist.html","title":"Checklist","content":"Checklist \n\nChecklist is a component that encapsulates several checkboxes.\nThe values and labels of the checklist are specified in the \u0060options\u0060\nproperty and the checked items are specified with the \u0060value\u0060 property.\nEach checkbox is rendered as an input with a surrounding label.\n \nChecklist.( .ctor ) \n( .ctor ) \nChecklist.applyMembers \napplyMembers \nChecklist.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-checklist.html#( .ctor )","title":"Checklist.( .ctor )","content":"Checklist.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-checklist.html#applyMembers","title":"Checklist.applyMembers","content":"Checklist.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-checklist.html#init","title":"Checklist.init","content":"Checklist.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html","title":"Prop","content":"Prop \n\n\u2022 options (list with values of type: record with the fields: \u0027label: string | number (required)\u0027, \u0027value: string | number (required)\u0027, \u0027disabled: boolean (optional)\u0027; default []) - An array of options\n\n\n\u2022 value (list with values of type: string | number; default []) - The currently selected value\n\n\n\u2022 className (string) - The class of the container (div)\n\n\n\u2022 style (record) - The style of the container (div)\n\n\n\u2022 inputStyle (record; default {}) - The style of the \u003Cinput\u003E checkbox element\n\n\n\u2022 inputClassName (string; default ) - The class of the \u003Cinput\u003E checkbox element\n\n\n\u2022 labelStyle (record; default {}) - The style of the \u003Clabel\u003E that wraps the checkbox input\n and the option\u0027s label\n\n\n\u2022 labelClassName (string; default ) - The class of the \u003Clabel\u003E that wraps the checkbox input\n and the option\u0027s label\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.Options \nOptions \nProp.Value \nValue \nProp.ClassName \nClassName \nProp.Style \nStyle \nProp.InputStyle \nInputStyle \nProp.InputClassName \nInputClassName \nProp.LabelStyle \nLabelStyle \nProp.LabelClassName \nLabelClassName \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#Options","title":"Prop.Options","content":"Prop.Options \nOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#InputStyle","title":"Prop.InputStyle","content":"Prop.InputStyle \nInputStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#InputClassName","title":"Prop.InputClassName","content":"Prop.InputClassName \nInputClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#LabelStyle","title":"Prop.LabelStyle","content":"Prop.LabelStyle \nLabelStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#LabelClassName","title":"Prop.LabelClassName","content":"Prop.LabelClassName \nLabelClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-checklist-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard.html","title":"Clipboard","content":"Clipboard \n\nThe Clipboard component copies text to the clipboard\n \nClipboard.Attr \nAttr \nClipboard.Clipboard \nClipboard \nClipboard.Prop \nProp \nClipboard.clipboard \nclipboard"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard.html#clipboard","title":"Clipboard.clipboard","content":"Clipboard.clipboard \nclipboard \n\nThe Clipboard component copies text to the clipboard\n\n\nProperties:\n\n\n\u2022 id (string) - The ID used to identify this component.\n\n\n\u2022 target_id (string | record; default null) - The id of target component containing text to copy to the clipboard.\nThe inner text of the \u0060children\u0060 prop will be copied to the clipboard.  If none, then the text from the\n \u0060value\u0060 prop will be copied.\n\n\n\u2022 content (string; default null) - The text to  be copied to the clipboard if the \u0060target_id\u0060 is None.\n\n\n\u2022 n_clicks (number; default 0) - The number of times copy button was clicked\n\n\n\u2022 title (string) - The text shown as a tooltip when hovering over the copy icon.\n\n\n\u2022 style (record) - The icon\u0027s styles\n\n\n\u2022 className (string) - The class  name of the icon element\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.content \ncontent \nAttr.loadingState \nloadingState \nAttr.nClicks \nnClicks \nAttr.style \nstyle \nAttr.targetId \ntargetId \nAttr.title \ntitle \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nThe class  name of the icon element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#content","title":"Attr.content","content":"Attr.content \ncontent \n\nThe text to  be copied to the clipboard if the \u0060target_id\u0060 is None.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#nClicks","title":"Attr.nClicks","content":"Attr.nClicks \nnClicks \n\nThe number of times copy button was clicked\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nThe icon\u0027s styles\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#targetId","title":"Attr.targetId","content":"Attr.targetId \ntargetId \n\nThe id of target component containing text to copy to the clipboard.\nThe inner text of the \u0060children\u0060 prop will be copied to the clipboard.  If none, then the text from the\n \u0060value\u0060 prop will be copied.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#title","title":"Attr.title","content":"Attr.title \ntitle \n\nThe text shown as a tooltip when hovering over the copy icon.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-clipboard.html","title":"Clipboard","content":"Clipboard \n\nThe Clipboard component copies text to the clipboard\n \nClipboard.( .ctor ) \n( .ctor ) \nClipboard.applyMembers \napplyMembers \nClipboard.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-clipboard.html#( .ctor )","title":"Clipboard.( .ctor )","content":"Clipboard.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-clipboard.html#applyMembers","title":"Clipboard.applyMembers","content":"Clipboard.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-clipboard.html#init","title":"Clipboard.init","content":"Clipboard.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html","title":"Prop","content":"Prop \n\n\u2022 target_id (string | record; default null) - The id of target component containing text to copy to the clipboard.\nThe inner text of the \u0060children\u0060 prop will be copied to the clipboard.  If none, then the text from the\n \u0060value\u0060 prop will be copied.\n\n\n\u2022 content (string; default null) - The text to  be copied to the clipboard if the \u0060target_id\u0060 is None.\n\n\n\u2022 n_clicks (number; default 0) - The number of times copy button was clicked\n\n\n\u2022 title (string) - The text shown as a tooltip when hovering over the copy icon.\n\n\n\u2022 style (record) - The icon\u0027s styles\n\n\n\u2022 className (string) - The class  name of the icon element\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.convert \nconvert \nProp.toPropName \ntoPropName \nProp.TargetId \nTargetId \nProp.Content \nContent \nProp.NClicks \nNClicks \nProp.Title \nTitle \nProp.Style \nStyle \nProp.ClassName \nClassName \nProp.LoadingState \nLoadingState"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#convert","title":"Prop.convert","content":"Prop.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#toPropName","title":"Prop.toPropName","content":"Prop.toPropName \ntoPropName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#TargetId","title":"Prop.TargetId","content":"Prop.TargetId \nTargetId \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#Content","title":"Prop.Content","content":"Prop.Content \nContent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#NClicks","title":"Prop.NClicks","content":"Prop.NClicks \nNClicks \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#Title","title":"Prop.Title","content":"Prop.Title \nTitle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-clipboard-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown.html","title":"Dropdown","content":"Dropdown \n\nDropdown is an interactive dropdown element for selecting one or more\nitems.\nThe values and labels of the dropdown items are specified in the \u0060options\u0060\nproperty and the selected item(s) are specified with the \u0060value\u0060 property.\nUse a dropdown when you have many options (more than 5) or when you are\nconstrained for space. Otherwise, you can use RadioItems or a Checklist,\nwhich have the benefit of showing the users all of the items at once.\n \nDropdown.Attr \nAttr \nDropdown.Dropdown \nDropdown \nDropdown.DropdownValue \nDropdownValue \nDropdown.Prop \nProp \nDropdown.dropdown \ndropdown"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown.html#dropdown","title":"Dropdown.dropdown","content":"Dropdown.dropdown \ndropdown \n\nDropdown is an interactive dropdown element for selecting one or more\nitems.\nThe values and labels of the dropdown items are specified in the \u0060options\u0060\nproperty and the selected item(s) are specified with the \u0060value\u0060 property.\nUse a dropdown when you have many options (more than 5) or when you are\nconstrained for space. Otherwise, you can use RadioItems or a Checklist,\nwhich have the benefit of showing the users all of the items at once.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 options (list with values of type: record with the fields: \u0027label: string | number (required)\u0027, \u0027value: string | number (required)\u0027, \u0027disabled: boolean (optional)\u0027, \u0027title: string (optional)\u0027) - An array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option\n\n\n\u2022 value (string | number | list with values of type: string | number) - The value of the input. If \u0060multi\u0060 is false (the default)\nthen value is just a string that corresponds to the values\nprovided in the \u0060options\u0060 property. If \u0060multi\u0060 is true, then\nmultiple values can be selected at once, and \u0060value\u0060 is an\narray of items with values corresponding to those in the\n\u0060options\u0060 prop.\n\n\n\u2022 optionHeight (number; default 35) - height of each option. Can be increased when label lengths would wrap around\n\n\n\u2022 className (string) - className of the dropdown element\n\n\n\u2022 clearable (boolean; default true) - Whether or not the dropdown is \u0022clearable\u0022, that is, whether or\nnot a small \u0022x\u0022 appears on the right of the dropdown that removes\nthe selected value.\n\n\n\u2022 disabled (boolean; default false) - If true, this dropdown is disabled and the selection cannot be changed.\n\n\n\u2022 multi (boolean; default false) - If true, the user can select multiple values\n\n\n\u2022 placeholder (string) - The grey, default text shown when no option is selected\n\n\n\u2022 searchable (boolean; default true) - Whether to enable the searching feature or not\n\n\n\u2022 search_value (string) - The value typed in the DropDown for searching.\n\n\n\u2022 style (record) - Defines CSS styles which will override styles previously set.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.clearable \nclearable \nAttr.disabled \ndisabled \nAttr.loadingState \nloadingState \nAttr.multi \nmulti \nAttr.optionHeight \noptionHeight \nAttr.options \noptions \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.persistenceType \npersistenceType \nAttr.placeholder \nplaceholder \nAttr.searchValue \nsearchValue \nAttr.searchable \nsearchable \nAttr.style \nstyle \nAttr.value \nvalue \nAttr.value \nvalue \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nclassName of the dropdown element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#clearable","title":"Attr.clearable","content":"Attr.clearable \nclearable \n\nWhether or not the dropdown is \u0022clearable\u0022, that is, whether or\nnot a small \u0022x\u0022 appears on the right of the dropdown that removes\nthe selected value.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#disabled","title":"Attr.disabled","content":"Attr.disabled \ndisabled \n\nIf true, this dropdown is disabled and the selection cannot be changed.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#multi","title":"Attr.multi","content":"Attr.multi \nmulti \n\nIf true, the user can select multiple values\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#optionHeight","title":"Attr.optionHeight","content":"Attr.optionHeight \noptionHeight \n\nheight of each option. Can be increased when label lengths would wrap around\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#options","title":"Attr.options","content":"Attr.options \noptions \n\nAn array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#persistenceType","title":"Attr.persistenceType","content":"Attr.persistenceType \npersistenceType \n\nWhere persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#placeholder","title":"Attr.placeholder","content":"Attr.placeholder \nplaceholder \n\nThe grey, default text shown when no option is selected\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#searchValue","title":"Attr.searchValue","content":"Attr.searchValue \nsearchValue \n\nThe value typed in the DropDown for searching.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#searchable","title":"Attr.searchable","content":"Attr.searchable \nsearchable \n\nWhether to enable the searching feature or not\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nDefines CSS styles which will override styles previously set.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe value of the input. If \u0060multi\u0060 is false (the default)\nthen value is just a string that corresponds to the values\nprovided in the \u0060options\u0060 property. If \u0060multi\u0060 is true, then\nmultiple values can be selected at once, and \u0060value\u0060 is an\narray of items with values corresponding to those in the\n\u0060options\u0060 prop.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe value of the input. If \u0060multi\u0060 is false (the default)\nthen value is just a string that corresponds to the values\nprovided in the \u0060options\u0060 property. If \u0060multi\u0060 is true, then\nmultiple values can be selected at once, and \u0060value\u0060 is an\narray of items with values corresponding to those in the\n\u0060options\u0060 prop.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdown.html","title":"Dropdown","content":"Dropdown \n\nDropdown is an interactive dropdown element for selecting one or more\nitems.\nThe values and labels of the dropdown items are specified in the \u0060options\u0060\nproperty and the selected item(s) are specified with the \u0060value\u0060 property.\nUse a dropdown when you have many options (more than 5) or when you are\nconstrained for space. Otherwise, you can use RadioItems or a Checklist,\nwhich have the benefit of showing the users all of the items at once.\n \nDropdown.( .ctor ) \n( .ctor ) \nDropdown.applyMembers \napplyMembers \nDropdown.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdown.html#( .ctor )","title":"Dropdown.( .ctor )","content":"Dropdown.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdown.html#applyMembers","title":"Dropdown.applyMembers","content":"Dropdown.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdown.html#init","title":"Dropdown.init","content":"Dropdown.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdownvalue.html","title":"DropdownValue","content":"DropdownValue \n\nstring | number | list with values of type: string | number\n \nDropdownValue.convert \nconvert \nDropdownValue.SingleValue \nSingleValue \nDropdownValue.MultipleValues \nMultipleValues"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdownvalue.html#convert","title":"DropdownValue.convert","content":"DropdownValue.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdownvalue.html#SingleValue","title":"DropdownValue.SingleValue","content":"DropdownValue.SingleValue \nSingleValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-dropdownvalue.html#MultipleValues","title":"DropdownValue.MultipleValues","content":"DropdownValue.MultipleValues \nMultipleValues \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html","title":"Prop","content":"Prop \n\n\u2022 options (list with values of type: record with the fields: \u0027label: string | number (required)\u0027, \u0027value: string | number (required)\u0027, \u0027disabled: boolean (optional)\u0027, \u0027title: string (optional)\u0027) - An array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option\n\n\n\u2022 value (string | number | list with values of type: string | number) - The value of the input. If \u0060multi\u0060 is false (the default)\nthen value is just a string that corresponds to the values\nprovided in the \u0060options\u0060 property. If \u0060multi\u0060 is true, then\nmultiple values can be selected at once, and \u0060value\u0060 is an\narray of items with values corresponding to those in the\n\u0060options\u0060 prop.\n\n\n\u2022 optionHeight (number; default 35) - height of each option. Can be increased when label lengths would wrap around\n\n\n\u2022 className (string) - className of the dropdown element\n\n\n\u2022 clearable (boolean; default true) - Whether or not the dropdown is \u0022clearable\u0022, that is, whether or\nnot a small \u0022x\u0022 appears on the right of the dropdown that removes\nthe selected value.\n\n\n\u2022 disabled (boolean; default false) - If true, this dropdown is disabled and the selection cannot be changed.\n\n\n\u2022 multi (boolean; default false) - If true, the user can select multiple values\n\n\n\u2022 placeholder (string) - The grey, default text shown when no option is selected\n\n\n\u2022 searchable (boolean; default true) - Whether to enable the searching feature or not\n\n\n\u2022 search_value (string) - The value typed in the DropDown for searching.\n\n\n\u2022 style (record) - Defines CSS styles which will override styles previously set.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.ClassName \nClassName \nProp.Options \nOptions \nProp.Value \nValue \nProp.OptionHeight \nOptionHeight \nProp.Clearable \nClearable \nProp.Disabled \nDisabled \nProp.Multi \nMulti \nProp.Placeholder \nPlaceholder \nProp.Searchable \nSearchable \nProp.SearchValue \nSearchValue \nProp.Style \nStyle \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Options","title":"Prop.Options","content":"Prop.Options \nOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#OptionHeight","title":"Prop.OptionHeight","content":"Prop.OptionHeight \nOptionHeight \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Clearable","title":"Prop.Clearable","content":"Prop.Clearable \nClearable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Disabled","title":"Prop.Disabled","content":"Prop.Disabled \nDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Multi","title":"Prop.Multi","content":"Prop.Multi \nMulti \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Placeholder","title":"Prop.Placeholder","content":"Prop.Placeholder \nPlaceholder \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Searchable","title":"Prop.Searchable","content":"Prop.Searchable \nSearchable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#SearchValue","title":"Prop.SearchValue","content":"Prop.SearchValue \nSearchValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-dropdown-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph.html","title":"Graph","content":"Graph \n\nGraph can be used to render any plotly.js-powered data visualization.\nYou can define callbacks based on user interaction with Graphs such as\nhovering, clicking or selecting\n \nGraph.Attr \nAttr \nGraph.Graph \nGraph \nGraph.Prop \nProp \nGraph.graph \ngraph"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph.html#graph","title":"Graph.graph","content":"Graph.graph \ngraph \n\nGraph can be used to render any plotly.js-powered data visualization.\nYou can define callbacks based on user interaction with Graphs such as\nhovering, clicking or selecting\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 responsive (value equal to: \u0027true\u0027, \u0027false\u0027, \u0027auto\u0027; default auto) - If True, the Plotly.js plot will be fully responsive to window resize\nand parent element resize event. This is achieved by overriding\n\u0060config.responsive\u0060 to True, \u0060figure.layout.autosize\u0060 to True and unsetting\n\u0060figure.layout.height\u0060 and \u0060figure.layout.width\u0060.\nIf False, the Plotly.js plot not be responsive to window resize and\nparent element resize event. This is achieved by overriding \u0060config.responsive\u0060\nto False and \u0060figure.layout.autosize\u0060 to False.\nIf \u0027auto\u0027 (default), the Graph will determine if the Plotly.js plot can be made fully\nresponsive (True) or not (False) based on the values in \u0060config.responsive\u0060,\n\u0060figure.layout.autosize\u0060, \u0060figure.layout.height\u0060, \u0060figure.layout.width\u0060.\nThis is the legacy behavior of the Graph component.\nNeeds to be combined with appropriate dimension / styling through the \u0060style\u0060 prop\nto fully take effect.\n\n\n\u2022 clickData (record; default null) - Data from latest click event. Read-only.\n\n\n\u2022 clickAnnotationData (record; default null) - Data from latest click annotation event. Read-only.\n\n\n\u2022 hoverData (record; default null) - Data from latest hover event. Read-only.\n\n\n\u2022 clear_on_unhover (boolean; default false) - If True, \u0060clear_on_unhover\u0060 will clear the \u0060hoverData\u0060 property\nwhen the user \u0022unhovers\u0022 from a point.\nIf False, then the \u0060hoverData\u0060 property will be equal to the\ndata from the last point that was hovered over.\n\n\n\u2022 selectedData (record; default null) - Data from latest select event. Read-only.\n\n\n\u2022 relayoutData (record; default null) - Data from latest relayout event which occurs\nwhen the user zooms or pans on the plot or other\nlayout-level edits. Has the form \u0060{\u003Cattr string\u003E: \u003Cvalue\u003E}\u0060\ndescribing the changes made. Read-only.\n\n\n\u2022 extendData (list | record; default null) - Data that should be appended to existing traces. Has the form\n\u0060[updateData, traceIndices, maxPoints]\u0060, where \u0060updateData\u0060 is an object\ncontaining the data to extend, \u0060traceIndices\u0060 (optional) is an array of\ntrace indices that should be extended, and \u0060maxPoints\u0060 (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching \u0060updateData\u0060\nReference the Plotly.extendTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyextendtraces\n\n\n\u2022 prependData (list | record; default null) - Data that should be prepended to existing traces. Has the form\n\u0060[updateData, traceIndices, maxPoints]\u0060, where \u0060updateData\u0060 is an object\ncontaining the data to prepend, \u0060traceIndices\u0060 (optional) is an array of\ntrace indices that should be prepended, and \u0060maxPoints\u0060 (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching \u0060updateData\u0060\nReference the Plotly.prependTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyprependtraces\n\n\n\u2022 restyleData (list; default null) - Data from latest restyle event which occurs\nwhen the user toggles a legend item, changes\nparcoords selections, or other trace-level edits.\nHas the form \u0060[edits, indices]\u0060, where \u0060edits\u0060 is an object\n\u0060{\u003Cattr string\u003E: \u003Cvalue\u003E}\u0060 describing the changes made,\nand \u0060indices\u0060 is an array of trace indices that were edited.\nRead-only.\n\n\n\u2022 figure (record with the fields: \u0027data: list with values of type: record (optional)\u0027, \u0027layout: record (optional)\u0027, \u0027frames: list with values of type: record (optional)\u0027; default {\n    data: [],\n    layout: {},\n    frames: [],\n}) - Plotly \u0060figure\u0060 object. See schema:\nhttps://plotly.com/javascript/reference\n\u0060config\u0060 is set separately by the \u0060config\u0060 property\n\n\n\u2022 style (record) - Generic style overrides on the plot div\n\n\n\u2022 className (string) - className of the parent div\n\n\n\u2022 animate (boolean; default false) - Beta: If true, animate between updates using\nplotly.js\u0027s \u0060animate\u0060 function\n\n\n\u2022 animation_options (record; default {\n    frame: {\n        redraw: false,\n    },\n    transition: {\n        duration: 750,\n        ease: \u0027cubic-in-out\u0027,\n    },\n}) - Beta: Object containing animation settings.\nOnly applies if \u0060animate\u0060 is \u0060true\u0060\n\n\n\u2022 config (record with the fields: \u0027staticPlot: boolean (optional)\u0027, \u0027plotlyServerURL: string (optional)\u0027, \u0027editable: boolean (optional)\u0027, \u0027edits: record with the fields: \u0027annotationPosition: boolean (optional)\u0027, \u0027annotationTail: boolean (optional)\u0027, \u0027annotationText: boolean (optional)\u0027, \u0027axisTitleText: boolean (optional)\u0027, \u0027colorbarPosition: boolean (optional)\u0027, \u0027colorbarTitleText: boolean (optional)\u0027, \u0027legendPosition: boolean (optional)\u0027, \u0027legendText: boolean (optional)\u0027, \u0027shapePosition: boolean (optional)\u0027, \u0027titleText: boolean (optional)\u0027 (optional)\u0027, \u0027autosizable: boolean (optional)\u0027, \u0027responsive: boolean (optional)\u0027, \u0027queueLength: number (optional)\u0027, \u0027fillFrame: boolean (optional)\u0027, \u0027frameMargins: number (optional)\u0027, \u0027scrollZoom: boolean (optional)\u0027, \u0027doubleClick: value equal to: \u0027false\u0027, \u0027reset\u0027, \u0027autosize\u0027, \u0027reset\u002Bautosize\u0027 (optional)\u0027, \u0027doubleClickDelay: number (optional)\u0027, \u0027showTips: boolean (optional)\u0027, \u0027showAxisDragHandles: boolean (optional)\u0027, \u0027showAxisRangeEntryBoxes: boolean (optional)\u0027, \u0027showLink: boolean (optional)\u0027, \u0027sendData: boolean (optional)\u0027, \u0027linkText: string (optional)\u0027, \u0027displayModeBar: value equal to: \u0027true\u0027, \u0027false\u0027, \u0027hover\u0027 (optional)\u0027, \u0027showSendToCloud: boolean (optional)\u0027, \u0027showEditInChartStudio: boolean (optional)\u0027, \u0027modeBarButtonsToRemove: list (optional)\u0027, \u0027modeBarButtonsToAdd: list (optional)\u0027, \u0027modeBarButtons: boolean | number | string | record | list (optional)\u0027, \u0027toImageButtonOptions: record with the fields: \u0027format: value equal to: \u0027jpeg\u0027, \u0027png\u0027, \u0027webp\u0027, \u0027svg\u0027 (optional)\u0027, \u0027filename: string (optional)\u0027, \u0027width: number (optional)\u0027, \u0027height: number (optional)\u0027, \u0027scale: number (optional)\u0027 (optional)\u0027, \u0027displaylogo: boolean (optional)\u0027, \u0027watermark: boolean (optional)\u0027, \u0027plotGlPixelRatio: number (optional)\u0027, \u0027topojsonURL: string (optional)\u0027, \u0027mapboxAccessToken: boolean | number | string | record | list (optional)\u0027, \u0027locale: string (optional)\u0027, \u0027locales: record (optional)\u0027; default {}) - Plotly.js config options.\nSee https://plotly.com/javascript/configuration-options/\nfor more info.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.animate \nanimate \nAttr.animationOptions \nanimationOptions \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.clearOnUnhover \nclearOnUnhover \nAttr.clickAnnotationData \nclickAnnotationData \nAttr.clickData \nclickData \nAttr.config \nconfig \nAttr.extendData \nextendData \nAttr.figure \nfigure \nAttr.hoverData \nhoverData \nAttr.loadingState \nloadingState \nAttr.prependData \nprependData \nAttr.relayoutData \nrelayoutData \nAttr.restyleData \nrestyleData \nAttr.selectedData \nselectedData \nAttr.style \nstyle \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#animate","title":"Attr.animate","content":"Attr.animate \nanimate \n\nBeta: If true, animate between updates using\nplotly.js\u0027s \u0060animate\u0060 function\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#animationOptions","title":"Attr.animationOptions","content":"Attr.animationOptions \nanimationOptions \n\nBeta: Object containing animation settings.\nOnly applies if \u0060animate\u0060 is \u0060true\u0060\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nclassName of the parent div\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#clearOnUnhover","title":"Attr.clearOnUnhover","content":"Attr.clearOnUnhover \nclearOnUnhover \n\nIf True, \u0060clear_on_unhover\u0060 will clear the \u0060hoverData\u0060 property\nwhen the user \u0022unhovers\u0022 from a point.\nIf False, then the \u0060hoverData\u0060 property will be equal to the\ndata from the last point that was hovered over.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#clickAnnotationData","title":"Attr.clickAnnotationData","content":"Attr.clickAnnotationData \nclickAnnotationData \n\nData from latest click annotation event. Read-only.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#clickData","title":"Attr.clickData","content":"Attr.clickData \nclickData \n\nData from latest click event. Read-only.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#config","title":"Attr.config","content":"Attr.config \nconfig \n\nPlotly.js config options.\nSee https://plotly.com/javascript/configuration-options/\nfor more info.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#extendData","title":"Attr.extendData","content":"Attr.extendData \nextendData \n\nData that should be appended to existing traces. Has the form\n\u0060[updateData, traceIndices, maxPoints]\u0060, where \u0060updateData\u0060 is an object\ncontaining the data to extend, \u0060traceIndices\u0060 (optional) is an array of\ntrace indices that should be extended, and \u0060maxPoints\u0060 (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching \u0060updateData\u0060\nReference the Plotly.extendTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyextendtraces\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#figure","title":"Attr.figure","content":"Attr.figure \nfigure \n\nPlotly \u0060figure\u0060 object. See schema:\nhttps://plotly.com/javascript/reference\n\u0060config\u0060 is set separately by the \u0060config\u0060 property\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#hoverData","title":"Attr.hoverData","content":"Attr.hoverData \nhoverData \n\nData from latest hover event. Read-only.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#prependData","title":"Attr.prependData","content":"Attr.prependData \nprependData \n\nData that should be prepended to existing traces. Has the form\n\u0060[updateData, traceIndices, maxPoints]\u0060, where \u0060updateData\u0060 is an object\ncontaining the data to prepend, \u0060traceIndices\u0060 (optional) is an array of\ntrace indices that should be prepended, and \u0060maxPoints\u0060 (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching \u0060updateData\u0060\nReference the Plotly.prependTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyprependtraces\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#relayoutData","title":"Attr.relayoutData","content":"Attr.relayoutData \nrelayoutData \n\nData from latest relayout event which occurs\nwhen the user zooms or pans on the plot or other\nlayout-level edits. Has the form \u0060{\u003Cattr string\u003E: \u003Cvalue\u003E}\u0060\ndescribing the changes made. Read-only.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#restyleData","title":"Attr.restyleData","content":"Attr.restyleData \nrestyleData \n\nData from latest restyle event which occurs\nwhen the user toggles a legend item, changes\nparcoords selections, or other trace-level edits.\nHas the form \u0060[edits, indices]\u0060, where \u0060edits\u0060 is an object\n\u0060{\u003Cattr string\u003E: \u003Cvalue\u003E}\u0060 describing the changes made,\nand \u0060indices\u0060 is an array of trace indices that were edited.\nRead-only.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#selectedData","title":"Attr.selectedData","content":"Attr.selectedData \nselectedData \n\nData from latest select event. Read-only.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nGeneric style overrides on the plot div\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-graph.html","title":"Graph","content":"Graph \n\nGraph can be used to render any plotly.js-powered data visualization.\nYou can define callbacks based on user interaction with Graphs such as\nhovering, clicking or selecting\n \nGraph.( .ctor ) \n( .ctor ) \nGraph.applyMembers \napplyMembers \nGraph.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-graph.html#( .ctor )","title":"Graph.( .ctor )","content":"Graph.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-graph.html#applyMembers","title":"Graph.applyMembers","content":"Graph.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-graph.html#init","title":"Graph.init","content":"Graph.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html","title":"Prop","content":"Prop \n\n\u2022 responsive (value equal to: \u0027true\u0027, \u0027false\u0027, \u0027auto\u0027; default auto) - If True, the Plotly.js plot will be fully responsive to window resize\nand parent element resize event. This is achieved by overriding\n\u0060config.responsive\u0060 to True, \u0060figure.layout.autosize\u0060 to True and unsetting\n\u0060figure.layout.height\u0060 and \u0060figure.layout.width\u0060.\nIf False, the Plotly.js plot not be responsive to window resize and\nparent element resize event. This is achieved by overriding \u0060config.responsive\u0060\nto False and \u0060figure.layout.autosize\u0060 to False.\nIf \u0027auto\u0027 (default), the Graph will determine if the Plotly.js plot can be made fully\nresponsive (True) or not (False) based on the values in \u0060config.responsive\u0060,\n\u0060figure.layout.autosize\u0060, \u0060figure.layout.height\u0060, \u0060figure.layout.width\u0060.\nThis is the legacy behavior of the Graph component.\nNeeds to be combined with appropriate dimension / styling through the \u0060style\u0060 prop\nto fully take effect.\n\n\n\u2022 clickData (record; default null) - Data from latest click event. Read-only.\n\n\n\u2022 clickAnnotationData (record; default null) - Data from latest click annotation event. Read-only.\n\n\n\u2022 hoverData (record; default null) - Data from latest hover event. Read-only.\n\n\n\u2022 clear_on_unhover (boolean; default false) - If True, \u0060clear_on_unhover\u0060 will clear the \u0060hoverData\u0060 property\nwhen the user \u0022unhovers\u0022 from a point.\nIf False, then the \u0060hoverData\u0060 property will be equal to the\ndata from the last point that was hovered over.\n\n\n\u2022 selectedData (record; default null) - Data from latest select event. Read-only.\n\n\n\u2022 relayoutData (record; default null) - Data from latest relayout event which occurs\nwhen the user zooms or pans on the plot or other\nlayout-level edits. Has the form \u0060{\u003Cattr string\u003E: \u003Cvalue\u003E}\u0060\ndescribing the changes made. Read-only.\n\n\n\u2022 extendData (list | record; default null) - Data that should be appended to existing traces. Has the form\n\u0060[updateData, traceIndices, maxPoints]\u0060, where \u0060updateData\u0060 is an object\ncontaining the data to extend, \u0060traceIndices\u0060 (optional) is an array of\ntrace indices that should be extended, and \u0060maxPoints\u0060 (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching \u0060updateData\u0060\nReference the Plotly.extendTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyextendtraces\n\n\n\u2022 prependData (list | record; default null) - Data that should be prepended to existing traces. Has the form\n\u0060[updateData, traceIndices, maxPoints]\u0060, where \u0060updateData\u0060 is an object\ncontaining the data to prepend, \u0060traceIndices\u0060 (optional) is an array of\ntrace indices that should be prepended, and \u0060maxPoints\u0060 (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching \u0060updateData\u0060\nReference the Plotly.prependTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyprependtraces\n\n\n\u2022 restyleData (list; default null) - Data from latest restyle event which occurs\nwhen the user toggles a legend item, changes\nparcoords selections, or other trace-level edits.\nHas the form \u0060[edits, indices]\u0060, where \u0060edits\u0060 is an object\n\u0060{\u003Cattr string\u003E: \u003Cvalue\u003E}\u0060 describing the changes made,\nand \u0060indices\u0060 is an array of trace indices that were edited.\nRead-only.\n\n\n\u2022 figure (record with the fields: \u0027data: list with values of type: record (optional)\u0027, \u0027layout: record (optional)\u0027, \u0027frames: list with values of type: record (optional)\u0027; default {\n    data: [],\n    layout: {},\n    frames: [],\n}) - Plotly \u0060figure\u0060 object. See schema:\nhttps://plotly.com/javascript/reference\n\u0060config\u0060 is set separately by the \u0060config\u0060 property\n\n\n\u2022 style (record) - Generic style overrides on the plot div\n\n\n\u2022 className (string) - className of the parent div\n\n\n\u2022 animate (boolean; default false) - Beta: If true, animate between updates using\nplotly.js\u0027s \u0060animate\u0060 function\n\n\n\u2022 animation_options (record; default {\n    frame: {\n        redraw: false,\n    },\n    transition: {\n        duration: 750,\n        ease: \u0027cubic-in-out\u0027,\n    },\n}) - Beta: Object containing animation settings.\nOnly applies if \u0060animate\u0060 is \u0060true\u0060\n\n\n\u2022 config (record with the fields: \u0027staticPlot: boolean (optional)\u0027, \u0027plotlyServerURL: string (optional)\u0027, \u0027editable: boolean (optional)\u0027, \u0027edits: record with the fields: \u0027annotationPosition: boolean (optional)\u0027, \u0027annotationTail: boolean (optional)\u0027, \u0027annotationText: boolean (optional)\u0027, \u0027axisTitleText: boolean (optional)\u0027, \u0027colorbarPosition: boolean (optional)\u0027, \u0027colorbarTitleText: boolean (optional)\u0027, \u0027legendPosition: boolean (optional)\u0027, \u0027legendText: boolean (optional)\u0027, \u0027shapePosition: boolean (optional)\u0027, \u0027titleText: boolean (optional)\u0027 (optional)\u0027, \u0027autosizable: boolean (optional)\u0027, \u0027responsive: boolean (optional)\u0027, \u0027queueLength: number (optional)\u0027, \u0027fillFrame: boolean (optional)\u0027, \u0027frameMargins: number (optional)\u0027, \u0027scrollZoom: boolean (optional)\u0027, \u0027doubleClick: value equal to: \u0027false\u0027, \u0027reset\u0027, \u0027autosize\u0027, \u0027reset\u002Bautosize\u0027 (optional)\u0027, \u0027doubleClickDelay: number (optional)\u0027, \u0027showTips: boolean (optional)\u0027, \u0027showAxisDragHandles: boolean (optional)\u0027, \u0027showAxisRangeEntryBoxes: boolean (optional)\u0027, \u0027showLink: boolean (optional)\u0027, \u0027sendData: boolean (optional)\u0027, \u0027linkText: string (optional)\u0027, \u0027displayModeBar: value equal to: \u0027true\u0027, \u0027false\u0027, \u0027hover\u0027 (optional)\u0027, \u0027showSendToCloud: boolean (optional)\u0027, \u0027showEditInChartStudio: boolean (optional)\u0027, \u0027modeBarButtonsToRemove: list (optional)\u0027, \u0027modeBarButtonsToAdd: list (optional)\u0027, \u0027modeBarButtons: boolean | number | string | record | list (optional)\u0027, \u0027toImageButtonOptions: record with the fields: \u0027format: value equal to: \u0027jpeg\u0027, \u0027png\u0027, \u0027webp\u0027, \u0027svg\u0027 (optional)\u0027, \u0027filename: string (optional)\u0027, \u0027width: number (optional)\u0027, \u0027height: number (optional)\u0027, \u0027scale: number (optional)\u0027 (optional)\u0027, \u0027displaylogo: boolean (optional)\u0027, \u0027watermark: boolean (optional)\u0027, \u0027plotGlPixelRatio: number (optional)\u0027, \u0027topojsonURL: string (optional)\u0027, \u0027mapboxAccessToken: boolean | number | string | record | list (optional)\u0027, \u0027locale: string (optional)\u0027, \u0027locales: record (optional)\u0027; default {}) - Plotly.js config options.\nSee https://plotly.com/javascript/configuration-options/\nfor more info.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.Figure \nFigure \nProp.Config \nConfig \nProp.ClickData \nClickData \nProp.ClickAnnotationData \nClickAnnotationData \nProp.HoverData \nHoverData \nProp.ClearOnUnhover \nClearOnUnhover \nProp.SelectedData \nSelectedData \nProp.RelayoutData \nRelayoutData \nProp.ExtendData \nExtendData \nProp.PrependData \nPrependData \nProp.RestyleData \nRestyleData \nProp.Style \nStyle \nProp.ClassName \nClassName \nProp.Animate \nAnimate \nProp.AnimationOptions \nAnimationOptions \nProp.LoadingState \nLoadingState"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#Figure","title":"Prop.Figure","content":"Prop.Figure \nFigure \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#Config","title":"Prop.Config","content":"Prop.Config \nConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#ClickData","title":"Prop.ClickData","content":"Prop.ClickData \nClickData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#ClickAnnotationData","title":"Prop.ClickAnnotationData","content":"Prop.ClickAnnotationData \nClickAnnotationData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#HoverData","title":"Prop.HoverData","content":"Prop.HoverData \nHoverData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#ClearOnUnhover","title":"Prop.ClearOnUnhover","content":"Prop.ClearOnUnhover \nClearOnUnhover \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#SelectedData","title":"Prop.SelectedData","content":"Prop.SelectedData \nSelectedData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#RelayoutData","title":"Prop.RelayoutData","content":"Prop.RelayoutData \nRelayoutData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#ExtendData","title":"Prop.ExtendData","content":"Prop.ExtendData \nExtendData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#PrependData","title":"Prop.PrependData","content":"Prop.PrependData \nPrependData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#RestyleData","title":"Prop.RestyleData","content":"Prop.RestyleData \nRestyleData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#Animate","title":"Prop.Animate","content":"Prop.Animate \nAnimate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#AnimationOptions","title":"Prop.AnimationOptions","content":"Prop.AnimationOptions \nAnimationOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-graph-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input.html","title":"Input","content":"Input \n\nA basic HTML input control for entering text, numbers, or passwords.\nNote that checkbox and radio types are supported through\nthe Checklist and RadioItems component. Dates, times, and file uploads\nare also supported through separate components.\n \nInput.Attr \nAttr \nInput.Input \nInput \nInput.Prop \nProp \nInput.input \ninput"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input.html#input","title":"Input.input","content":"Input.input \ninput \n\nA basic HTML input control for entering text, numbers, or passwords.\nNote that checkbox and radio types are supported through\nthe Checklist and RadioItems component. Dates, times, and file uploads\nare also supported through separate components.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 value (string | number) - The value of the input\n\n\n\u2022 style (record) - The input\u0027s inline styles\n\n\n\u2022 className (string) - The class of the input element\n\n\n\u2022 debounce (boolean; default false) - If true, changes to input will be sent back to the Dash server only on enter or when losing focus.\nIf it\u0027s false, it will sent the value back on every change.\n\n\n\u2022 type (value equal to: \u0027text\u0027, \u0027number\u0027, \u0027password\u0027, \u0027email\u0027, \u0027range\u0027, \u0027search\u0027, \u0027tel\u0027, \u0027url\u0027, \u0027hidden\u0027; default text) - The type of control to render.\n\n\n\u2022 autoComplete (string) - This attribute indicates whether the value of the control can be automatically completed by the browser.\n\n\n\u2022 autoFocus (value equal to: \u0027autoFocus\u0027, \u0027autofocus\u0027, \u0027AUTOFOCUS\u0027 | boolean) - The element should be automatically focused after the page loaded.\nautoFocus is an HTML boolean attribute - it is enabled by a boolean or\n\u0027autoFocus\u0027. Alternative capitalizations \u0060autofocus\u0060 \u0026 \u0060AUTOFOCUS\u0060\nare also acccepted.\n\n\n\u2022 disabled (value equal to: \u0027disabled\u0027, \u0027DISABLED\u0027 | boolean) - If true, the input is disabled and can\u0027t be clicked on.\ndisabled is an HTML boolean attribute - it is enabled by a boolean or\n\u0027disabled\u0027. Alternative capitalizations \u0060DISABLED\u0060\n\n\n\u2022 inputMode (value equal to: \u0027verbatim\u0027, \u0027latin\u0027, \u0027latin-name\u0027, \u0027latin-prose\u0027, \u0027full-width-latin\u0027, \u0027kana\u0027, \u0027katakana\u0027, \u0027numeric\u0027, \u0027tel\u0027, \u0027email\u0027, \u0027url\u0027) - Provides a hint to the browser as to the type of data that might be\nentered by the user while editing the element or its contents.\n\n\n\u2022 list (string) - Identifies a list of pre-defined options to suggest to the user.\nThe value must be the id of a \u003Cdatalist\u003E element in the same document.\nThe browser displays only options that are valid values for this\ninput element.\nThis attribute is ignored when the type attribute\u0027s value is\nhidden, checkbox, radio, file, or a button type.\n\n\n\u2022 max (string | number) - The maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value.\n\n\n\u2022 maxLength (string | number) - If the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the maximum number of characters (in UTF-16 code units) that the user can enter. For other control types, it is ignored. It can exceed the value of the size attribute. If it is not specified, the user can enter an unlimited number of characters. Specifying a negative number results in the default behavior (i.e. the user can enter an unlimited number of characters). The constraint is evaluated only when the value of the attribute has been changed.\n\n\n\u2022 min (string | number) - The minimum (numeric or date-time) value for this item, which must not be greater than its maximum (max attribute) value.\n\n\n\u2022 minLength (string | number) - If the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the minimum number of characters (in Unicode code points) that the user can enter. For other control types, it is ignored.\n\n\n\u2022 multiple (boolean) - This Boolean attribute indicates whether the user can enter more than one value. This attribute applies when the type attribute is set to email or file, otherwise it is ignored.\n\n\n\u2022 name (string) - The name of the control, which is submitted with the form data.\n\n\n\u2022 pattern (string) - A regular expression that the control\u0027s value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is text, search, tel, url, email, or password, otherwise it is ignored. The regular expression language is the same as JavaScript RegExp algorithm, with the \u0027u\u0027 parameter that makes it treat the pattern as a sequence of unicode code points. The pattern is not surrounded by forward slashes.\n\n\n\u2022 placeholder (string | number) - A hint to the user of what can be entered in the control . The placeholder text must not contain carriage returns or line-feeds. Note: Do not use the placeholder attribute instead of a \u003Clabel\u003E element, their purposes are different. The \u003Clabel\u003E attribute describes the role of the form element (i.e. it indicates what kind of information is expected), and the placeholder attribute is a hint about the format that the content should take. There are cases in which the placeholder attribute is never displayed to the user, so the form must be understandable without it.\n\n\n\u2022 readOnly (boolean | value equal to: \u0027readOnly\u0027, \u0027readonly\u0027, \u0027READONLY\u0027) - This attribute indicates that the user cannot modify the value of the control. The value of the attribute is irrelevant. If you need read-write access to the input value, do not add the \u0022readonly\u0022 attribute. It is ignored if the value of the type attribute is hidden, range, color, checkbox, radio, file, or a button type (such as button or submit).\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or\n\u0027readOnly\u0027. Alternative capitalizations \u0060readonly\u0060 \u0026 \u0060READONLY\u0060\nare also acccepted.\n\n\n\u2022 required (value equal to: \u0027required\u0027, \u0027REQUIRED\u0027 | boolean) - This attribute specifies that the user must fill in a value before submitting a form. It cannot be used when the type attribute is hidden, image, or a button type (submit, reset, or button). The :optional and :required CSS pseudo-classes will be applied to the field as appropriate.\nrequired is an HTML boolean attribute - it is enabled by a boolean or\n\u0027required\u0027. Alternative capitalizations \u0060REQUIRED\u0060\nare also acccepted.\n\n\n\u2022 selectionDirection (string) - The direction in which selection occurred. This is \u0022forward\u0022 if the selection was made from left-to-right in an LTR locale or right-to-left in an RTL locale, or \u0022backward\u0022 if the selection was made in the opposite direction. On platforms on which it\u0027s possible this value isn\u0027t known, the value can be \u0022none\u0022; for example, on macOS, the default direction is \u0022none\u0022, then as the user begins to modify the selection using the keyboard, this will change to reflect the direction in which the selection is expanding.\n\n\n\u2022 selectionEnd (string) - The offset into the element\u0027s text content of the last selected character. If there\u0027s no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\n\n\n\u2022 selectionStart (string) - The offset into the element\u0027s text content of the first selected character. If there\u0027s no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\n\n\n\u2022 size (string) - The initial size of the control. This value is in pixels unless the value of the type attribute is text or password, in which case it is an integer number of characters. Starting in, this attribute applies only when the type attribute is set to text, search, tel, url, email, or password, otherwise it is ignored. In addition, the size must be greater than zero. If you do not specify a size, a default value of 20 is used.\u0027 simply states \u0022the user agent should ensure that at least that many characters are visible\u0022, but different characters can have different widths in certain fonts. In some browsers, a certain string with x characters will not be entirely visible even if size is defined to at least x.\n\n\n\u2022 spellCheck (value equal to: \u0027true\u0027, \u0027false\u0027 | boolean) - Setting the value of this attribute to true indicates that the element needs to have its spelling and grammar checked. The value default indicates that the element is to act according to a default behavior, possibly based on the parent element\u0027s own spellcheck value. The value false indicates that the element should not be checked.\n\n\n\u2022 step (string | number; default any) - Works with the min and max attributes to limit the increments at which a numeric or date-time value can be set. It can be the string any or a positive floating point number. If this attribute is not set to any, the control accepts only values at multiples of the step value greater than the minimum.\n\n\n\u2022 n_submit (number; default 0) - Number of times the \u0060Enter\u0060 key was pressed while the input had focus.\n\n\n\u2022 n_submit_timestamp (number; default -1) - Last time that \u0060Enter\u0060 was pressed.\n\n\n\u2022 n_blur (number; default 0) - Number of times the input lost focus.\n\n\n\u2022 n_blur_timestamp (number; default -1) - Last time the input lost focus.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.autoComplete \nautoComplete \nAttr.autoFocus \nautoFocus \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.debounce \ndebounce \nAttr.disabled \ndisabled \nAttr.inputType \ninputType \nAttr.list \nlist \nAttr.loadingState \nloadingState \nAttr.max \nmax \nAttr.maxLength \nmaxLength \nAttr.min \nmin \nAttr.minLength \nminLength \nAttr.mode \nmode \nAttr.multiple \nmultiple \nAttr.nBlur \nnBlur \nAttr.nBlurTimestamp \nnBlurTimestamp \nAttr.nSubmit \nnSubmit \nAttr.nSubmitTimestamp \nnSubmitTimestamp \nAttr.name \nname \nAttr.pattern \npattern \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.persistenceType \npersistenceType \nAttr.placeholder \nplaceholder \nAttr.readOnly \nreadOnly \nAttr.required \nrequired \nAttr.selectionDirection \nselectionDirection \nAttr.selectionEnd \nselectionEnd \nAttr.selectionStart \nselectionStart \nAttr.size \nsize \nAttr.spellCheck \nspellCheck \nAttr.step \nstep \nAttr.style \nstyle \nAttr.value \nvalue \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#autoComplete","title":"Attr.autoComplete","content":"Attr.autoComplete \nautoComplete \n\nThis attribute indicates whether the value of the control can be automatically completed by the browser.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#autoFocus","title":"Attr.autoFocus","content":"Attr.autoFocus \nautoFocus \n\nThe element should be automatically focused after the page loaded.\nautoFocus is an HTML boolean attribute - it is enabled by a boolean or\n\u0027autoFocus\u0027. Alternative capitalizations \u0060autofocus\u0060 \u0026 \u0060AUTOFOCUS\u0060\nare also acccepted.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nThe class of the input element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#debounce","title":"Attr.debounce","content":"Attr.debounce \ndebounce \n\nIf true, changes to input will be sent back to the Dash server only on enter or when losing focus.\nIf it\u0027s false, it will sent the value back on every change.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#disabled","title":"Attr.disabled","content":"Attr.disabled \ndisabled \n\nIf true, the input is disabled and can\u0027t be clicked on.\ndisabled is an HTML boolean attribute - it is enabled by a boolean or\n\u0027disabled\u0027. Alternative capitalizations \u0060DISABLED\u0060\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#inputType","title":"Attr.inputType","content":"Attr.inputType \ninputType \n\nThe type of control to render.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#list","title":"Attr.list","content":"Attr.list \nlist \n\nIdentifies a list of pre-defined options to suggest to the user.\nThe value must be the id of a \u003Cdatalist\u003E element in the same document.\nThe browser displays only options that are valid values for this\ninput element.\nThis attribute is ignored when the type attribute\u0027s value is\nhidden, checkbox, radio, file, or a button type.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#max","title":"Attr.max","content":"Attr.max \nmax \n\nThe maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#maxLength","title":"Attr.maxLength","content":"Attr.maxLength \nmaxLength \n\nIf the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the maximum number of characters (in UTF-16 code units) that the user can enter. For other control types, it is ignored. It can exceed the value of the size attribute. If it is not specified, the user can enter an unlimited number of characters. Specifying a negative number results in the default behavior (i.e. the user can enter an unlimited number of characters). The constraint is evaluated only when the value of the attribute has been changed.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#min","title":"Attr.min","content":"Attr.min \nmin \n\nThe minimum (numeric or date-time) value for this item, which must not be greater than its maximum (max attribute) value.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#minLength","title":"Attr.minLength","content":"Attr.minLength \nminLength \n\nIf the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the minimum number of characters (in Unicode code points) that the user can enter. For other control types, it is ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#mode","title":"Attr.mode","content":"Attr.mode \nmode \n\nProvides a hint to the browser as to the type of data that might be\nentered by the user while editing the element or its contents.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#multiple","title":"Attr.multiple","content":"Attr.multiple \nmultiple \n\nThis Boolean attribute indicates whether the user can enter more than one value. This attribute applies when the type attribute is set to email or file, otherwise it is ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#nBlur","title":"Attr.nBlur","content":"Attr.nBlur \nnBlur \n\nNumber of times the input lost focus.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#nBlurTimestamp","title":"Attr.nBlurTimestamp","content":"Attr.nBlurTimestamp \nnBlurTimestamp \n\nLast time the input lost focus.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#nSubmit","title":"Attr.nSubmit","content":"Attr.nSubmit \nnSubmit \n\nNumber of times the \u0060Enter\u0060 key was pressed while the input had focus.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#nSubmitTimestamp","title":"Attr.nSubmitTimestamp","content":"Attr.nSubmitTimestamp \nnSubmitTimestamp \n\nLast time that \u0060Enter\u0060 was pressed.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#name","title":"Attr.name","content":"Attr.name \nname \n\nThe name of the control, which is submitted with the form data.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#pattern","title":"Attr.pattern","content":"Attr.pattern \npattern \n\nA regular expression that the control\u0027s value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is text, search, tel, url, email, or password, otherwise it is ignored. The regular expression language is the same as JavaScript RegExp algorithm, with the \u0027u\u0027 parameter that makes it treat the pattern as a sequence of unicode code points. The pattern is not surrounded by forward slashes.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#persistenceType","title":"Attr.persistenceType","content":"Attr.persistenceType \npersistenceType \n\nWhere persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#placeholder","title":"Attr.placeholder","content":"Attr.placeholder \nplaceholder \n\nA hint to the user of what can be entered in the control . The placeholder text must not contain carriage returns or line-feeds. Note: Do not use the placeholder attribute instead of a \u003Clabel\u003E element, their purposes are different. The \u003Clabel\u003E attribute describes the role of the form element (i.e. it indicates what kind of information is expected), and the placeholder attribute is a hint about the format that the content should take. There are cases in which the placeholder attribute is never displayed to the user, so the form must be understandable without it.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#readOnly","title":"Attr.readOnly","content":"Attr.readOnly \nreadOnly \n\nThis attribute indicates that the user cannot modify the value of the control. The value of the attribute is irrelevant. If you need read-write access to the input value, do not add the \u0022readonly\u0022 attribute. It is ignored if the value of the type attribute is hidden, range, color, checkbox, radio, file, or a button type (such as button or submit).\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or\n\u0027readOnly\u0027. Alternative capitalizations \u0060readonly\u0060 \u0026 \u0060READONLY\u0060\nare also acccepted.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#required","title":"Attr.required","content":"Attr.required \nrequired \n\nThis attribute specifies that the user must fill in a value before submitting a form. It cannot be used when the type attribute is hidden, image, or a button type (submit, reset, or button). The :optional and :required CSS pseudo-classes will be applied to the field as appropriate.\nrequired is an HTML boolean attribute - it is enabled by a boolean or\n\u0027required\u0027. Alternative capitalizations \u0060REQUIRED\u0060\nare also acccepted.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#selectionDirection","title":"Attr.selectionDirection","content":"Attr.selectionDirection \nselectionDirection \n\nThe direction in which selection occurred. This is \u0022forward\u0022 if the selection was made from left-to-right in an LTR locale or right-to-left in an RTL locale, or \u0022backward\u0022 if the selection was made in the opposite direction. On platforms on which it\u0027s possible this value isn\u0027t known, the value can be \u0022none\u0022; for example, on macOS, the default direction is \u0022none\u0022, then as the user begins to modify the selection using the keyboard, this will change to reflect the direction in which the selection is expanding.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#selectionEnd","title":"Attr.selectionEnd","content":"Attr.selectionEnd \nselectionEnd \n\nThe offset into the element\u0027s text content of the last selected character. If there\u0027s no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#selectionStart","title":"Attr.selectionStart","content":"Attr.selectionStart \nselectionStart \n\nThe offset into the element\u0027s text content of the first selected character. If there\u0027s no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#size","title":"Attr.size","content":"Attr.size \nsize \n\nThe initial size of the control. This value is in pixels unless the value of the type attribute is text or password, in which case it is an integer number of characters. Starting in, this attribute applies only when the type attribute is set to text, search, tel, url, email, or password, otherwise it is ignored. In addition, the size must be greater than zero. If you do not specify a size, a default value of 20 is used.\u0027 simply states \u0022the user agent should ensure that at least that many characters are visible\u0022, but different characters can have different widths in certain fonts. In some browsers, a certain string with x characters will not be entirely visible even if size is defined to at least x.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#spellCheck","title":"Attr.spellCheck","content":"Attr.spellCheck \nspellCheck \n\nSetting the value of this attribute to true indicates that the element needs to have its spelling and grammar checked. The value default indicates that the element is to act according to a default behavior, possibly based on the parent element\u0027s own spellcheck value. The value false indicates that the element should not be checked.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#step","title":"Attr.step","content":"Attr.step \nstep \n\nWorks with the min and max attributes to limit the increments at which a numeric or date-time value can be set. It can be the string any or a positive floating point number. If this attribute is not set to any, the control accepts only values at multiples of the step value greater than the minimum.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nThe input\u0027s inline styles\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe value of the input\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-input.html","title":"Input","content":"Input \n\nA basic HTML input control for entering text, numbers, or passwords.\nNote that checkbox and radio types are supported through\nthe Checklist and RadioItems component. Dates, times, and file uploads\nare also supported through separate components.\n \nInput.( .ctor ) \n( .ctor ) \nInput.applyMembers \napplyMembers \nInput.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-input.html#( .ctor )","title":"Input.( .ctor )","content":"Input.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-input.html#applyMembers","title":"Input.applyMembers","content":"Input.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-input.html#init","title":"Input.init","content":"Input.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html","title":"Prop","content":"Prop \n\n\u2022 value (string | number) - The value of the input\n\n\n\u2022 style (record) - The input\u0027s inline styles\n\n\n\u2022 className (string) - The class of the input element\n\n\n\u2022 debounce (boolean; default false) - If true, changes to input will be sent back to the Dash server only on enter or when losing focus.\nIf it\u0027s false, it will sent the value back on every change.\n\n\n\u2022 type (value equal to: \u0027text\u0027, \u0027number\u0027, \u0027password\u0027, \u0027email\u0027, \u0027range\u0027, \u0027search\u0027, \u0027tel\u0027, \u0027url\u0027, \u0027hidden\u0027; default text) - The type of control to render.\n\n\n\u2022 autoComplete (string) - This attribute indicates whether the value of the control can be automatically completed by the browser.\n\n\n\u2022 autoFocus (value equal to: \u0027autoFocus\u0027, \u0027autofocus\u0027, \u0027AUTOFOCUS\u0027 | boolean) - The element should be automatically focused after the page loaded.\nautoFocus is an HTML boolean attribute - it is enabled by a boolean or\n\u0027autoFocus\u0027. Alternative capitalizations \u0060autofocus\u0060 \u0026 \u0060AUTOFOCUS\u0060\nare also acccepted.\n\n\n\u2022 disabled (value equal to: \u0027disabled\u0027, \u0027DISABLED\u0027 | boolean) - If true, the input is disabled and can\u0027t be clicked on.\ndisabled is an HTML boolean attribute - it is enabled by a boolean or\n\u0027disabled\u0027. Alternative capitalizations \u0060DISABLED\u0060\n\n\n\u2022 inputMode (value equal to: \u0027verbatim\u0027, \u0027latin\u0027, \u0027latin-name\u0027, \u0027latin-prose\u0027, \u0027full-width-latin\u0027, \u0027kana\u0027, \u0027katakana\u0027, \u0027numeric\u0027, \u0027tel\u0027, \u0027email\u0027, \u0027url\u0027) - Provides a hint to the browser as to the type of data that might be\nentered by the user while editing the element or its contents.\n\n\n\u2022 list (string) - Identifies a list of pre-defined options to suggest to the user.\nThe value must be the id of a \u003Cdatalist\u003E element in the same document.\nThe browser displays only options that are valid values for this\ninput element.\nThis attribute is ignored when the type attribute\u0027s value is\nhidden, checkbox, radio, file, or a button type.\n\n\n\u2022 max (string | number) - The maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value.\n\n\n\u2022 maxLength (string | number) - If the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the maximum number of characters (in UTF-16 code units) that the user can enter. For other control types, it is ignored. It can exceed the value of the size attribute. If it is not specified, the user can enter an unlimited number of characters. Specifying a negative number results in the default behavior (i.e. the user can enter an unlimited number of characters). The constraint is evaluated only when the value of the attribute has been changed.\n\n\n\u2022 min (string | number) - The minimum (numeric or date-time) value for this item, which must not be greater than its maximum (max attribute) value.\n\n\n\u2022 minLength (string | number) - If the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the minimum number of characters (in Unicode code points) that the user can enter. For other control types, it is ignored.\n\n\n\u2022 multiple (boolean) - This Boolean attribute indicates whether the user can enter more than one value. This attribute applies when the type attribute is set to email or file, otherwise it is ignored.\n\n\n\u2022 name (string) - The name of the control, which is submitted with the form data.\n\n\n\u2022 pattern (string) - A regular expression that the control\u0027s value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is text, search, tel, url, email, or password, otherwise it is ignored. The regular expression language is the same as JavaScript RegExp algorithm, with the \u0027u\u0027 parameter that makes it treat the pattern as a sequence of unicode code points. The pattern is not surrounded by forward slashes.\n\n\n\u2022 placeholder (string | number) - A hint to the user of what can be entered in the control . The placeholder text must not contain carriage returns or line-feeds. Note: Do not use the placeholder attribute instead of a \u003Clabel\u003E element, their purposes are different. The \u003Clabel\u003E attribute describes the role of the form element (i.e. it indicates what kind of information is expected), and the placeholder attribute is a hint about the format that the content should take. There are cases in which the placeholder attribute is never displayed to the user, so the form must be understandable without it.\n\n\n\u2022 readOnly (boolean | value equal to: \u0027readOnly\u0027, \u0027readonly\u0027, \u0027READONLY\u0027) - This attribute indicates that the user cannot modify the value of the control. The value of the attribute is irrelevant. If you need read-write access to the input value, do not add the \u0022readonly\u0022 attribute. It is ignored if the value of the type attribute is hidden, range, color, checkbox, radio, file, or a button type (such as button or submit).\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or\n\u0027readOnly\u0027. Alternative capitalizations \u0060readonly\u0060 \u0026 \u0060READONLY\u0060\nare also acccepted.\n\n\n\u2022 required (value equal to: \u0027required\u0027, \u0027REQUIRED\u0027 | boolean) - This attribute specifies that the user must fill in a value before submitting a form. It cannot be used when the type attribute is hidden, image, or a button type (submit, reset, or button). The :optional and :required CSS pseudo-classes will be applied to the field as appropriate.\nrequired is an HTML boolean attribute - it is enabled by a boolean or\n\u0027required\u0027. Alternative capitalizations \u0060REQUIRED\u0060\nare also acccepted.\n\n\n\u2022 selectionDirection (string) - The direction in which selection occurred. This is \u0022forward\u0022 if the selection was made from left-to-right in an LTR locale or right-to-left in an RTL locale, or \u0022backward\u0022 if the selection was made in the opposite direction. On platforms on which it\u0027s possible this value isn\u0027t known, the value can be \u0022none\u0022; for example, on macOS, the default direction is \u0022none\u0022, then as the user begins to modify the selection using the keyboard, this will change to reflect the direction in which the selection is expanding.\n\n\n\u2022 selectionEnd (string) - The offset into the element\u0027s text content of the last selected character. If there\u0027s no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\n\n\n\u2022 selectionStart (string) - The offset into the element\u0027s text content of the first selected character. If there\u0027s no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\n\n\n\u2022 size (string) - The initial size of the control. This value is in pixels unless the value of the type attribute is text or password, in which case it is an integer number of characters. Starting in, this attribute applies only when the type attribute is set to text, search, tel, url, email, or password, otherwise it is ignored. In addition, the size must be greater than zero. If you do not specify a size, a default value of 20 is used.\u0027 simply states \u0022the user agent should ensure that at least that many characters are visible\u0022, but different characters can have different widths in certain fonts. In some browsers, a certain string with x characters will not be entirely visible even if size is defined to at least x.\n\n\n\u2022 spellCheck (value equal to: \u0027true\u0027, \u0027false\u0027 | boolean) - Setting the value of this attribute to true indicates that the element needs to have its spelling and grammar checked. The value default indicates that the element is to act according to a default behavior, possibly based on the parent element\u0027s own spellcheck value. The value false indicates that the element should not be checked.\n\n\n\u2022 step (string | number; default any) - Works with the min and max attributes to limit the increments at which a numeric or date-time value can be set. It can be the string any or a positive floating point number. If this attribute is not set to any, the control accepts only values at multiples of the step value greater than the minimum.\n\n\n\u2022 n_submit (number; default 0) - Number of times the \u0060Enter\u0060 key was pressed while the input had focus.\n\n\n\u2022 n_submit_timestamp (number; default -1) - Last time that \u0060Enter\u0060 was pressed.\n\n\n\u2022 n_blur (number; default 0) - Number of times the input lost focus.\n\n\n\u2022 n_blur_timestamp (number; default -1) - Last time the input lost focus.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.Value \nValue \nProp.Style \nStyle \nProp.ClassName \nClassName \nProp.Debounce \nDebounce \nProp.Type \nType \nProp.AutoComplete \nAutoComplete \nProp.AutoFocus \nAutoFocus \nProp.Disabled \nDisabled \nProp.Mode \nMode \nProp.List \nList \nProp.Max \nMax \nProp.MaxLength \nMaxLength \nProp.Min \nMin \nProp.MinLength \nMinLength \nProp.Multiple \nMultiple \nProp.Name \nName \nProp.Pattern \nPattern \nProp.Placeholder \nPlaceholder \nProp.ReadOnly \nReadOnly \nProp.Required \nRequired \nProp.SelectionDirection \nSelectionDirection \nProp.SelectionEnd \nSelectionEnd \nProp.SelectionStart \nSelectionStart \nProp.Size \nSize \nProp.Spellcheck \nSpellcheck \nProp.Step \nStep \nProp.NSubmit \nNSubmit \nProp.NSubmitTimestamp \nNSubmitTimestamp \nProp.NBlur \nNBlur \nProp.NBlurTimestamp \nNBlurTimestamp \nProp.SetProps \nSetProps \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Debounce","title":"Prop.Debounce","content":"Prop.Debounce \nDebounce \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Type","title":"Prop.Type","content":"Prop.Type \nType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#AutoComplete","title":"Prop.AutoComplete","content":"Prop.AutoComplete \nAutoComplete \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#AutoFocus","title":"Prop.AutoFocus","content":"Prop.AutoFocus \nAutoFocus \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Disabled","title":"Prop.Disabled","content":"Prop.Disabled \nDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Mode","title":"Prop.Mode","content":"Prop.Mode \nMode \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#List","title":"Prop.List","content":"Prop.List \nList \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Max","title":"Prop.Max","content":"Prop.Max \nMax \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#MaxLength","title":"Prop.MaxLength","content":"Prop.MaxLength \nMaxLength \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Min","title":"Prop.Min","content":"Prop.Min \nMin \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#MinLength","title":"Prop.MinLength","content":"Prop.MinLength \nMinLength \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Multiple","title":"Prop.Multiple","content":"Prop.Multiple \nMultiple \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Name","title":"Prop.Name","content":"Prop.Name \nName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Pattern","title":"Prop.Pattern","content":"Prop.Pattern \nPattern \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Placeholder","title":"Prop.Placeholder","content":"Prop.Placeholder \nPlaceholder \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#ReadOnly","title":"Prop.ReadOnly","content":"Prop.ReadOnly \nReadOnly \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Required","title":"Prop.Required","content":"Prop.Required \nRequired \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#SelectionDirection","title":"Prop.SelectionDirection","content":"Prop.SelectionDirection \nSelectionDirection \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#SelectionEnd","title":"Prop.SelectionEnd","content":"Prop.SelectionEnd \nSelectionEnd \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#SelectionStart","title":"Prop.SelectionStart","content":"Prop.SelectionStart \nSelectionStart \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Size","title":"Prop.Size","content":"Prop.Size \nSize \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Spellcheck","title":"Prop.Spellcheck","content":"Prop.Spellcheck \nSpellcheck \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Step","title":"Prop.Step","content":"Prop.Step \nStep \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#NSubmit","title":"Prop.NSubmit","content":"Prop.NSubmit \nNSubmit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#NSubmitTimestamp","title":"Prop.NSubmitTimestamp","content":"Prop.NSubmitTimestamp \nNSubmitTimestamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#NBlur","title":"Prop.NBlur","content":"Prop.NBlur \nNBlur \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#NBlurTimestamp","title":"Prop.NBlurTimestamp","content":"Prop.NBlurTimestamp \nNBlurTimestamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#SetProps","title":"Prop.SetProps","content":"Prop.SetProps \nSetProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-input-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval.html","title":"Interval","content":"Interval \n\nA component that repeatedly increments a counter \u0060n_intervals\u0060\nwith a fixed time delay between each increment.\nInterval is good for triggering a component on a recurring basis.\nThe time delay is set with the property \u0022interval\u0022 in milliseconds.\n \nInterval.Attr \nAttr \nInterval.Interval \nInterval \nInterval.Prop \nProp \nInterval.interval \ninterval"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval.html#interval","title":"Interval.interval","content":"Interval.interval \ninterval \n\nA component that repeatedly increments a counter \u0060n_intervals\u0060\nwith a fixed time delay between each increment.\nInterval is good for triggering a component on a recurring basis.\nThe time delay is set with the property \u0022interval\u0022 in milliseconds.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 interval (number; default 1000) - This component will increment the counter \u0060n_intervals\u0060 every\n\u0060interval\u0060 milliseconds\n\n\n\u2022 disabled (boolean) - If True, the counter will no longer update\n\n\n\u2022 n_intervals (number; default 0) - Number of times the interval has passed\n\n\n\u2022 max_intervals (number; default -1) - Number of times the interval will be fired.\nIf -1, then the interval has no limit (the default)\nand if 0 then the interval stops running.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.disabled \ndisabled \nAttr.interval \ninterval \nAttr.maxIntervals \nmaxIntervals \nAttr.nIntervals \nnIntervals \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#disabled","title":"Attr.disabled","content":"Attr.disabled \ndisabled \n\nIf True, the counter will no longer update\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#interval","title":"Attr.interval","content":"Attr.interval \ninterval \n\nThis component will increment the counter \u0060n_intervals\u0060 every\n\u0060interval\u0060 milliseconds\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#maxIntervals","title":"Attr.maxIntervals","content":"Attr.maxIntervals \nmaxIntervals \n\nNumber of times the interval will be fired.\nIf -1, then the interval has no limit (the default)\nand if 0 then the interval stops running.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#nIntervals","title":"Attr.nIntervals","content":"Attr.nIntervals \nnIntervals \n\nNumber of times the interval has passed\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-interval.html","title":"Interval","content":"Interval \n\nA component that repeatedly increments a counter \u0060n_intervals\u0060\nwith a fixed time delay between each increment.\nInterval is good for triggering a component on a recurring basis.\nThe time delay is set with the property \u0022interval\u0022 in milliseconds.\n \nInterval.( .ctor ) \n( .ctor ) \nInterval.applyMembers \napplyMembers \nInterval.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-interval.html#( .ctor )","title":"Interval.( .ctor )","content":"Interval.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-interval.html#applyMembers","title":"Interval.applyMembers","content":"Interval.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-interval.html#init","title":"Interval.init","content":"Interval.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-prop.html","title":"Prop","content":"Prop \n\n\u2022 interval (number; default 1000) - This component will increment the counter \u0060n_intervals\u0060 every\n\u0060interval\u0060 milliseconds\n\n\n\u2022 disabled (boolean) - If True, the counter will no longer update\n\n\n\u2022 n_intervals (number; default 0) - Number of times the interval has passed\n\n\n\u2022 max_intervals (number; default -1) - Number of times the interval will be fired.\nIf -1, then the interval has no limit (the default)\nand if 0 then the interval stops running.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.Interval \nInterval \nProp.Disabled \nDisabled \nProp.NIntervals \nNIntervals \nProp.MaxIntervals \nMaxIntervals"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-prop.html#Interval","title":"Prop.Interval","content":"Prop.Interval \nInterval \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-prop.html#Disabled","title":"Prop.Disabled","content":"Prop.Disabled \nDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-prop.html#NIntervals","title":"Prop.NIntervals","content":"Prop.NIntervals \nNIntervals \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-interval-prop.html#MaxIntervals","title":"Prop.MaxIntervals","content":"Prop.MaxIntervals \nMaxIntervals \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading.html","title":"Loading","content":"Loading \n\nA Loading component that wraps any other component and displays a spinner until the wrapped component has rendered.\n \nLoading.Attr \nAttr \nLoading.Loading \nLoading \nLoading.LoadingType \nLoadingType \nLoading.Prop \nProp \nLoading.loading \nloading"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading.html#loading","title":"Loading.loading","content":"Loading.loading \nloading \n\nA Loading component that wraps any other component and displays a spinner until the wrapped component has rendered.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 children (list with values of type: a list of or a singular dash component, string or number | a list of or a singular dash component, string or number) - Array that holds components to render\n\n\n\u2022 type (value equal to: \u0027graph\u0027, \u0027cube\u0027, \u0027circle\u0027, \u0027dot\u0027, \u0027default\u0027; default default) - Property that determines which spinner to show\none of \u0027graph\u0027, \u0027cube\u0027, \u0027circle\u0027, \u0027dot\u0027, or \u0027default\u0027.\n\n\n\u2022 fullscreen (boolean) - Boolean that makes the spinner display full-screen\n\n\n\u2022 debug (boolean) - If true, the spinner will display the component_name and prop_name\nwhile loading\n\n\n\u2022 className (string) - Additional CSS class for the spinner root DOM node\n\n\n\u2022 parent_className (string) - Additional CSS class for the outermost dcc.Loading parent div DOM node\n\n\n\u2022 style (record) - Additional CSS styling for the spinner root DOM node\n\n\n\u2022 parent_style (record) - Additional CSS styling for the outermost dcc.Loading parent div DOM node\n\n\n\u2022 color (string; default #119DFF) - Primary colour used for the loading spinners\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.color \ncolor \nAttr.debug \ndebug \nAttr.fullscreen \nfullscreen \nAttr.loadingState \nloadingState \nAttr.loadingType \nloadingType \nAttr.parentClassName \nparentClassName \nAttr.parentStyle \nparentStyle \nAttr.style \nstyle \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nAdditional CSS class for the spinner root DOM node\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#color","title":"Attr.color","content":"Attr.color \ncolor \n\nPrimary colour used for the loading spinners\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#debug","title":"Attr.debug","content":"Attr.debug \ndebug \n\nIf true, the spinner will display the component_name and prop_name\nwhile loading\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#fullscreen","title":"Attr.fullscreen","content":"Attr.fullscreen \nfullscreen \n\nBoolean that makes the spinner display full-screen\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#loadingType","title":"Attr.loadingType","content":"Attr.loadingType \nloadingType \n\nProperty that determines which spinner to show\none of \u0027graph\u0027, \u0027cube\u0027, \u0027circle\u0027, \u0027dot\u0027, or \u0027default\u0027.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#parentClassName","title":"Attr.parentClassName","content":"Attr.parentClassName \nparentClassName \n\nAdditional CSS class for the outermost dcc.Loading parent div DOM node\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#parentStyle","title":"Attr.parentStyle","content":"Attr.parentStyle \nparentStyle \n\nAdditional CSS styling for the outermost dcc.Loading parent div DOM node\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nAdditional CSS styling for the spinner root DOM node\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loading.html","title":"Loading","content":"Loading \n\nA Loading component that wraps any other component and displays a spinner until the wrapped component has rendered.\n \nLoading.( .ctor ) \n( .ctor ) \nLoading.applyMembers \napplyMembers \nLoading.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loading.html#( .ctor )","title":"Loading.( .ctor )","content":"Loading.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loading.html#applyMembers","title":"Loading.applyMembers","content":"Loading.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loading.html#init","title":"Loading.init","content":"Loading.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loadingtype.html","title":"LoadingType","content":"LoadingType \n\nvalue equal to: \u0027graph\u0027, \u0027cube\u0027, \u0027circle\u0027, \u0027dot\u0027, \u0027default\u0027\n \nLoadingType.convert \nconvert \nLoadingType.Graph \nGraph \nLoadingType.Cube \nCube \nLoadingType.Circle \nCircle \nLoadingType.Dot \nDot \nLoadingType.Default \nDefault"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loadingtype.html#convert","title":"LoadingType.convert","content":"LoadingType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loadingtype.html#Graph","title":"LoadingType.Graph","content":"LoadingType.Graph \nGraph \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loadingtype.html#Cube","title":"LoadingType.Cube","content":"LoadingType.Cube \nCube \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loadingtype.html#Circle","title":"LoadingType.Circle","content":"LoadingType.Circle \nCircle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loadingtype.html#Dot","title":"LoadingType.Dot","content":"LoadingType.Dot \nDot \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-loadingtype.html#Default","title":"LoadingType.Default","content":"LoadingType.Default \nDefault \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html","title":"Prop","content":"Prop \n\n\u2022 children (list with values of type: a list of or a singular dash component, string or number | a list of or a singular dash component, string or number) - Array that holds components to render\n\n\n\u2022 type (value equal to: \u0027graph\u0027, \u0027cube\u0027, \u0027circle\u0027, \u0027dot\u0027, \u0027default\u0027; default default) - Property that determines which spinner to show\none of \u0027graph\u0027, \u0027cube\u0027, \u0027circle\u0027, \u0027dot\u0027, or \u0027default\u0027.\n\n\n\u2022 fullscreen (boolean) - Boolean that makes the spinner display full-screen\n\n\n\u2022 debug (boolean) - If true, the spinner will display the component_name and prop_name\nwhile loading\n\n\n\u2022 className (string) - Additional CSS class for the spinner root DOM node\n\n\n\u2022 parent_className (string) - Additional CSS class for the outermost dcc.Loading parent div DOM node\n\n\n\u2022 style (record) - Additional CSS styling for the spinner root DOM node\n\n\n\u2022 parent_style (record) - Additional CSS styling for the outermost dcc.Loading parent div DOM node\n\n\n\u2022 color (string; default #119DFF) - Primary colour used for the loading spinners\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.convert \nconvert \nProp.toPropName \ntoPropName \nProp.Type \nType \nProp.Fullscreen \nFullscreen \nProp.Debug \nDebug \nProp.ClassName \nClassName \nProp.ParentClassName \nParentClassName \nProp.Style \nStyle \nProp.ParentStyle \nParentStyle \nProp.Color \nColor \nProp.LoadingState \nLoadingState"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#convert","title":"Prop.convert","content":"Prop.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#toPropName","title":"Prop.toPropName","content":"Prop.toPropName \ntoPropName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#Type","title":"Prop.Type","content":"Prop.Type \nType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#Fullscreen","title":"Prop.Fullscreen","content":"Prop.Fullscreen \nFullscreen \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#Debug","title":"Prop.Debug","content":"Prop.Debug \nDebug \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#ParentClassName","title":"Prop.ParentClassName","content":"Prop.ParentClassName \nParentClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#ParentStyle","title":"Prop.ParentStyle","content":"Prop.ParentStyle \nParentStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#Color","title":"Prop.Color","content":"Prop.Color \nColor \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-loading-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location.html","title":"Location","content":"Location \n\nUpdate and track the current window.location object through the window.history state.\nUse in conjunction with the \u0060dash_core_components.Link\u0060 component to make apps with multiple pages.\n \nLocation.Attr \nAttr \nLocation.Location \nLocation \nLocation.Prop \nProp \nLocation.location \nlocation"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location.html#location","title":"Location.location","content":"Location.location \nlocation \n\nUpdate and track the current window.location object through the window.history state.\nUse in conjunction with the \u0060dash_core_components.Link\u0060 component to make apps with multiple pages.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 pathname (string) - pathname in window.location - e.g., \u0022/my/full/pathname\u0022\n\n\n\u2022 search (string) - search in window.location - e.g., \u0022?myargument=1\u0022\n\n\n\u2022 hash (string) - hash in window.location - e.g., \u0022#myhash\u0022\n\n\n\u2022 href (string) - href in window.location - e.g., \u0022/my/full/pathname?myargument=1#myhash\u0022\n\n\n\u2022 refresh (boolean; default true) - Refresh the page when the location is updated?\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.hash \nhash \nAttr.href \nhref \nAttr.pathname \npathname \nAttr.refresh \nrefresh \nAttr.search \nsearch \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#hash","title":"Attr.hash","content":"Attr.hash \nhash \n\nhash in window.location - e.g., \u0022#myhash\u0022\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#href","title":"Attr.href","content":"Attr.href \nhref \n\nhref in window.location - e.g., \u0022/my/full/pathname?myargument=1#myhash\u0022\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#pathname","title":"Attr.pathname","content":"Attr.pathname \npathname \n\npathname in window.location - e.g., \u0022/my/full/pathname\u0022\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#refresh","title":"Attr.refresh","content":"Attr.refresh \nrefresh \n\nRefresh the page when the location is updated?\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#search","title":"Attr.search","content":"Attr.search \nsearch \n\nsearch in window.location - e.g., \u0022?myargument=1\u0022\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-location.html","title":"Location","content":"Location \n\nUpdate and track the current window.location object through the window.history state.\nUse in conjunction with the \u0060dash_core_components.Link\u0060 component to make apps with multiple pages.\n \nLocation.( .ctor ) \n( .ctor ) \nLocation.applyMembers \napplyMembers \nLocation.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-location.html#( .ctor )","title":"Location.( .ctor )","content":"Location.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-location.html#applyMembers","title":"Location.applyMembers","content":"Location.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-location.html#init","title":"Location.init","content":"Location.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-prop.html","title":"Prop","content":"Prop \n\n\u2022 pathname (string) - pathname in window.location - e.g., \u0022/my/full/pathname\u0022\n\n\n\u2022 search (string) - search in window.location - e.g., \u0022?myargument=1\u0022\n\n\n\u2022 hash (string) - hash in window.location - e.g., \u0022#myhash\u0022\n\n\n\u2022 href (string) - href in window.location - e.g., \u0022/my/full/pathname?myargument=1#myhash\u0022\n\n\n\u2022 refresh (boolean; default true) - Refresh the page when the location is updated?\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.Pathname \nPathname \nProp.Search \nSearch \nProp.Hash \nHash \nProp.Href \nHref \nProp.Refresh \nRefresh"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-prop.html#Pathname","title":"Prop.Pathname","content":"Prop.Pathname \nPathname \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-prop.html#Search","title":"Prop.Search","content":"Prop.Search \nSearch \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-prop.html#Hash","title":"Prop.Hash","content":"Prop.Hash \nHash \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-prop.html#Href","title":"Prop.Href","content":"Prop.Href \nHref \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-location-prop.html#Refresh","title":"Prop.Refresh","content":"Prop.Refresh \nRefresh \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown.html","title":"Markdown","content":"Markdown \n\nA component that renders Markdown text as specified by the\nGitHub Markdown spec. These component uses\n[react-markdown](https://remarkjs.github.io/react-markdown/) under the hood.\n \nMarkdown.Attr \nAttr \nMarkdown.HighlightConfig \nHighlightConfig \nMarkdown.HighlightConfigTheme \nHighlightConfigTheme \nMarkdown.Markdown \nMarkdown \nMarkdown.Prop \nProp \nMarkdown.markdown \nmarkdown"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown.html#markdown","title":"Markdown.markdown","content":"Markdown.markdown \nmarkdown \n\nA component that renders Markdown text as specified by the\nGitHub Markdown spec. These component uses\n[react-markdown](https://remarkjs.github.io/react-markdown/) under the hood.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 className (string) - Class name of the container element\n\n\n\u2022 dangerously_allow_html (boolean; default false) - A boolean to control raw HTML escaping.\nSetting HTML from code is risky because it\u0027s easy to\ninadvertently expose your users to a cross-site scripting (XSS)\n(https://en.wikipedia.org/wiki/Cross-site_scripting) attack.\n\n\n\u2022 children (string | list with values of type: string) - A markdown string (or array of strings) that adhreres to the CommonMark spec\n\n\n\u2022 dedent (boolean; default true) - Remove matching leading whitespace from all lines.\nLines that are empty, or contain *only* whitespace, are ignored.\nBoth spaces and tab characters are removed, but only if they match;\nwe will not convert tabs to spaces or vice versa.\n\n\n\u2022 highlight_config (record with the field: \u0027theme: value equal to: \u0027dark\u0027, \u0027light\u0027 (optional)\u0027; default {}) - Config options for syntax highlighting.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 style (record) - User-defined inline styles for the rendered Markdown\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.dangerouslyAllowHtml \ndangerouslyAllowHtml \nAttr.dedent \ndedent \nAttr.highlightConfig \nhighlightConfig \nAttr.loadingState \nloadingState \nAttr.style \nstyle \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nClass name of the container element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#dangerouslyAllowHtml","title":"Attr.dangerouslyAllowHtml","content":"Attr.dangerouslyAllowHtml \ndangerouslyAllowHtml \n\nA boolean to control raw HTML escaping.\nSetting HTML from code is risky because it\u0027s easy to\ninadvertently expose your users to a cross-site scripting (XSS)\n(https://en.wikipedia.org/wiki/Cross-site_scripting) attack.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#dedent","title":"Attr.dedent","content":"Attr.dedent \ndedent \n\nRemove matching leading whitespace from all lines.\nLines that are empty, or contain *only* whitespace, are ignored.\nBoth spaces and tab characters are removed, but only if they match;\nwe will not convert tabs to spaces or vice versa.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#highlightConfig","title":"Attr.highlightConfig","content":"Attr.highlightConfig \nhighlightConfig \n\nConfig options for syntax highlighting.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nDefines CSS styles which will override styles previously set.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-highlightconfig.html","title":"HighlightConfig","content":"HighlightConfig \n\nrecord with the field: \u0027theme: value equal to: \u0027dark\u0027, \u0027light\u0027 (optional)\u0027\n \nHighlightConfig.convert \nconvert \nHighlightConfig.Theme \nTheme"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-highlightconfig.html#convert","title":"HighlightConfig.convert","content":"HighlightConfig.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-highlightconfig.html#Theme","title":"HighlightConfig.Theme","content":"HighlightConfig.Theme \nTheme \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-highlightconfigtheme.html","title":"HighlightConfigTheme","content":"HighlightConfigTheme \n\nvalue equal to: \u0027dark\u0027, \u0027light\u0027\n\n\nColor scheme; default \u0027light\u0027\n \nHighlightConfigTheme.convert \nconvert \nHighlightConfigTheme.Dark \nDark \nHighlightConfigTheme.Light \nLight"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-highlightconfigtheme.html#convert","title":"HighlightConfigTheme.convert","content":"HighlightConfigTheme.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-highlightconfigtheme.html#Dark","title":"HighlightConfigTheme.Dark","content":"HighlightConfigTheme.Dark \nDark \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-highlightconfigtheme.html#Light","title":"HighlightConfigTheme.Light","content":"HighlightConfigTheme.Light \nLight \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-markdown.html","title":"Markdown","content":"Markdown \n\nA component that renders Markdown text as specified by the\nGitHub Markdown spec. These component uses\n[react-markdown](https://remarkjs.github.io/react-markdown/) under the hood.\n \nMarkdown.( .ctor ) \n( .ctor ) \nMarkdown.applyMembers \napplyMembers \nMarkdown.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-markdown.html#( .ctor )","title":"Markdown.( .ctor )","content":"Markdown.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-markdown.html#applyMembers","title":"Markdown.applyMembers","content":"Markdown.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-markdown.html#init","title":"Markdown.init","content":"Markdown.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html","title":"Prop","content":"Prop \n\n\u2022 className (string) - Class name of the container element\n\n\n\u2022 dangerously_allow_html (boolean; default false) - A boolean to control raw HTML escaping.\nSetting HTML from code is risky because it\u0027s easy to\ninadvertently expose your users to a cross-site scripting (XSS)\n(https://en.wikipedia.org/wiki/Cross-site_scripting) attack.\n\n\n\u2022 children (string | list with values of type: string) - A markdown string (or array of strings) that adhreres to the CommonMark spec\n\n\n\u2022 dedent (boolean; default true) - Remove matching leading whitespace from all lines.\nLines that are empty, or contain *only* whitespace, are ignored.\nBoth spaces and tab characters are removed, but only if they match;\nwe will not convert tabs to spaces or vice versa.\n\n\n\u2022 highlight_config (record with the field: \u0027theme: value equal to: \u0027dark\u0027, \u0027light\u0027 (optional)\u0027; default {}) - Config options for syntax highlighting.\n\ngg/\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 style (record) - User-defined inline styles for the rendered Markdown\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.ClassName \nClassName \nProp.DangerouslyAllowHtml \nDangerouslyAllowHtml \nProp.Dedent \nDedent \nProp.HighlightConfig \nHighlightConfig \nProp.LoadingState \nLoadingState \nProp.Style \nStyle"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html#DangerouslyAllowHtml","title":"Prop.DangerouslyAllowHtml","content":"Prop.DangerouslyAllowHtml \nDangerouslyAllowHtml \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html#Dedent","title":"Prop.Dedent","content":"Prop.Dedent \nDedent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html#HighlightConfig","title":"Prop.HighlightConfig","content":"Prop.HighlightConfig \nHighlightConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-markdown-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems.html","title":"RadioItems","content":"RadioItems \n\nRadioItems is a component that encapsulates several radio item inputs.\nThe values and labels of the RadioItems is specified in the \u0060options\u0060\nproperty and the seleced item is specified with the \u0060value\u0060 property.\nEach radio item is rendered as an input with a surrounding label.\n \nRadioItems.Attr \nAttr \nRadioItems.Prop \nProp \nRadioItems.RadioItems \nRadioItems \nRadioItems.radioItems \nradioItems"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems.html#radioItems","title":"RadioItems.radioItems","content":"RadioItems.radioItems \nradioItems \n\nRadioItems is a component that encapsulates several radio item inputs.\nThe values and labels of the RadioItems is specified in the \u0060options\u0060\nproperty and the seleced item is specified with the \u0060value\u0060 property.\nEach radio item is rendered as an input with a surrounding label.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 options (list with values of type: record with the fields: \u0027label: string | number (required)\u0027, \u0027value: string | number (required)\u0027, \u0027disabled: boolean (optional)\u0027; default []) - An array of options\n\n\n\u2022 value (string | number) - The currently selected value\n\n\n\u2022 style (record) - The style of the container (div)\n\n\n\u2022 className (string) - The class of the container (div)\n\n\n\u2022 inputStyle (record; default {}) - The style of the \u003Cinput\u003E radio element\n\n\n\u2022 inputClassName (string; default ) - The class of the \u003Cinput\u003E radio element\n\n\n\u2022 labelStyle (record; default {}) - The style of the \u003Clabel\u003E that wraps the radio input\n and the option\u0027s label\n\n\n\u2022 labelClassName (string; default ) - The class of the \u003Clabel\u003E that wraps the radio input\n and the option\u0027s label\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.inputClassName \ninputClassName \nAttr.inputStyle \ninputStyle \nAttr.labelClassName \nlabelClassName \nAttr.labelStyle \nlabelStyle \nAttr.loadingState \nloadingState \nAttr.options \noptions \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.persistenceType \npersistenceType \nAttr.style \nstyle \nAttr.value \nvalue \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nThe class of the container (div)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#inputClassName","title":"Attr.inputClassName","content":"Attr.inputClassName \ninputClassName \n\nThe class of the \u003Cinput\u003E radio element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#inputStyle","title":"Attr.inputStyle","content":"Attr.inputStyle \ninputStyle \n\nThe style of the \u003Cinput\u003E radio element\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#labelClassName","title":"Attr.labelClassName","content":"Attr.labelClassName \nlabelClassName \n\nThe class of the \u003Clabel\u003E that wraps the radio input\n and the option\u0027s label\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#labelStyle","title":"Attr.labelStyle","content":"Attr.labelStyle \nlabelStyle \n\nThe style of the \u003Clabel\u003E that wraps the radio input\n and the option\u0027s label\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#options","title":"Attr.options","content":"Attr.options \noptions \n\nAn array of options\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#persistenceType","title":"Attr.persistenceType","content":"Attr.persistenceType \npersistenceType \n\nWhere persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nThe style of the container (div)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe currently selected value\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html","title":"Prop","content":"Prop \n\n\u2022 options (list with values of type: record with the fields: \u0027label: string | number (required)\u0027, \u0027value: string | number (required)\u0027, \u0027disabled: boolean (optional)\u0027; default []) - An array of options\n\n\n\u2022 value (string | number) - The currently selected value\n\n\n\u2022 style (record) - The style of the container (div)\n\n\n\u2022 className (string) - The class of the container (div)\n\n\n\u2022 inputStyle (record; default {}) - The style of the \u003Cinput\u003E radio element\n\n\n\u2022 inputClassName (string; default ) - The class of the \u003Cinput\u003E radio element\n\n\n\u2022 labelStyle (record; default {}) - The style of the \u003Clabel\u003E that wraps the radio input\n and the option\u0027s label\n\n\n\u2022 labelClassName (string; default ) - The class of the \u003Clabel\u003E that wraps the radio input\n and the option\u0027s label\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.convert \nconvert \nProp.toPropName \ntoPropName \nProp.ClassName \nClassName \nProp.Style \nStyle \nProp.Options \nOptions \nProp.Value \nValue \nProp.InputClassName \nInputClassName \nProp.InputStyle \nInputStyle \nProp.LabelClassName \nLabelClassName \nProp.LabelStyle \nLabelStyle \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#convert","title":"Prop.convert","content":"Prop.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#toPropName","title":"Prop.toPropName","content":"Prop.toPropName \ntoPropName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#Options","title":"Prop.Options","content":"Prop.Options \nOptions \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#InputClassName","title":"Prop.InputClassName","content":"Prop.InputClassName \nInputClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#InputStyle","title":"Prop.InputStyle","content":"Prop.InputStyle \nInputStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#LabelClassName","title":"Prop.LabelClassName","content":"Prop.LabelClassName \nLabelClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#LabelStyle","title":"Prop.LabelStyle","content":"Prop.LabelStyle \nLabelStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-radioitems.html","title":"RadioItems","content":"RadioItems \n\nRadioItems is a component that encapsulates several radio item inputs.\nThe values and labels of the RadioItems is specified in the \u0060options\u0060\nproperty and the seleced item is specified with the \u0060value\u0060 property.\nEach radio item is rendered as an input with a surrounding label.\n \nRadioItems.( .ctor ) \n( .ctor ) \nRadioItems.applyMembers \napplyMembers \nRadioItems.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-radioitems.html#( .ctor )","title":"RadioItems.( .ctor )","content":"RadioItems.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-radioitems.html#applyMembers","title":"RadioItems.applyMembers","content":"RadioItems.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-radioitems-radioitems.html#init","title":"RadioItems.init","content":"RadioItems.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider.html","title":"Slider","content":"Slider \n\nA slider component with a single handle.\n \nSlider.Attr \nAttr \nSlider.MarkValue \nMarkValue \nSlider.MarkWithStyle \nMarkWithStyle \nSlider.MarksType \nMarksType \nSlider.Prop \nProp \nSlider.Slider \nSlider \nSlider.Tooltip \nTooltip \nSlider.TooltipPlacement \nTooltipPlacement \nSlider.UpdateModeType \nUpdateModeType \nSlider.slider \nslider"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider.html#slider","title":"Slider.slider","content":"Slider.slider \nslider \n\nA slider component with a single handle.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 marks (dict with values of type: string | record with the fields: \u0027label: string (optional)\u0027, \u0027style: record (optional)\u0027) - Marks on the slider.\nThe key determines the position (a number),\nand the value determines what will show.\nIf you want to set the style of a specific mark point,\nthe value should be an object which\ncontains style and label properties.\n\n\n\u2022 value (number) - The value of the input\n\n\n\u2022 drag_value (number) - The value of the input during a drag\n\n\n\u2022 className (string) - Additional CSS class for the root DOM node\n\n\n\u2022 disabled (boolean) - If true, the handles can\u0027t be moved.\n\n\n\u2022 dots (boolean) - When the step value is greater than 1,\nyou can set the dots to true if you want to\nrender the slider with dots.\n\n\n\u2022 included (boolean) - If the value is true, it means a continuous\nvalue is included. Otherwise, it is an independent value.\n\n\n\u2022 min (number) - Minimum allowed value of the slider\n\n\n\u2022 max (number) - Maximum allowed value of the slider\n\n\n\u2022 tooltip (record with the fields: \u0027always_visible: boolean (optional)\u0027, \u0027placement: value equal to: \u0027left\u0027, \u0027right\u0027, \u0027top\u0027, \u0027bottom\u0027, \u0027topLeft\u0027, \u0027topRight\u0027, \u0027bottomLeft\u0027, \u0027bottomRight\u0027 (optional)\u0027) - Configuration for tooltips describing the current slider value\n\n\n\u2022 step (number) - Value by which increments or decrements are made\n\n\n\u2022 vertical (boolean) - If true, the slider will be vertical\n\n\n\u2022 verticalHeight (number; default 400) - The height, in px, of the slider if it is vertical.\n\n\n\u2022 updatemode (value equal to: \u0027mouseup\u0027, \u0027drag\u0027; default mouseup) - Determines when the component should update its \u0060value\u0060\nproperty. If \u0060mouseup\u0060 (the default) then the slider\nwill only trigger its value when the user has finished\ndragging the slider. If \u0060drag\u0060, then the slider will\nupdate its value continuously as it is being dragged.\nIf you want different actions during and after drag,\nleave \u0060updatemode\u0060 as \u0060mouseup\u0060 and use \u0060drag_value\u0060\nfor the continuously updating value.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.disabled \ndisabled \nAttr.dots \ndots \nAttr.dragValue \ndragValue \nAttr.included \nincluded \nAttr.loadingState \nloadingState \nAttr.marks \nmarks \nAttr.max \nmax \nAttr.min \nmin \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.persistenceType \npersistenceType \nAttr.step \nstep \nAttr.tooltip \ntooltip \nAttr.updateMode \nupdateMode \nAttr.value \nvalue \nAttr.vertical \nvertical \nAttr.verticalHeight \nverticalHeight \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nAdditional CSS class for the root DOM node\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#disabled","title":"Attr.disabled","content":"Attr.disabled \ndisabled \n\nIf true, the handles can\u0027t be moved.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#dots","title":"Attr.dots","content":"Attr.dots \ndots \n\nWhen the step value is greater than 1,\nyou can set the dots to true if you want to\nrender the slider with dots.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#dragValue","title":"Attr.dragValue","content":"Attr.dragValue \ndragValue \n\nThe value of the input during a drag\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#included","title":"Attr.included","content":"Attr.included \nincluded \n\nIf the value is true, it means a continuous\nvalue is included. Otherwise, it is an independent value.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#marks","title":"Attr.marks","content":"Attr.marks \nmarks \n\nMarks on the slider.\nThe key determines the position (a number),\nand the value determines what will show.\nIf you want to set the style of a specific mark point,\nthe value should be an object which\ncontains style and label properties.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#max","title":"Attr.max","content":"Attr.max \nmax \n\nMaximum allowed value of the slider\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#min","title":"Attr.min","content":"Attr.min \nmin \n\nMinimum allowed value of the slider\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#persistenceType","title":"Attr.persistenceType","content":"Attr.persistenceType \npersistenceType \n\nWhere persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#step","title":"Attr.step","content":"Attr.step \nstep \n\nValue by which increments or decrements are made\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#tooltip","title":"Attr.tooltip","content":"Attr.tooltip \ntooltip \n\nConfiguration for tooltips describing the current slider value\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#updateMode","title":"Attr.updateMode","content":"Attr.updateMode \nupdateMode \n\nDetermines when the component should update its \u0060value\u0060\nproperty. If \u0060mouseup\u0060 (the default) then the slider\nwill only trigger its value when the user has finished\ndragging the slider. If \u0060drag\u0060, then the slider will\nupdate its value continuously as it is being dragged.\nIf you want different actions during and after drag,\nleave \u0060updatemode\u0060 as \u0060mouseup\u0060 and use \u0060drag_value\u0060\nfor the continuously updating value.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe value of the input\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#vertical","title":"Attr.vertical","content":"Attr.vertical \nvertical \n\nIf true, the slider will be vertical\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#verticalHeight","title":"Attr.verticalHeight","content":"Attr.verticalHeight \nverticalHeight \n\nThe height, in px, of the slider if it is vertical.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markvalue.html","title":"MarkValue","content":"MarkValue \n\nstring | record with the fields: \u0027label: string (optional)\u0027, \u0027style: record (optional)\u0027\n \nMarkValue.convert \nconvert \nMarkValue.String \nString \nMarkValue.MarkWithStyle \nMarkWithStyle"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markvalue.html#convert","title":"MarkValue.convert","content":"MarkValue.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markvalue.html#String","title":"MarkValue.String","content":"MarkValue.String \nString \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markvalue.html#MarkWithStyle","title":"MarkValue.MarkWithStyle","content":"MarkValue.MarkWithStyle \nMarkWithStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markwithstyle.html","title":"MarkWithStyle","content":"MarkWithStyle \n\nrecord with the fields: \u0027label: string (optional)\u0027, \u0027style: record (optional)\u0027\n \nMarkWithStyle.convert \nconvert \nMarkWithStyle.Label \nLabel \nMarkWithStyle.Style \nStyle"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markwithstyle.html#convert","title":"MarkWithStyle.convert","content":"MarkWithStyle.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markwithstyle.html#Label","title":"MarkWithStyle.Label","content":"MarkWithStyle.Label \nLabel \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markwithstyle.html#Style","title":"MarkWithStyle.Style","content":"MarkWithStyle.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markstype.html","title":"MarksType","content":"MarksType \n\ndict with values of type: string | record with the fields: \u0027label: string (optional)\u0027, \u0027style: record (optional)\u0027\n \nMarksType.convert \nconvert \nMarksType.MarksType \nMarksType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markstype.html#convert","title":"MarksType.convert","content":"MarksType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-markstype.html#MarksType","title":"MarksType.MarksType","content":"MarksType.MarksType \nMarksType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html","title":"Prop","content":"Prop \n\n\u2022 marks (dict with values of type: string | record with the fields: \u0027label: string (optional)\u0027, \u0027style: record (optional)\u0027) - Marks on the slider.\nThe key determines the position (a number),\nand the value determines what will show.\nIf you want to set the style of a specific mark point,\nthe value should be an object which\ncontains style and label properties.\n\n\n\u2022 value (number) - The value of the input\n\n\n\u2022 drag_value (number) - The value of the input during a drag\n\n\n\u2022 className (string) - Additional CSS class for the root DOM node\n\n\n\u2022 disabled (boolean) - If true, the handles can\u0027t be moved.\n\n\n\u2022 dots (boolean) - When the step value is greater than 1,\nyou can set the dots to true if you want to\nrender the slider with dots.\n\n\n\u2022 included (boolean) - If the value is true, it means a continuous\nvalue is included. Otherwise, it is an independent value.\n\n\n\u2022 min (number) - Minimum allowed value of the slider\n\n\n\u2022 max (number) - Maximum allowed value of the slider\n\n\n\u2022 tooltip (record with the fields: \u0027always_visible: boolean (optional)\u0027, \u0027placement: value equal to: \u0027left\u0027, \u0027right\u0027, \u0027top\u0027, \u0027bottom\u0027, \u0027topLeft\u0027, \u0027topRight\u0027, \u0027bottomLeft\u0027, \u0027bottomRight\u0027 (optional)\u0027) - Configuration for tooltips describing the current slider value\n\n\n\u2022 step (number) - Value by which increments or decrements are made\n\n\n\u2022 vertical (boolean) - If true, the slider will be vertical\n\n\n\u2022 verticalHeight (number; default 400) - The height, in px, of the slider if it is vertical.\n\n\n\u2022 updatemode (value equal to: \u0027mouseup\u0027, \u0027drag\u0027; default mouseup) - Determines when the component should update its \u0060value\u0060\nproperty. If \u0060mouseup\u0060 (the default) then the slider\nwill only trigger its value when the user has finished\ndragging the slider. If \u0060drag\u0060, then the slider will\nupdate its value continuously as it is being dragged.\nIf you want different actions during and after drag,\nleave \u0060updatemode\u0060 as \u0060mouseup\u0060 and use \u0060drag_value\u0060\nfor the continuously updating value.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.Marks \nMarks \nProp.Value \nValue \nProp.DragValue \nDragValue \nProp.ClassName \nClassName \nProp.Disabled \nDisabled \nProp.Dots \nDots \nProp.Included \nIncluded \nProp.Min \nMin \nProp.Max \nMax \nProp.Tooltip \nTooltip \nProp.Step \nStep \nProp.Vertical \nVertical \nProp.VerticalHeight \nVerticalHeight \nProp.UpdateMode \nUpdateMode \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Marks","title":"Prop.Marks","content":"Prop.Marks \nMarks \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#DragValue","title":"Prop.DragValue","content":"Prop.DragValue \nDragValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Disabled","title":"Prop.Disabled","content":"Prop.Disabled \nDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Dots","title":"Prop.Dots","content":"Prop.Dots \nDots \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Included","title":"Prop.Included","content":"Prop.Included \nIncluded \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Min","title":"Prop.Min","content":"Prop.Min \nMin \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Max","title":"Prop.Max","content":"Prop.Max \nMax \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Tooltip","title":"Prop.Tooltip","content":"Prop.Tooltip \nTooltip \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Step","title":"Prop.Step","content":"Prop.Step \nStep \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Vertical","title":"Prop.Vertical","content":"Prop.Vertical \nVertical \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#VerticalHeight","title":"Prop.VerticalHeight","content":"Prop.VerticalHeight \nVerticalHeight \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#UpdateMode","title":"Prop.UpdateMode","content":"Prop.UpdateMode \nUpdateMode \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-slider.html","title":"Slider","content":"Slider \n\nA slider component with a single handle.\n \nSlider.( .ctor ) \n( .ctor ) \nSlider.applyMembers \napplyMembers \nSlider.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-slider.html#( .ctor )","title":"Slider.( .ctor )","content":"Slider.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-slider.html#applyMembers","title":"Slider.applyMembers","content":"Slider.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-slider.html#init","title":"Slider.init","content":"Slider.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltip.html","title":"Tooltip","content":"Tooltip \n\nrecord with the fields: \u0027always_visible: boolean (optional)\u0027, \u0027placement: value equal to: \u0027left\u0027, \u0027right\u0027, \u0027top\u0027, \u0027bottom\u0027, \u0027topLeft\u0027, \u0027topRight\u0027, \u0027bottomLeft\u0027, \u0027bottomRight\u0027 (optional)\u0027\n \nTooltip.convert \nconvert \nTooltip.AlwaysVisible \nAlwaysVisible \nTooltip.Placement \nPlacement"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltip.html#convert","title":"Tooltip.convert","content":"Tooltip.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltip.html#AlwaysVisible","title":"Tooltip.AlwaysVisible","content":"Tooltip.AlwaysVisible \nAlwaysVisible \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltip.html#Placement","title":"Tooltip.Placement","content":"Tooltip.Placement \nPlacement \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html","title":"TooltipPlacement","content":"TooltipPlacement \n\nvalue equal to: \u0027left\u0027, \u0027right\u0027, \u0027top\u0027, \u0027bottom\u0027, \u0027topLeft\u0027, \u0027topRight\u0027, \u0027bottomLeft\u0027, \u0027bottomRight\u0027\n\n\nDetermines the placement of tooltips\nSee https://github.com/react-component/tooltip#api\ntop/bottom{*} sets the _origin_ of the tooltip, so e.g. \u0060topLeft\u0060\nwill in reality appear to be on the top right of the handle\n \nTooltipPlacement.convert \nconvert \nTooltipPlacement.Left \nLeft \nTooltipPlacement.Right \nRight \nTooltipPlacement.Top \nTop \nTooltipPlacement.Bottom \nBottom \nTooltipPlacement.TopLeft \nTopLeft \nTooltipPlacement.TopRight \nTopRight \nTooltipPlacement.BottomLeft \nBottomLeft \nTooltipPlacement.BottomRight \nBottomRight"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#convert","title":"TooltipPlacement.convert","content":"TooltipPlacement.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#Left","title":"TooltipPlacement.Left","content":"TooltipPlacement.Left \nLeft \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#Right","title":"TooltipPlacement.Right","content":"TooltipPlacement.Right \nRight \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#Top","title":"TooltipPlacement.Top","content":"TooltipPlacement.Top \nTop \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#Bottom","title":"TooltipPlacement.Bottom","content":"TooltipPlacement.Bottom \nBottom \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#TopLeft","title":"TooltipPlacement.TopLeft","content":"TooltipPlacement.TopLeft \nTopLeft \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#TopRight","title":"TooltipPlacement.TopRight","content":"TooltipPlacement.TopRight \nTopRight \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#BottomLeft","title":"TooltipPlacement.BottomLeft","content":"TooltipPlacement.BottomLeft \nBottomLeft \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-tooltipplacement.html#BottomRight","title":"TooltipPlacement.BottomRight","content":"TooltipPlacement.BottomRight \nBottomRight \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-updatemodetype.html","title":"UpdateModeType","content":"UpdateModeType \n\nvalue equal to: \u0027mouseup\u0027, \u0027drag\u0027\n \nUpdateModeType.convert \nconvert \nUpdateModeType.Mouseup \nMouseup \nUpdateModeType.Drag \nDrag"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-updatemodetype.html#convert","title":"UpdateModeType.convert","content":"UpdateModeType.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-updatemodetype.html#Mouseup","title":"UpdateModeType.Mouseup","content":"UpdateModeType.Mouseup \nMouseup \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-slider-updatemodetype.html#Drag","title":"UpdateModeType.Drag","content":"UpdateModeType.Drag \nDrag \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store.html","title":"Store","content":"Store \n\nEasily keep data on the client side with this component.\nThe data is not inserted in the DOM.\nData can be in memory, localStorage or sessionStorage.\nThe data will be kept with the id as key.\n \nStore.Attr \nAttr \nStore.Prop \nProp \nStore.Store \nStore \nStore.store \nstore"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store.html#store","title":"Store.store","content":"Store.store \nstore \n\nEasily keep data on the client side with this component.\nThe data is not inserted in the DOM.\nData can be in memory, localStorage or sessionStorage.\nThe data will be kept with the id as key.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 storage_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default memory) - The type of the web storage.\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n\n\n\u2022 data (record | list | number | string | boolean) - The stored data for the id.\n\n\n\u2022 clear_data (boolean; default false) - Set to true to remove the data contained in \u0060data_key\u0060.\n\n\n\u2022 modified_timestamp (number; default -1) - The last time the storage was modified.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.clearData \nclearData \nAttr.data \ndata \nAttr.modifiedTimestamp \nmodifiedTimestamp \nAttr.storageType \nstorageType \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#clearData","title":"Attr.clearData","content":"Attr.clearData \nclearData \n\nSet to true to remove the data contained in \u0060data_key\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#data","title":"Attr.data","content":"Attr.data \ndata \n\nThe stored data for the id.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#modifiedTimestamp","title":"Attr.modifiedTimestamp","content":"Attr.modifiedTimestamp \nmodifiedTimestamp \n\nThe last time the storage was modified.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#storageType","title":"Attr.storageType","content":"Attr.storageType \nstorageType \n\nThe type of the web storage.\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-prop.html","title":"Prop","content":"Prop \n\n\u2022 storage_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default memory) - The type of the web storage.\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n\n\n\u2022 data (record | list | number | string | boolean) - The stored data for the id.\n\n\n\u2022 clear_data (boolean; default false) - Set to true to remove the data contained in \u0060data_key\u0060.\n\n\n\u2022 modified_timestamp (number; default -1) - The last time the storage was modified.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.ClearData \nClearData \nProp.Data \nData \nProp.ModifiedTimestamp \nModifiedTimestamp \nProp.StorageType \nStorageType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-prop.html#ClearData","title":"Prop.ClearData","content":"Prop.ClearData \nClearData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-prop.html#Data","title":"Prop.Data","content":"Prop.Data \nData \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-prop.html#ModifiedTimestamp","title":"Prop.ModifiedTimestamp","content":"Prop.ModifiedTimestamp \nModifiedTimestamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-prop.html#StorageType","title":"Prop.StorageType","content":"Prop.StorageType \nStorageType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-store.html","title":"Store","content":"Store \n\nEasily keep data on the client side with this component.\nThe data is not inserted in the DOM.\nData can be in memory, localStorage or sessionStorage.\nThe data will be kept with the id as key.\n \nStore.( .ctor ) \n( .ctor ) \nStore.applyMembers \napplyMembers \nStore.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-store.html#( .ctor )","title":"Store.( .ctor )","content":"Store.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-store.html#applyMembers","title":"Store.applyMembers","content":"Store.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-store-store.html#init","title":"Store.init","content":"Store.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab.html","title":"Tab","content":"Tab \n\nPart of dcc.Tabs - this is the child Tab component used to render a tabbed page.\nIts children will be set as the content of that tab, which if clicked will become visible.\n \nTab.Attr \nAttr \nTab.Prop \nProp \nTab.Tab \nTab \nTab.tab \ntab"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab.html#tab","title":"Tab.tab","content":"Tab.tab \ntab \n\nPart of dcc.Tabs - this is the child Tab component used to render a tabbed page.\nIts children will be set as the content of that tab, which if clicked will become visible.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 label (string) - The tab\u0027s label\n\n\n\u2022 children (a list of or a singular dash component, string or number) - The content of the tab - will only be displayed if this tab is selected\n\n\n\u2022 value (string) - Value for determining which Tab is currently selected\n\n\n\u2022 disabled (boolean; default false) - Determines if tab is disabled or not - defaults to false\n\n\n\u2022 disabled_style (record; default {\n    color: \u0027#d6d6d6\u0027,\n}) - Overrides the default (inline) styles when disabled\n\n\n\u2022 disabled_className (string) - Appends a class to the Tab component when it is disabled.\n\n\n\u2022 className (string) - Appends a class to the Tab component.\n\n\n\u2022 selected_className (string) - Appends a class to the Tab component when it is selected.\n\n\n\u2022 style (record) - Overrides the default (inline) styles for the Tab component.\n\n\n\u2022 selected_style (record) - Overrides the default (inline) styles for the Tab component when it is selected.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.disabled \ndisabled \nAttr.disabledClassName \ndisabledClassName \nAttr.disabledStyle \ndisabledStyle \nAttr.label \nlabel \nAttr.loadingState \nloadingState \nAttr.selectedClassName \nselectedClassName \nAttr.selectedStyle \nselectedStyle \nAttr.style \nstyle \nAttr.value \nvalue \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nAppends a class to the Tab component.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#disabled","title":"Attr.disabled","content":"Attr.disabled \ndisabled \n\nDetermines if tab is disabled or not - defaults to false\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#disabledClassName","title":"Attr.disabledClassName","content":"Attr.disabledClassName \ndisabledClassName \n\nAppends a class to the Tab component when it is disabled.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#disabledStyle","title":"Attr.disabledStyle","content":"Attr.disabledStyle \ndisabledStyle \n\nOverrides the default (inline) styles when disabled\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#label","title":"Attr.label","content":"Attr.label \nlabel \n\nThe tab\u0027s label\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#selectedClassName","title":"Attr.selectedClassName","content":"Attr.selectedClassName \nselectedClassName \n\nAppends a class to the Tab component when it is selected.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#selectedStyle","title":"Attr.selectedStyle","content":"Attr.selectedStyle \nselectedStyle \n\nOverrides the default (inline) styles for the Tab component when it is selected.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nOverrides the default (inline) styles for the Tab component.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nValue for determining which Tab is currently selected\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html","title":"Prop","content":"Prop \n\n\u2022 label (string) - The tab\u0027s label\n\n\n\u2022 children (a list of or a singular dash component, string or number) - The content of the tab - will only be displayed if this tab is selected\n\n\n\u2022 value (string) - Value for determining which Tab is currently selected\n\n\n\u2022 disabled (boolean; default false) - Determines if tab is disabled or not - defaults to false\n\n\n\u2022 disabled_style (record; default {\n    color: \u0027#d6d6d6\u0027,\n}) - Overrides the default (inline) styles when disabled\n\n\n\u2022 disabled_className (string) - Appends a class to the Tab component when it is disabled.\n\n\n\u2022 className (string) - Appends a class to the Tab component.\n\n\n\u2022 selected_className (string) - Appends a class to the Tab component when it is selected.\n\n\n\u2022 style (record) - Overrides the default (inline) styles for the Tab component.\n\n\n\u2022 selected_style (record) - Overrides the default (inline) styles for the Tab component when it is selected.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.ClassName \nClassName \nProp.Style \nStyle \nProp.Label \nLabel \nProp.Value \nValue \nProp.Disabled \nDisabled \nProp.DisabledStyle \nDisabledStyle \nProp.DisabledClassName \nDisabledClassName \nProp.SelectedClassName \nSelectedClassName \nProp.SelectedStyle \nSelectedStyle \nProp.LoadingState \nLoadingState"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#Label","title":"Prop.Label","content":"Prop.Label \nLabel \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#Disabled","title":"Prop.Disabled","content":"Prop.Disabled \nDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#DisabledStyle","title":"Prop.DisabledStyle","content":"Prop.DisabledStyle \nDisabledStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#DisabledClassName","title":"Prop.DisabledClassName","content":"Prop.DisabledClassName \nDisabledClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#SelectedClassName","title":"Prop.SelectedClassName","content":"Prop.SelectedClassName \nSelectedClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#SelectedStyle","title":"Prop.SelectedStyle","content":"Prop.SelectedStyle \nSelectedStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-tab.html","title":"Tab","content":"Tab \n\nPart of dcc.Tabs - this is the child Tab component used to render a tabbed page.\nIts children will be set as the content of that tab, which if clicked will become visible.\n \nTab.( .ctor ) \n( .ctor ) \nTab.applyMembers \napplyMembers \nTab.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-tab.html#( .ctor )","title":"Tab.( .ctor )","content":"Tab.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-tab.html#applyMembers","title":"Tab.applyMembers","content":"Tab.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tab-tab.html#init","title":"Tab.init","content":"Tab.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs.html","title":"Tabs","content":"Tabs \n\nA Dash component that lets you render pages with tabs - the Tabs component\u0027s children\ncan be dcc.Tab components, which can hold a label that will be displayed as a tab, and can in turn hold\nchildren components that will be that tab\u0027s content.\n \nTabs.Attr \nAttr \nTabs.Prop \nProp \nTabs.Tabs \nTabs \nTabs.tabs \ntabs"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs.html#tabs","title":"Tabs.tabs","content":"Tabs.tabs \ntabs \n\nA Dash component that lets you render pages with tabs - the Tabs component\u0027s children\ncan be dcc.Tab components, which can hold a label that will be displayed as a tab, and can in turn hold\nchildren components that will be that tab\u0027s content.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 value (string) - The value of the currently selected Tab\n\n\n\u2022 className (string) - Appends a class to the Tabs container holding the individual Tab components.\n\n\n\u2022 content_className (string) - Appends a class to the Tab content container holding the children of the Tab that is selected.\n\n\n\u2022 parent_className (string) - Appends a class to the top-level parent container holding both the Tabs container and the content container.\n\n\n\u2022 style (record) - Appends (inline) styles to the Tabs container holding the individual Tab components.\n\n\n\u2022 parent_style (record) - Appends (inline) styles to the top-level parent container holding both the Tabs container and the content container.\n\n\n\u2022 content_style (record) - Appends (inline) styles to the tab content container holding the children of the Tab that is selected.\n\n\n\u2022 vertical (boolean; default false) - Renders the tabs vertically (on the side)\n\n\n\u2022 mobile_breakpoint (number; default 800) - Breakpoint at which tabs are rendered full width (can be 0 if you don\u0027t want full width tabs on mobile)\n\n\n\u2022 children (list with values of type: a list of or a singular dash component, string or number | a list of or a singular dash component, string or number) - Array that holds Tab components\n\n\n\u2022 colors (record with the fields: \u0027border: string (optional)\u0027, \u0027primary: string (optional)\u0027, \u0027background: string (optional)\u0027; default {\n    border: \u0027#d6d6d6\u0027,\n    primary: \u0027#1975FA\u0027,\n    background: \u0027#f9f9f9\u0027,\n}) - Holds the colors used by the Tabs and Tab components. If you set these, you should specify colors for all properties, so:\ncolors: {\n   border: \u0027#d6d6d6\u0027,\n   primary: \u0027#1975FA\u0027,\n   background: \u0027#f9f9f9\u0027\n }\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.colors \ncolors \nAttr.contentClassName \ncontentClassName \nAttr.contentStyle \ncontentStyle \nAttr.loadingState \nloadingState \nAttr.mobileBreakpoint \nmobileBreakpoint \nAttr.parentClassName \nparentClassName \nAttr.parentStyle \nparentStyle \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.persistenceType \npersistenceType \nAttr.style \nstyle \nAttr.value \nvalue \nAttr.vertical \nvertical \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nAppends a class to the Tabs container holding the individual Tab components.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#colors","title":"Attr.colors","content":"Attr.colors \ncolors \n\nHolds the colors used by the Tabs and Tab components. If you set these, you should specify colors for all properties, so:\ncolors: {\n   border: \u0027#d6d6d6\u0027,\n   primary: \u0027#1975FA\u0027,\n   background: \u0027#f9f9f9\u0027\n }\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#contentClassName","title":"Attr.contentClassName","content":"Attr.contentClassName \ncontentClassName \n\nAppends a class to the Tab content container holding the children of the Tab that is selected.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#contentStyle","title":"Attr.contentStyle","content":"Attr.contentStyle \ncontentStyle \n\nAppends (inline) styles to the tab content container holding the children of the Tab that is selected.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#mobileBreakpoint","title":"Attr.mobileBreakpoint","content":"Attr.mobileBreakpoint \nmobileBreakpoint \n\nBreakpoint at which tabs are rendered full width (can be 0 if you don\u0027t want full width tabs on mobile)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#parentClassName","title":"Attr.parentClassName","content":"Attr.parentClassName \nparentClassName \n\nAppends a class to the top-level parent container holding both the Tabs container and the content container.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#parentStyle","title":"Attr.parentStyle","content":"Attr.parentStyle \nparentStyle \n\nAppends (inline) styles to the top-level parent container holding both the Tabs container and the content container.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#persistenceType","title":"Attr.persistenceType","content":"Attr.persistenceType \npersistenceType \n\nWhere persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nAppends (inline) styles to the Tabs container holding the individual Tab components.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe value of the currently selected Tab\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#vertical","title":"Attr.vertical","content":"Attr.vertical \nvertical \n\nRenders the tabs vertically (on the side)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html","title":"Prop","content":"Prop \n\n\u2022 value (string) - The value of the currently selected Tab\n\n\n\u2022 className (string) - Appends a class to the Tabs container holding the individual Tab components.\n\n\n\u2022 content_className (string) - Appends a class to the Tab content container holding the children of the Tab that is selected.\n\n\n\u2022 parent_className (string) - Appends a class to the top-level parent container holding both the Tabs container and the content container.\n\n\n\u2022 style (record) - Appends (inline) styles to the Tabs container holding the individual Tab components.\n\n\n\u2022 parent_style (record) - Appends (inline) styles to the top-level parent container holding both the Tabs container and the content container.\n\n\n\u2022 content_style (record) - Appends (inline) styles to the tab content container holding the children of the Tab that is selected.\n\n\n\u2022 vertical (boolean; default false) - Renders the tabs vertically (on the side)\n\n\n\u2022 mobile_breakpoint (number; default 800) - Breakpoint at which tabs are rendered full width (can be 0 if you don\u0027t want full width tabs on mobile)\n\n\n\u2022 children (list with values of type: a list of or a singular dash component, string or number | a list of or a singular dash component, string or number) - Array that holds Tab components\n\n\n\u2022 colors (record with the fields: \u0027border: string (optional)\u0027, \u0027primary: string (optional)\u0027, \u0027background: string (optional)\u0027; default {\n    border: \u0027#d6d6d6\u0027,\n    primary: \u0027#1975FA\u0027,\n    background: \u0027#f9f9f9\u0027,\n}) - Holds the colors used by the Tabs and Tab components. If you set these, you should specify colors for all properties, so:\ncolors: {\n   border: \u0027#d6d6d6\u0027,\n   primary: \u0027#1975FA\u0027,\n   background: \u0027#f9f9f9\u0027\n }\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.ClassName \nClassName \nProp.Style \nStyle \nProp.Value \nValue \nProp.ContentClassName \nContentClassName \nProp.ParentClassName \nParentClassName \nProp.ParentStyle \nParentStyle \nProp.ContentStyle \nContentStyle \nProp.Vertical \nVertical \nProp.MobileBreakpoint \nMobileBreakpoint \nProp.Colors \nColors \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#ContentClassName","title":"Prop.ContentClassName","content":"Prop.ContentClassName \nContentClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#ParentClassName","title":"Prop.ParentClassName","content":"Prop.ParentClassName \nParentClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#ParentStyle","title":"Prop.ParentStyle","content":"Prop.ParentStyle \nParentStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#ContentStyle","title":"Prop.ContentStyle","content":"Prop.ContentStyle \nContentStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#Vertical","title":"Prop.Vertical","content":"Prop.Vertical \nVertical \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#MobileBreakpoint","title":"Prop.MobileBreakpoint","content":"Prop.MobileBreakpoint \nMobileBreakpoint \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#Colors","title":"Prop.Colors","content":"Prop.Colors \nColors \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-tabs.html","title":"Tabs","content":"Tabs \n\nA Dash component that lets you render pages with tabs - the Tabs component\u0027s children\ncan be dcc.Tab components, which can hold a label that will be displayed as a tab, and can in turn hold\nchildren components that will be that tab\u0027s content.\n \nTabs.( .ctor ) \n( .ctor ) \nTabs.applyMembers \napplyMembers \nTabs.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-tabs.html#( .ctor )","title":"Tabs.( .ctor )","content":"Tabs.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-tabs.html#applyMembers","title":"Tabs.applyMembers","content":"Tabs.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-tabs-tabs.html#init","title":"Tabs.init","content":"Tabs.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea.html","title":"Textarea","content":"Textarea \n\nA basic HTML textarea for entering multiline text.\n \nTextarea.Attr \nAttr \nTextarea.Prop \nProp \nTextarea.Textarea \nTextarea \nTextarea.textarea \ntextarea"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea.html#textarea","title":"Textarea.textarea","content":"Textarea.textarea \ntextarea \n\nA basic HTML textarea for entering multiline text.\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 value (string) - The value of the textarea\n\n\n\u2022 autoFocus (string) - The element should be automatically focused after the page loaded.\n\n\n\u2022 cols (string | number) - Defines the number of columns in a textarea.\n\n\n\u2022 disabled (string | boolean) - Indicates whether the user can interact with the element.\n\n\n\u2022 form (string) - Indicates the form that is the owner of the element.\n\n\n\u2022 maxLength (string | number) - Defines the maximum number of characters allowed in the element.\n\n\n\u2022 minLength (string | number) - Defines the minimum number of characters allowed in the element.\n\n\n\u2022 name (string) - Name of the element. For example used by the server to identify the fields in form submits.\n\n\n\u2022 placeholder (string) - Provides a hint to the user of what can be entered in the field.\n\n\n\u2022 readOnly (boolean | value equal to: \u0027readOnly\u0027, \u0027readonly\u0027, \u0027READONLY\u0027) - Indicates whether the element can be edited.\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or\n\u0027readOnly\u0027. Alternative capitalizations \u0060readonly\u0060 \u0026 \u0060READONLY\u0060\nare also acccepted.\n\n\n\u2022 required (value equal to: \u0027required\u0027, \u0027REQUIRED\u0027 | boolean) - Indicates whether this element is required to fill out or not.\nrequired is an HTML boolean attribute - it is enabled by a boolean or\n\u0027required\u0027. Alternative capitalizations \u0060REQUIRED\u0060\nare also acccepted.\n\n\n\u2022 rows (string | number) - Defines the number of rows in a text area.\n\n\n\u2022 wrap (string) - Indicates whether the text should be wrapped.\n\n\n\u2022 accessKey (string) - Defines a keyboard shortcut to activate or add focus to the element.\n\n\n\u2022 className (string) - Often used with CSS to style elements with common properties.\n\n\n\u2022 contentEditable (string | boolean) - Indicates whether the element\u0027s content is editable.\n\n\n\u2022 contextMenu (string) - Defines the ID of a \u003Cmenu\u003E element which will serve as the element\u0027s context menu.\n\n\n\u2022 dir (string) - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n\n\n\u2022 draggable (value equal to: \u0027true\u0027, \u0027false\u0027 | boolean) - Defines whether the element can be dragged.\n\n\n\u2022 hidden (string) - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n\n\n\u2022 lang (string) - Defines the language used in the element.\n\n\n\u2022 spellCheck (value equal to: \u0027true\u0027, \u0027false\u0027 | boolean) - Indicates whether spell checking is allowed for the element.\n\n\n\u2022 style (record) - Defines CSS styles which will override styles previously set.\n\n\n\u2022 tabIndex (string | number) - Overrides the browser\u0027s default tab order and follows the one specified instead.\n\n\n\u2022 title (string) - Text to be displayed in a tooltip when hovering over the element.\n\n\n\u2022 n_blur (number; default 0) - Number of times the textarea lost focus.\n\n\n\u2022 n_blur_timestamp (number; default -1) - Last time the textarea lost focus.\n\n\n\u2022 n_clicks (number; default 0) - Number of times the textarea has been clicked.\n\n\n\u2022 n_clicks_timestamp (number; default -1) - Last time the textarea was clicked.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.accessKey \naccessKey \nAttr.autoFocus \nautoFocus \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.cols \ncols \nAttr.contentEditable \ncontentEditable \nAttr.contextMenu \ncontextMenu \nAttr.dir \ndir \nAttr.disabled \ndisabled \nAttr.draggable \ndraggable \nAttr.form \nform \nAttr.hidden \nhidden \nAttr.lang \nlang \nAttr.loadingState \nloadingState \nAttr.maxLength \nmaxLength \nAttr.minLength \nminLength \nAttr.nBlur \nnBlur \nAttr.nBlurTimestamp \nnBlurTimestamp \nAttr.nClicks \nnClicks \nAttr.nClicksTimestamp \nnClicksTimestamp \nAttr.name \nname \nAttr.persistedProps \npersistedProps \nAttr.persistence \npersistence \nAttr.persistence \npersistence \nAttr.persistence \npersistence \nAttr.persistenceType \npersistenceType \nAttr.placeholder \nplaceholder \nAttr.readOnly \nreadOnly \nAttr.required \nrequired \nAttr.rows \nrows \nAttr.spellCheck \nspellCheck \nAttr.style \nstyle \nAttr.tabIndex \ntabIndex \nAttr.tabIndex \ntabIndex \nAttr.title \ntitle \nAttr.value \nvalue \nAttr.wrap \nwrap \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#accessKey","title":"Attr.accessKey","content":"Attr.accessKey \naccessKey \n\nDefines a keyboard shortcut to activate or add focus to the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#autoFocus","title":"Attr.autoFocus","content":"Attr.autoFocus \nautoFocus \n\nThe element should be automatically focused after the page loaded.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nOften used with CSS to style elements with common properties.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#cols","title":"Attr.cols","content":"Attr.cols \ncols \n\nDefines the number of columns in a textarea.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#contentEditable","title":"Attr.contentEditable","content":"Attr.contentEditable \ncontentEditable \n\nIndicates whether the element\u0027s content is editable.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#contextMenu","title":"Attr.contextMenu","content":"Attr.contextMenu \ncontextMenu \n\nDefines the ID of a \u003Cmenu\u003E element which will serve as the element\u0027s context menu.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#dir","title":"Attr.dir","content":"Attr.dir \ndir \n\nDefines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#disabled","title":"Attr.disabled","content":"Attr.disabled \ndisabled \n\nIndicates whether the user can interact with the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#draggable","title":"Attr.draggable","content":"Attr.draggable \ndraggable \n\nDefines whether the element can be dragged.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#form","title":"Attr.form","content":"Attr.form \nform \n\nIndicates the form that is the owner of the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#hidden","title":"Attr.hidden","content":"Attr.hidden \nhidden \n\nPrevents rendering of given element, while keeping child elements, e.g. script elements, active.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#lang","title":"Attr.lang","content":"Attr.lang \nlang \n\nDefines the language used in the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#maxLength","title":"Attr.maxLength","content":"Attr.maxLength \nmaxLength \n\nDefines the maximum number of characters allowed in the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#minLength","title":"Attr.minLength","content":"Attr.minLength \nminLength \n\nDefines the minimum number of characters allowed in the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#nBlur","title":"Attr.nBlur","content":"Attr.nBlur \nnBlur \n\nNumber of times the textarea lost focus.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#nBlurTimestamp","title":"Attr.nBlurTimestamp","content":"Attr.nBlurTimestamp \nnBlurTimestamp \n\nLast time the textarea lost focus.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#nClicks","title":"Attr.nClicks","content":"Attr.nClicks \nnClicks \n\nNumber of times the textarea has been clicked.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#nClicksTimestamp","title":"Attr.nClicksTimestamp","content":"Attr.nClicksTimestamp \nnClicksTimestamp \n\nLast time the textarea was clicked.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#name","title":"Attr.name","content":"Attr.name \nname \n\nName of the element. For example used by the server to identify the fields in form submits.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#persistedProps","title":"Attr.persistedProps","content":"Attr.persistedProps \npersistedProps \n\nProperties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#persistence","title":"Attr.persistence","content":"Attr.persistence \npersistence \n\nUsed to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#persistenceType","title":"Attr.persistenceType","content":"Attr.persistenceType \npersistenceType \n\nWhere persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#placeholder","title":"Attr.placeholder","content":"Attr.placeholder \nplaceholder \n\nProvides a hint to the user of what can be entered in the field.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#readOnly","title":"Attr.readOnly","content":"Attr.readOnly \nreadOnly \n\nIndicates whether the element can be edited.\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or\n\u0027readOnly\u0027. Alternative capitalizations \u0060readonly\u0060 \u0026 \u0060READONLY\u0060\nare also acccepted.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#required","title":"Attr.required","content":"Attr.required \nrequired \n\nIndicates whether this element is required to fill out or not.\nrequired is an HTML boolean attribute - it is enabled by a boolean or\n\u0027required\u0027. Alternative capitalizations \u0060REQUIRED\u0060\nare also acccepted.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#rows","title":"Attr.rows","content":"Attr.rows \nrows \n\nDefines the number of rows in a text area.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#spellCheck","title":"Attr.spellCheck","content":"Attr.spellCheck \nspellCheck \n\nIndicates whether spell checking is allowed for the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nDefines CSS styles which will override styles previously set.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#tabIndex","title":"Attr.tabIndex","content":"Attr.tabIndex \ntabIndex \n\nOverrides the browser\u0027s default tab order and follows the one specified instead.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#tabIndex","title":"Attr.tabIndex","content":"Attr.tabIndex \ntabIndex \n\nOverrides the browser\u0027s default tab order and follows the one specified instead.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#title","title":"Attr.title","content":"Attr.title \ntitle \n\nText to be displayed in a tooltip when hovering over the element.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#value","title":"Attr.value","content":"Attr.value \nvalue \n\nThe value of the textarea\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#wrap","title":"Attr.wrap","content":"Attr.wrap \nwrap \n\nIndicates whether the text should be wrapped.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html","title":"Prop","content":"Prop \n\n\u2022 value (string) - The value of the textarea\n\n\n\u2022 autoFocus (string) - The element should be automatically focused after the page loaded.\n\n\n\u2022 cols (string | number) - Defines the number of columns in a textarea.\n\n\n\u2022 disabled (string | boolean) - Indicates whether the user can interact with the element.\n\n\n\u2022 form (string) - Indicates the form that is the owner of the element.\n\n\n\u2022 maxLength (string | number) - Defines the maximum number of characters allowed in the element.\n\n\n\u2022 minLength (string | number) - Defines the minimum number of characters allowed in the element.\n\n\n\u2022 name (string) - Name of the element. For example used by the server to identify the fields in form submits.\n\n\n\u2022 placeholder (string) - Provides a hint to the user of what can be entered in the field.\n\n\n\u2022 readOnly (boolean | value equal to: \u0027readOnly\u0027, \u0027readonly\u0027, \u0027READONLY\u0027) - Indicates whether the element can be edited.\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or\n\u0027readOnly\u0027. Alternative capitalizations \u0060readonly\u0060 \u0026 \u0060READONLY\u0060\nare also acccepted.\n\n\n\u2022 required (value equal to: \u0027required\u0027, \u0027REQUIRED\u0027 | boolean) - Indicates whether this element is required to fill out or not.\nrequired is an HTML boolean attribute - it is enabled by a boolean or\n\u0027required\u0027. Alternative capitalizations \u0060REQUIRED\u0060\nare also acccepted.\n\n\n\u2022 rows (string | number) - Defines the number of rows in a text area.\n\n\n\u2022 wrap (string) - Indicates whether the text should be wrapped.\n\n\n\u2022 accessKey (string) - Defines a keyboard shortcut to activate or add focus to the element.\n\n\n\u2022 className (string) - Often used with CSS to style elements with common properties.\n\n\n\u2022 contentEditable (string | boolean) - Indicates whether the element\u0027s content is editable.\n\n\n\u2022 contextMenu (string) - Defines the ID of a \u003Cmenu\u003E element which will serve as the element\u0027s context menu.\n\n\n\u2022 dir (string) - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n\n\n\u2022 draggable (value equal to: \u0027true\u0027, \u0027false\u0027 | boolean) - Defines whether the element can be dragged.\n\n\n\u2022 hidden (string) - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n\n\n\u2022 lang (string) - Defines the language used in the element.\n\n\n\u2022 spellCheck (value equal to: \u0027true\u0027, \u0027false\u0027 | boolean) - Indicates whether spell checking is allowed for the element.\n\n\n\u2022 style (record) - Defines CSS styles which will override styles previously set.\n\n\n\u2022 tabIndex (string | number) - Overrides the browser\u0027s default tab order and follows the one specified instead.\n\n\n\u2022 title (string) - Text to be displayed in a tooltip when hovering over the element.\n\n\n\u2022 n_blur (number; default 0) - Number of times the textarea lost focus.\n\n\n\u2022 n_blur_timestamp (number; default -1) - Last time the textarea lost focus.\n\n\n\u2022 n_clicks (number; default 0) - Number of times the textarea has been clicked.\n\n\n\u2022 n_clicks_timestamp (number; default -1) - Last time the textarea was clicked.\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n\n\n\u2022 persistence (boolean | string | number) - Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If \u0060persisted\u0060 is truthy and\nhasn\u0027t changed from its previous value, a \u0060value\u0060 that the user has\nchanged while using the app will keep that change, as long as\nthe new \u0060value\u0060 also matches what was given originally.\nUsed in conjunction with \u0060persistence_type\u0060.\n\n\n\u2022 persisted_props (list with values of type: value equal to: \u0027value\u0027; default [\u0027value\u0027]) - Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only \u0060value\u0060 is allowed this prop can\nnormally be ignored.\n\n\n\u2022 persistence_type (value equal to: \u0027local\u0027, \u0027session\u0027, \u0027memory\u0027; default local) - Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.convert \nconvert \nProp.toPropName \ntoPropName \nProp.Value \nValue \nProp.AutoFocus \nAutoFocus \nProp.Cols \nCols \nProp.Disabled \nDisabled \nProp.Form \nForm \nProp.MaxLength \nMaxLength \nProp.MinLength \nMinLength \nProp.Name \nName \nProp.Placeholder \nPlaceholder \nProp.ReadOnly \nReadOnly \nProp.Required \nRequired \nProp.Rows \nRows \nProp.Wrap \nWrap \nProp.AccessKey \nAccessKey \nProp.ClassName \nClassName \nProp.ContentEditable \nContentEditable \nProp.ContextMenu \nContextMenu \nProp.Dir \nDir \nProp.Draggable \nDraggable \nProp.Hidden \nHidden \nProp.Lang \nLang \nProp.SpellCheck \nSpellCheck \nProp.Style \nStyle \nProp.TabIndex \nTabIndex \nProp.Title \nTitle \nProp.NBlur \nNBlur \nProp.NBlurTimestamp \nNBlurTimestamp \nProp.NClicks \nNClicks \nProp.NClicksTimestamp \nNClicksTimestamp \nProp.LoadingState \nLoadingState \nProp.Persistence \nPersistence \nProp.PersistedProps \nPersistedProps \nProp.PersistenceType \nPersistenceType"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#convert","title":"Prop.convert","content":"Prop.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#toPropName","title":"Prop.toPropName","content":"Prop.toPropName \ntoPropName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Value","title":"Prop.Value","content":"Prop.Value \nValue \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#AutoFocus","title":"Prop.AutoFocus","content":"Prop.AutoFocus \nAutoFocus \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Cols","title":"Prop.Cols","content":"Prop.Cols \nCols \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Disabled","title":"Prop.Disabled","content":"Prop.Disabled \nDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Form","title":"Prop.Form","content":"Prop.Form \nForm \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#MaxLength","title":"Prop.MaxLength","content":"Prop.MaxLength \nMaxLength \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#MinLength","title":"Prop.MinLength","content":"Prop.MinLength \nMinLength \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Name","title":"Prop.Name","content":"Prop.Name \nName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Placeholder","title":"Prop.Placeholder","content":"Prop.Placeholder \nPlaceholder \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#ReadOnly","title":"Prop.ReadOnly","content":"Prop.ReadOnly \nReadOnly \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Required","title":"Prop.Required","content":"Prop.Required \nRequired \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Rows","title":"Prop.Rows","content":"Prop.Rows \nRows \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Wrap","title":"Prop.Wrap","content":"Prop.Wrap \nWrap \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#AccessKey","title":"Prop.AccessKey","content":"Prop.AccessKey \nAccessKey \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#ContentEditable","title":"Prop.ContentEditable","content":"Prop.ContentEditable \nContentEditable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#ContextMenu","title":"Prop.ContextMenu","content":"Prop.ContextMenu \nContextMenu \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Dir","title":"Prop.Dir","content":"Prop.Dir \nDir \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Draggable","title":"Prop.Draggable","content":"Prop.Draggable \nDraggable \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Hidden","title":"Prop.Hidden","content":"Prop.Hidden \nHidden \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Lang","title":"Prop.Lang","content":"Prop.Lang \nLang \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#SpellCheck","title":"Prop.SpellCheck","content":"Prop.SpellCheck \nSpellCheck \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#TabIndex","title":"Prop.TabIndex","content":"Prop.TabIndex \nTabIndex \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Title","title":"Prop.Title","content":"Prop.Title \nTitle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#NBlur","title":"Prop.NBlur","content":"Prop.NBlur \nNBlur \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#NBlurTimestamp","title":"Prop.NBlurTimestamp","content":"Prop.NBlurTimestamp \nNBlurTimestamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#NClicks","title":"Prop.NClicks","content":"Prop.NClicks \nNClicks \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#NClicksTimestamp","title":"Prop.NClicksTimestamp","content":"Prop.NClicksTimestamp \nNClicksTimestamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#Persistence","title":"Prop.Persistence","content":"Prop.Persistence \nPersistence \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#PersistedProps","title":"Prop.PersistedProps","content":"Prop.PersistedProps \nPersistedProps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-prop.html#PersistenceType","title":"Prop.PersistenceType","content":"Prop.PersistenceType \nPersistenceType \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-textarea.html","title":"Textarea","content":"Textarea \n\nA basic HTML textarea for entering multiline text.\n \nTextarea.( .ctor ) \n( .ctor ) \nTextarea.applyMembers \napplyMembers \nTextarea.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-textarea.html#( .ctor )","title":"Textarea.( .ctor )","content":"Textarea.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-textarea.html#applyMembers","title":"Textarea.applyMembers","content":"Textarea.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-textarea-textarea.html#init","title":"Textarea.init","content":"Textarea.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload.html","title":"Upload","content":"Upload \n\nUpload components allow your app to accept user-uploaded files via drag\u0027n\u0027drop\n \nUpload.Attr \nAttr \nUpload.Prop \nProp \nUpload.Upload \nUpload \nUpload.UploadContents \nUploadContents \nUpload.UploadFileName \nUploadFileName \nUpload.UploadLastModified \nUploadLastModified \nUpload.upload \nupload"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload.html#upload","title":"Upload.upload","content":"Upload.upload \nupload \n\nUpload components allow your app to accept user-uploaded files via drag\u0027n\u0027drop\n\n\nProperties:\n\n\n\u2022 id (string) - The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n\n\n\u2022 contents (string | list with values of type: string) - The contents of the uploaded file as a binary string\n\n\n\u2022 filename (string | list with values of type: string) - The name of the file(s) that was(were) uploaded.\nNote that this does not include the path of the file\n(for security reasons).\n\n\n\u2022 last_modified (number | list with values of type: number) - The last modified date of the file that was uploaded in unix time\n(seconds since 1970).\n\n\n\u2022 children (a list of or a singular dash component, string or number | string) - Contents of the upload component\n\n\n\u2022 accept (string) - Allow specific types of files.\nSee https://github.com/okonet/attr-accept for more information.\nKeep in mind that mime type determination is not reliable across\nplatforms. CSV files, for example, are reported as text/plain\nunder macOS but as application/vnd.ms-excel under Windows.\nIn some cases there might not be a mime type set at all.\nSee: https://github.com/react-dropzone/react-dropzone/issues/276\n\n\n\u2022 disabled (boolean; default false) - Enable/disable the upload component entirely\n\n\n\u2022 disable_click (boolean; default false) - Disallow clicking on the component to open the file dialog\n\n\n\u2022 max_size (number; default -1) - Maximum file size in bytes. If \u0060-1\u0060, then infinite\n\n\n\u2022 min_size (number; default 0) - Minimum file size in bytes\n\n\n\u2022 multiple (boolean; default false) - Allow dropping multiple files\n\n\n\u2022 className (string) - HTML class name of the component\n\n\n\u2022 className_active (string) - HTML class name of the component while active\n\n\n\u2022 className_reject (string) - HTML class name of the component if rejected\n\n\n\u2022 className_disabled (string) - HTML class name of the component if disabled\n\n\n\u2022 style (record; default {}) - CSS styles to apply\n\n\n\u2022 style_active (record; default {\n    borderStyle: \u0027solid\u0027,\n    borderColor: \u0027#6c6\u0027,\n    backgroundColor: \u0027#eee\u0027,\n}) - CSS styles to apply while active\n\n\n\u2022 style_reject (record; default {\n    borderStyle: \u0027solid\u0027,\n    borderColor: \u0027#c66\u0027,\n    backgroundColor: \u0027#eee\u0027,\n}) - CSS styles if rejected\n\n\n\u2022 style_disabled (record; default {\n    opacity: 0.5,\n}) - CSS styles if disabled\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html","title":"Attr","content":"Attr \n\nA list of children or a property for this dash component\n \nAttr.accept \naccept \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.children \nchildren \nAttr.className \nclassName \nAttr.classNameActive \nclassNameActive \nAttr.classNameDisabled \nclassNameDisabled \nAttr.classNameReject \nclassNameReject \nAttr.contents \ncontents \nAttr.disableClick \ndisableClick \nAttr.disabled \ndisabled \nAttr.filename \nfilename \nAttr.lastModified \nlastModified \nAttr.loadingState \nloadingState \nAttr.maxSize \nmaxSize \nAttr.minSize \nminSize \nAttr.multiple \nmultiple \nAttr.style \nstyle \nAttr.styleActive \nstyleActive \nAttr.styleDisabled \nstyleDisabled \nAttr.styleReject \nstyleReject \nAttr.Prop \nProp \nAttr.Children \nChildren"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#accept","title":"Attr.accept","content":"Attr.accept \naccept \n\nAllow specific types of files.\nSee https://github.com/okonet/attr-accept for more information.\nKeep in mind that mime type determination is not reliable across\nplatforms. CSV files, for example, are reported as text/plain\nunder macOS but as application/vnd.ms-excel under Windows.\nIn some cases there might not be a mime type set at all.\nSee: https://github.com/react-dropzone/react-dropzone/issues/276\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#children","title":"Attr.children","content":"Attr.children \nchildren \n\nThe child or children of this dash component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#className","title":"Attr.className","content":"Attr.className \nclassName \n\nHTML class name of the component\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#classNameActive","title":"Attr.classNameActive","content":"Attr.classNameActive \nclassNameActive \n\nHTML class name of the component while active\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#classNameDisabled","title":"Attr.classNameDisabled","content":"Attr.classNameDisabled \nclassNameDisabled \n\nHTML class name of the component if disabled\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#classNameReject","title":"Attr.classNameReject","content":"Attr.classNameReject \nclassNameReject \n\nHTML class name of the component if rejected\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#contents","title":"Attr.contents","content":"Attr.contents \ncontents \n\nThe contents of the uploaded file as a binary string\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#disableClick","title":"Attr.disableClick","content":"Attr.disableClick \ndisableClick \n\nDisallow clicking on the component to open the file dialog\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#disabled","title":"Attr.disabled","content":"Attr.disabled \ndisabled \n\nEnable/disable the upload component entirely\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#filename","title":"Attr.filename","content":"Attr.filename \nfilename \n\nThe name of the file(s) that was(were) uploaded.\nNote that this does not include the path of the file\n(for security reasons).\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#lastModified","title":"Attr.lastModified","content":"Attr.lastModified \nlastModified \n\nThe last modified date of the file that was uploaded in unix time\n(seconds since 1970).\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#loadingState","title":"Attr.loadingState","content":"Attr.loadingState \nloadingState \n\nObject that holds the loading state object coming from dash-renderer\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#maxSize","title":"Attr.maxSize","content":"Attr.maxSize \nmaxSize \n\nMaximum file size in bytes. If \u0060-1\u0060, then infinite\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#minSize","title":"Attr.minSize","content":"Attr.minSize \nminSize \n\nMinimum file size in bytes\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#multiple","title":"Attr.multiple","content":"Attr.multiple \nmultiple \n\nAllow dropping multiple files\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#style","title":"Attr.style","content":"Attr.style \nstyle \n\nCSS styles to apply\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#styleActive","title":"Attr.styleActive","content":"Attr.styleActive \nstyleActive \n\nCSS styles to apply while active\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#styleDisabled","title":"Attr.styleDisabled","content":"Attr.styleDisabled \nstyleDisabled \n\nCSS styles if disabled\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#styleReject","title":"Attr.styleReject","content":"Attr.styleReject \nstyleReject \n\nCSS styles if rejected\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#Prop","title":"Attr.Prop","content":"Attr.Prop \nProp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-attr.html#Children","title":"Attr.Children","content":"Attr.Children \nChildren \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html","title":"Prop","content":"Prop \n\n\u2022 contents (string | list with values of type: string) - The contents of the uploaded file as a binary string\n\n\n\u2022 filename (string | list with values of type: string) - The name of the file(s) that was(were) uploaded.\nNote that this does not include the path of the file\n(for security reasons).\n\n\n\u2022 last_modified (number | list with values of type: number) - The last modified date of the file that was uploaded in unix time\n(seconds since 1970).\n\n\n\u2022 children (a list of or a singular dash component, string or number | string) - Contents of the upload component\n\n\n\u2022 accept (string) - Allow specific types of files.\nSee https://github.com/okonet/attr-accept for more information.\nKeep in mind that mime type determination is not reliable across\nplatforms. CSV files, for example, are reported as text/plain\nunder macOS but as application/vnd.ms-excel under Windows.\nIn some cases there might not be a mime type set at all.\nSee: https://github.com/react-dropzone/react-dropzone/issues/276\n\n\n\u2022 disabled (boolean; default false) - Enable/disable the upload component entirely\n\n\n\u2022 disable_click (boolean; default false) - Disallow clicking on the component to open the file dialog\n\n\n\u2022 max_size (number; default -1) - Maximum file size in bytes. If \u0060-1\u0060, then infinite\n\n\n\u2022 min_size (number; default 0) - Minimum file size in bytes\n\n\n\u2022 multiple (boolean; default false) - Allow dropping multiple files\n\n\n\u2022 className (string) - HTML class name of the component\n\n\n\u2022 className_active (string) - HTML class name of the component while active\n\n\n\u2022 className_reject (string) - HTML class name of the component if rejected\n\n\n\u2022 className_disabled (string) - HTML class name of the component if disabled\n\n\n\u2022 style (record; default {}) - CSS styles to apply\n\n\n\u2022 style_active (record; default {\n    borderStyle: \u0027solid\u0027,\n    borderColor: \u0027#6c6\u0027,\n    backgroundColor: \u0027#eee\u0027,\n}) - CSS styles to apply while active\n\n\n\u2022 style_reject (record; default {\n    borderStyle: \u0027solid\u0027,\n    borderColor: \u0027#c66\u0027,\n    backgroundColor: \u0027#eee\u0027,\n}) - CSS styles if rejected\n\n\n\u2022 style_disabled (record; default {\n    opacity: 0.5,\n}) - CSS styles if disabled\n\n\n\u2022 loading_state (record with the fields: \u0027is_loading: boolean (optional)\u0027, \u0027prop_name: string (optional)\u0027, \u0027component_name: string (optional)\u0027) - Object that holds the loading state object coming from dash-renderer\n \nProp.toDynamicMemberDef \ntoDynamicMemberDef \nProp.ClassName \nClassName \nProp.Contents \nContents \nProp.Filename \nFilename \nProp.LastModified \nLastModified \nProp.Accept \nAccept \nProp.Disabled \nDisabled \nProp.DisableClick \nDisableClick \nProp.MaxSize \nMaxSize \nProp.MinSize \nMinSize \nProp.Multiple \nMultiple \nProp.ClassNameActive \nClassNameActive \nProp.ClassNameReject \nClassNameReject \nProp.ClassNameDisabled \nClassNameDisabled \nProp.Style \nStyle \nProp.StyleActive \nStyleActive \nProp.StyleReject \nStyleReject \nProp.StyleDisabled \nStyleDisabled \nProp.LoadingState \nLoadingState"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#toDynamicMemberDef","title":"Prop.toDynamicMemberDef","content":"Prop.toDynamicMemberDef \ntoDynamicMemberDef \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#ClassName","title":"Prop.ClassName","content":"Prop.ClassName \nClassName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#Contents","title":"Prop.Contents","content":"Prop.Contents \nContents \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#Filename","title":"Prop.Filename","content":"Prop.Filename \nFilename \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#LastModified","title":"Prop.LastModified","content":"Prop.LastModified \nLastModified \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#Accept","title":"Prop.Accept","content":"Prop.Accept \nAccept \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#Disabled","title":"Prop.Disabled","content":"Prop.Disabled \nDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#DisableClick","title":"Prop.DisableClick","content":"Prop.DisableClick \nDisableClick \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#MaxSize","title":"Prop.MaxSize","content":"Prop.MaxSize \nMaxSize \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#MinSize","title":"Prop.MinSize","content":"Prop.MinSize \nMinSize \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#Multiple","title":"Prop.Multiple","content":"Prop.Multiple \nMultiple \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#ClassNameActive","title":"Prop.ClassNameActive","content":"Prop.ClassNameActive \nClassNameActive \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#ClassNameReject","title":"Prop.ClassNameReject","content":"Prop.ClassNameReject \nClassNameReject \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#ClassNameDisabled","title":"Prop.ClassNameDisabled","content":"Prop.ClassNameDisabled \nClassNameDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#Style","title":"Prop.Style","content":"Prop.Style \nStyle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#StyleActive","title":"Prop.StyleActive","content":"Prop.StyleActive \nStyleActive \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#StyleReject","title":"Prop.StyleReject","content":"Prop.StyleReject \nStyleReject \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#StyleDisabled","title":"Prop.StyleDisabled","content":"Prop.StyleDisabled \nStyleDisabled \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-prop.html#LoadingState","title":"Prop.LoadingState","content":"Prop.LoadingState \nLoadingState \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-upload.html","title":"Upload","content":"Upload \n\nUpload components allow your app to accept user-uploaded files via drag\u0027n\u0027drop\n \nUpload.( .ctor ) \n( .ctor ) \nUpload.applyMembers \napplyMembers \nUpload.init \ninit"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-upload.html#( .ctor )","title":"Upload.( .ctor )","content":"Upload.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-upload.html#applyMembers","title":"Upload.applyMembers","content":"Upload.applyMembers \napplyMembers \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-upload.html#init","title":"Upload.init","content":"Upload.init \ninit \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadcontents.html","title":"UploadContents","content":"UploadContents \n \nUploadContents.convert \nconvert \nUploadContents.SingleContent \nSingleContent \nUploadContents.MultipleContent \nMultipleContent"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadcontents.html#convert","title":"UploadContents.convert","content":"UploadContents.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadcontents.html#SingleContent","title":"UploadContents.SingleContent","content":"UploadContents.SingleContent \nSingleContent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadcontents.html#MultipleContent","title":"UploadContents.MultipleContent","content":"UploadContents.MultipleContent \nMultipleContent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadfilename.html","title":"UploadFileName","content":"UploadFileName \n \nUploadFileName.convert \nconvert \nUploadFileName.SingleFile \nSingleFile \nUploadFileName.MultipleFiles \nMultipleFiles"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadfilename.html#convert","title":"UploadFileName.convert","content":"UploadFileName.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadfilename.html#SingleFile","title":"UploadFileName.SingleFile","content":"UploadFileName.SingleFile \nSingleFile \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadfilename.html#MultipleFiles","title":"UploadFileName.MultipleFiles","content":"UploadFileName.MultipleFiles \nMultipleFiles \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadlastmodified.html","title":"UploadLastModified","content":"UploadLastModified \n \nUploadLastModified.convert \nconvert \nUploadLastModified.SingleTimeStamp \nSingleTimeStamp \nUploadLastModified.MultipleTimeStamps \nMultipleTimeStamps"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadlastmodified.html#convert","title":"UploadLastModified.convert","content":"UploadLastModified.convert \nconvert \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadlastmodified.html#SingleTimeStamp","title":"UploadLastModified.SingleTimeStamp","content":"UploadLastModified.SingleTimeStamp \nSingleTimeStamp \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-dcc-upload-uploadlastmodified.html#MultipleTimeStamps","title":"UploadLastModified.MultipleTimeStamps","content":"UploadLastModified.MultipleTimeStamps \nMultipleTimeStamps \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html","title":"Views","content":"Views \n \nViews.IndexView \nIndexView \nViews.createConfigScript \ncreateConfigScript \nViews.defaultRenderer \ndefaultRenderer \nViews.createRendererScript \ncreateRendererScript \nViews.createFaviconLink \ncreateFaviconLink \nViews.defaultAppEntry \ndefaultAppEntry \nViews.defaultCSS \ndefaultCSS \nViews.dashCDNScripts \ndashCDNScripts \nViews.createIndex \ncreateIndex"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#createConfigScript","title":"Views.createConfigScript","content":"Views.createConfigScript \ncreateConfigScript \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#defaultRenderer","title":"Views.defaultRenderer","content":"Views.defaultRenderer \ndefaultRenderer \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#createRendererScript","title":"Views.createRendererScript","content":"Views.createRendererScript \ncreateRendererScript \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#createFaviconLink","title":"Views.createFaviconLink","content":"Views.createFaviconLink \ncreateFaviconLink \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#defaultAppEntry","title":"Views.defaultAppEntry","content":"Views.defaultAppEntry \ndefaultAppEntry \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#defaultCSS","title":"Views.defaultCSS","content":"Views.defaultCSS \ndefaultCSS \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#dashCDNScripts","title":"Views.dashCDNScripts","content":"Views.dashCDNScripts \ndashCDNScripts \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views.html#createIndex","title":"Views.createIndex","content":"Views.createIndex \ncreateIndex \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html","title":"IndexView","content":"IndexView \n \nIndexView.appendCSSLinks \nappendCSSLinks \nIndexView.appendMetas \nappendMetas \nIndexView.appendScripts \nappendScripts \nIndexView.create \ncreate \nIndexView.initDefault \ninitDefault \nIndexView.initDefaultWith \ninitDefaultWith \nIndexView.toHTMLComponent \ntoHTMLComponent \nIndexView.withCSSLinks \nwithCSSLinks \nIndexView.withConfig \nwithConfig \nIndexView.withMetas \nwithMetas \nIndexView.withScripts \nwithScripts \nIndexView.Metas \nMetas \nIndexView.AppTitle \nAppTitle \nIndexView.FaviconPath \nFaviconPath \nIndexView.CSS \nCSS \nIndexView.AppEntry \nAppEntry \nIndexView.Config \nConfig \nIndexView.Scripts \nScripts \nIndexView.Renderer \nRenderer"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#appendCSSLinks","title":"IndexView.appendCSSLinks","content":"IndexView.appendCSSLinks \nappendCSSLinks \n\nreturns an IndexView with the given css link tag appended to the ones already in place.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#appendMetas","title":"IndexView.appendMetas","content":"IndexView.appendMetas \nappendMetas \n\nreturns an IndexView with the given meta tag appended to the ones already in place.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#appendScripts","title":"IndexView.appendScripts","content":"IndexView.appendScripts \nappendScripts \n\nreturns an IndexView with the given script tag appended to the ones already in place.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#create","title":"IndexView.create","content":"IndexView.create \ncreate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#initDefault","title":"IndexView.initDefault","content":"IndexView.initDefault \ninitDefault \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#initDefaultWith","title":"IndexView.initDefaultWith","content":"IndexView.initDefaultWith \ninitDefaultWith \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#toHTMLComponent","title":"IndexView.toHTMLComponent","content":"IndexView.toHTMLComponent \ntoHTMLComponent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#withCSSLinks","title":"IndexView.withCSSLinks","content":"IndexView.withCSSLinks \nwithCSSLinks \n\nreturns an IndexView with the given css link tags in place of the old.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#withConfig","title":"IndexView.withConfig","content":"IndexView.withConfig \nwithConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#withMetas","title":"IndexView.withMetas","content":"IndexView.withMetas \nwithMetas \n\nreturns an IndexView with the given meta tags in place of the old.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#withScripts","title":"IndexView.withScripts","content":"IndexView.withScripts \nwithScripts \n\nreturns an IndexView with the given script tags in place of the old.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#Metas","title":"IndexView.Metas","content":"IndexView.Metas \nMetas \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#AppTitle","title":"IndexView.AppTitle","content":"IndexView.AppTitle \nAppTitle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#FaviconPath","title":"IndexView.FaviconPath","content":"IndexView.FaviconPath \nFaviconPath \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#CSS","title":"IndexView.CSS","content":"IndexView.CSS \nCSS \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#AppEntry","title":"IndexView.AppEntry","content":"IndexView.AppEntry \nAppEntry \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#Config","title":"IndexView.Config","content":"IndexView.Config \nConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#Scripts","title":"IndexView.Scripts","content":"IndexView.Scripts \nScripts \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-views-indexview.html#Renderer","title":"IndexView.Renderer","content":"IndexView.Renderer \nRenderer \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html","title":"DashApp","content":"DashApp \n \nDashApp.addCallback \naddCallback \nDashApp.addCallbacks \naddCallbacks \nDashApp.appendCSSLinks \nappendCSSLinks \nDashApp.appendScripts \nappendScripts \nDashApp.getIndexHTML \ngetIndexHTML \nDashApp.initDefault \ninitDefault \nDashApp.initDefaultWith \ninitDefaultWith \nDashApp.mapIndex \nmapIndex \nDashApp.run \nrun \nDashApp.toHttpHandler \ntoHttpHandler \nDashApp.withConfig \nwithConfig \nDashApp.withIndex \nwithIndex \nDashApp.withLayout \nwithLayout \nDashApp.Index \nIndex \nDashApp.Layout \nLayout \nDashApp.Config \nConfig \nDashApp.Callbacks \nCallbacks"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#addCallback","title":"DashApp.addCallback","content":"DashApp.addCallback \naddCallback \n\n Returns a new DashApp with the given callback added to the original Callback register\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#addCallbacks","title":"DashApp.addCallbacks","content":"DashApp.addCallbacks \naddCallbacks \n\n Returns a new DashApp with the given callbacks added to the original Callback register\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#appendCSSLinks","title":"DashApp.appendCSSLinks","content":"DashApp.appendCSSLinks \nappendCSSLinks \n\n Returns a new DashApp with the given css source links appended to the original IndexView\u0027s css register as link tags\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#appendScripts","title":"DashApp.appendScripts","content":"DashApp.appendScripts \nappendScripts \n\n Returns a new DashApp with the given script source links appended to the original IndexView\u0027s script register as script tags\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#getIndexHTML","title":"DashApp.getIndexHTML","content":"DashApp.getIndexHTML \ngetIndexHTML \n\n Returns the given DashApp\u0027s index DOM\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#initDefault","title":"DashApp.initDefault","content":"DashApp.initDefault \ninitDefault \n\n Returns a DashApp with all fields initialized with default values.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#initDefaultWith","title":"DashApp.initDefaultWith","content":"DashApp.initDefaultWith \ninitDefaultWith \n\n Returns the result of applying an initializer function to a DashApp with all fields initialized with default values.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#mapIndex","title":"DashApp.mapIndex","content":"DashApp.mapIndex \nmapIndex \n\n Returns a new DashApp with a new IndexView created by applying the mapping function to the original IndexView.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#run","title":"DashApp.run","content":"DashApp.run \nrun \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#toHttpHandler","title":"DashApp.toHttpHandler","content":"DashApp.toHttpHandler \ntoHttpHandler \n\n Returns the DasApp as a http handler to use as Giraffe middleware in an asp.netcore pipeline. \n\n This application will provide the following endpoints:\n\n GET / -\u003E serves the DashApps IndexView (This is also where the Das renderer will render the layout)\n\n GET /_dash-layout -\u003E serves the DashApp\u0027s layout as JSON\n\n GET /_dash-dependencies -\u003E serves the serialized callback handlers registered in the DashApp\u0027s callback register as JSON\n\n GET /_reload-hash -\u003E Not implemented, returns empty JSON object\n\n POST /_dash-update-component -\u003E handles callback requests and returns serialized callback JSON responses.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#withConfig","title":"DashApp.withConfig","content":"DashApp.withConfig \nwithConfig \n\n Returns a new DashApp with the original DashConfig replaced by the given DashConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#withIndex","title":"DashApp.withIndex","content":"DashApp.withIndex \nwithIndex \n\n Returns a new DashApp with the original IndexView replaced by the given IndexView \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#withLayout","title":"DashApp.withLayout","content":"DashApp.withLayout \nwithLayout \n\n Returns a new DashApp with the original Layout replaced by the given Layout \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#Index","title":"DashApp.Index","content":"DashApp.Index \nIndex \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#Layout","title":"DashApp.Layout","content":"DashApp.Layout \nLayout \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#Config","title":"DashApp.Config","content":"DashApp.Config \nConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashapp.html#Callbacks","title":"DashApp.Callbacks","content":"DashApp.Callbacks \nCallbacks \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html","title":"DashGiraffeConfig","content":"DashGiraffeConfig \n \nDashGiraffeConfig.initDebug \ninitDebug \nDashGiraffeConfig.initDefault \ninitDefault \nDashGiraffeConfig.HostName \nHostName \nDashGiraffeConfig.LogLevel \nLogLevel \nDashGiraffeConfig.IpAddress \nIpAddress \nDashGiraffeConfig.Port \nPort \nDashGiraffeConfig.ErrorHandler \nErrorHandler"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html#initDebug","title":"DashGiraffeConfig.initDebug","content":"DashGiraffeConfig.initDebug \ninitDebug \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html#initDefault","title":"DashGiraffeConfig.initDefault","content":"DashGiraffeConfig.initDefault \ninitDefault \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html#HostName","title":"DashGiraffeConfig.HostName","content":"DashGiraffeConfig.HostName \nHostName \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html#LogLevel","title":"DashGiraffeConfig.LogLevel","content":"DashGiraffeConfig.LogLevel \nLogLevel \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html#IpAddress","title":"DashGiraffeConfig.IpAddress","content":"DashGiraffeConfig.IpAddress \nIpAddress \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html#Port","title":"DashGiraffeConfig.Port","content":"DashGiraffeConfig.Port \nPort \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-giraffe-dashgiraffeconfig.html#ErrorHandler","title":"DashGiraffeConfig.ErrorHandler","content":"DashGiraffeConfig.ErrorHandler \nErrorHandler \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-interactive-util.html","title":"Util","content":"Util \n \nUtil.formatter \nformatter"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-interactive-util.html#formatter","title":"Util.formatter","content":"Util.formatter \nformatter \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-interactive-dashinteractiveextension.html","title":"DashInteractiveExtension","content":"DashInteractiveExtension \n \nDashInteractiveExtension.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-interactive-dashinteractiveextension.html#( .ctor )","title":"DashInteractiveExtension.( .ctor )","content":"DashInteractiveExtension.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-util.html","title":"Util","content":"Util \n \nUtil.settings \nsettings \nUtil.json \njson \nUtil.unjson \nunjson"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-util.html#settings","title":"Util.settings","content":"Util.settings \nsettings \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-util.html#json","title":"Util.json","content":"Util.json \njson \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-util.html#unjson","title":"Util.unjson","content":"Util.unjson \nunjson \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html","title":"Views","content":"Views \n \nViews.IndexView \nIndexView \nViews.createConfigScript \ncreateConfigScript \nViews.defaultRenderer \ndefaultRenderer \nViews.createRendererScript \ncreateRendererScript \nViews.createFaviconLink \ncreateFaviconLink \nViews.defaultAppEntry \ndefaultAppEntry \nViews.defaultCSS \ndefaultCSS \nViews.dashCDNScripts \ndashCDNScripts"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html#createConfigScript","title":"Views.createConfigScript","content":"Views.createConfigScript \ncreateConfigScript \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html#defaultRenderer","title":"Views.defaultRenderer","content":"Views.defaultRenderer \ndefaultRenderer \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html#createRendererScript","title":"Views.createRendererScript","content":"Views.createRendererScript \ncreateRendererScript \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html#createFaviconLink","title":"Views.createFaviconLink","content":"Views.createFaviconLink \ncreateFaviconLink \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html#defaultAppEntry","title":"Views.defaultAppEntry","content":"Views.defaultAppEntry \ndefaultAppEntry \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html#defaultCSS","title":"Views.defaultCSS","content":"Views.defaultCSS \ndefaultCSS \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views.html#dashCDNScripts","title":"Views.dashCDNScripts","content":"Views.dashCDNScripts \ndashCDNScripts \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html","title":"IndexView","content":"IndexView \n \nIndexView.appendCSSLinks \nappendCSSLinks \nIndexView.appendMetas \nappendMetas \nIndexView.appendScripts \nappendScripts \nIndexView.create \ncreate \nIndexView.initDefault \ninitDefault \nIndexView.initDefaultWith \ninitDefaultWith \nIndexView.toHTMLComponent \ntoHTMLComponent \nIndexView.withCSSLinks \nwithCSSLinks \nIndexView.withConfig \nwithConfig \nIndexView.withMetas \nwithMetas \nIndexView.withScripts \nwithScripts \nIndexView.Metas \nMetas \nIndexView.AppTitle \nAppTitle \nIndexView.FaviconPath \nFaviconPath \nIndexView.CSS \nCSS \nIndexView.AppEntry \nAppEntry \nIndexView.Config \nConfig \nIndexView.Scripts \nScripts \nIndexView.Renderer \nRenderer"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#appendCSSLinks","title":"IndexView.appendCSSLinks","content":"IndexView.appendCSSLinks \nappendCSSLinks \n\nreturns an IndexView with the given css link tag appended to the ones already in place.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#appendMetas","title":"IndexView.appendMetas","content":"IndexView.appendMetas \nappendMetas \n\nreturns an IndexView with the given meta tag appended to the ones already in place.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#appendScripts","title":"IndexView.appendScripts","content":"IndexView.appendScripts \nappendScripts \n\nreturns an IndexView with the given script tag appended to the ones already in place.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#create","title":"IndexView.create","content":"IndexView.create \ncreate \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#initDefault","title":"IndexView.initDefault","content":"IndexView.initDefault \ninitDefault \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#initDefaultWith","title":"IndexView.initDefaultWith","content":"IndexView.initDefaultWith \ninitDefaultWith \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#toHTMLComponent","title":"IndexView.toHTMLComponent","content":"IndexView.toHTMLComponent \ntoHTMLComponent \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#withCSSLinks","title":"IndexView.withCSSLinks","content":"IndexView.withCSSLinks \nwithCSSLinks \n\nreturns an IndexView with the given css link tags in place of the old.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#withConfig","title":"IndexView.withConfig","content":"IndexView.withConfig \nwithConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#withMetas","title":"IndexView.withMetas","content":"IndexView.withMetas \nwithMetas \n\nreturns an IndexView with the given meta tags in place of the old.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#withScripts","title":"IndexView.withScripts","content":"IndexView.withScripts \nwithScripts \n\nreturns an IndexView with the given script tags in place of the old.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#Metas","title":"IndexView.Metas","content":"IndexView.Metas \nMetas \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#AppTitle","title":"IndexView.AppTitle","content":"IndexView.AppTitle \nAppTitle \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#FaviconPath","title":"IndexView.FaviconPath","content":"IndexView.FaviconPath \nFaviconPath \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#CSS","title":"IndexView.CSS","content":"IndexView.CSS \nCSS \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#AppEntry","title":"IndexView.AppEntry","content":"IndexView.AppEntry \nAppEntry \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#Config","title":"IndexView.Config","content":"IndexView.Config \nConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#Scripts","title":"IndexView.Scripts","content":"IndexView.Scripts \nScripts \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-views-indexview.html#Renderer","title":"IndexView.Renderer","content":"IndexView.Renderer \nRenderer \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html","title":"DashApp","content":"DashApp \n \nDashApp.addCallback \naddCallback \nDashApp.addCallbacks \naddCallbacks \nDashApp.appendCSSLinks \nappendCSSLinks \nDashApp.appendScripts \nappendScripts \nDashApp.getIndexHTML \ngetIndexHTML \nDashApp.initDefault \ninitDefault \nDashApp.initDefaultWith \ninitDefaultWith \nDashApp.mapIndex \nmapIndex \nDashApp.run \nrun \nDashApp.runAsync \nrunAsync \nDashApp.toWebPart \ntoWebPart \nDashApp.withConfig \nwithConfig \nDashApp.withIndex \nwithIndex \nDashApp.withLayout \nwithLayout \nDashApp.Index \nIndex \nDashApp.Layout \nLayout \nDashApp.Config \nConfig \nDashApp.Callbacks \nCallbacks"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#addCallback","title":"DashApp.addCallback","content":"DashApp.addCallback \naddCallback \n\n Returns a new DashApp with the given callback added to the original Callback register\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#addCallbacks","title":"DashApp.addCallbacks","content":"DashApp.addCallbacks \naddCallbacks \n\n Returns a new DashApp with the given callbacks added to the original Callback register\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#appendCSSLinks","title":"DashApp.appendCSSLinks","content":"DashApp.appendCSSLinks \nappendCSSLinks \n\n Returns a new DashApp with the given css source links appended to the original IndexView\u0027s css register as link tags\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#appendScripts","title":"DashApp.appendScripts","content":"DashApp.appendScripts \nappendScripts \n\n Returns a new DashApp with the given script source links appended to the original IndexView\u0027s script register as script tags\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#getIndexHTML","title":"DashApp.getIndexHTML","content":"DashApp.getIndexHTML \ngetIndexHTML \n\n Returns the given DashApp\u0027s index DOM\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#initDefault","title":"DashApp.initDefault","content":"DashApp.initDefault \ninitDefault \n\n Returns a DashApp with all fields initialized with default values.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#initDefaultWith","title":"DashApp.initDefaultWith","content":"DashApp.initDefaultWith \ninitDefaultWith \n\n Returns the result of applying an initializer function to a DashApp with all fields initialized with default values.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#mapIndex","title":"DashApp.mapIndex","content":"DashApp.mapIndex \nmapIndex \n\n Returns a new DashApp with a new IndexView created by applying the mapping function to the original IndexView.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#run","title":"DashApp.run","content":"DashApp.run \nrun \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#runAsync","title":"DashApp.runAsync","content":"DashApp.runAsync \nrunAsync \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#toWebPart","title":"DashApp.toWebPart","content":"DashApp.toWebPart \ntoWebPart \n\n Returns the DasApp as a http handler to use as Giraffe middleware in an asp.netcore pipeline. \n\n This application will provide the following endpoints:\n\n GET / -\u003E serves the DashApps IndexView (This is also where the Das renderer will render the layout)\n\n GET /_dash-layout -\u003E serves the DashApp\u0027s layout as JSON\n\n GET /_dash-dependencies -\u003E serves the serialized callback handlers registered in the DashApp\u0027s callback register as JSON\n\n GET /_reload-hash -\u003E Not implemented, returns empty JSON object\n\n POST /_dash-update-component -\u003E handles callback requests and returns serialized callback JSON responses.\n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#withConfig","title":"DashApp.withConfig","content":"DashApp.withConfig \nwithConfig \n\n Returns a new DashApp with the original DashConfig replaced by the given DashConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#withIndex","title":"DashApp.withIndex","content":"DashApp.withIndex \nwithIndex \n\n Returns a new DashApp with the original IndexView replaced by the given IndexView \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#withLayout","title":"DashApp.withLayout","content":"DashApp.withLayout \nwithLayout \n\n Returns a new DashApp with the original Layout replaced by the given Layout \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#Index","title":"DashApp.Index","content":"DashApp.Index \nIndex \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#Layout","title":"DashApp.Layout","content":"DashApp.Layout \nLayout \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#Config","title":"DashApp.Config","content":"DashApp.Config \nConfig \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashapp.html#Callbacks","title":"DashApp.Callbacks","content":"DashApp.Callbacks \nCallbacks \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashsuaveconfig.html","title":"DashSuaveConfig","content":"DashSuaveConfig \n \nDashSuaveConfig.hostname \nhostname \nDashSuaveConfig.ip \nip \nDashSuaveConfig.port \nport \nDashSuaveConfig.errorHandler \nerrorHandler"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashsuaveconfig.html#hostname","title":"DashSuaveConfig.hostname","content":"DashSuaveConfig.hostname \nhostname \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashsuaveconfig.html#ip","title":"DashSuaveConfig.ip","content":"DashSuaveConfig.ip \nip \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashsuaveconfig.html#port","title":"DashSuaveConfig.port","content":"DashSuaveConfig.port \nport \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/dash-net-suave-dashsuaveconfig.html#errorHandler","title":"DashSuaveConfig.errorHandler","content":"DashSuaveConfig.errorHandler \nerrorHandler \n"},{"uri":"https://plotly.github.io/Dash.NET/reference/global-callbackbuilder.html","title":"CallbackBuilder","content":"CallbackBuilder \n"},{"uri":"https://plotly.github.io/Dash.NET/index.html","title":"Dash.NET\r\n","content":"# Dash.NET\r\n\r\n![](img/logo_title.svg)\r\n\r\nDash.NET is a .NET interface to [Dash](https://plotly.com/dash/) - the most downloaded framework for building ML \u0026amp; data science web apps - written in F#. Built on top of Plotly.js, React and asp.netcore (via Giraffe), Dash.NET ties modern UI elements like dropdowns, sliders, and graphs directly to your analytical .NET code.\r\n\r\nThis library is under heavy development. Things might break. However, Dash.NET has a stable core and has already been used for non trivial applications ([example1](https://github.com/CSBiology/TMEA), [example2](https://github.com/TRR175/ExploreKinetics)). The current development goal is to implement all targets set in the [beta roadmap](https://github.com/plotly/Dash.NET/issues/4), where you can also see a summary of the state of the project.\r\n\r\nThe documentation is WIP as well.\r\n\r\n# Table of contents\r\n\r\n\u003C!-- TOC --\u003E\r\n\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n    - [Basic application](#basic-application)\r\n    - [Referencing content](#referencing-content)\r\n    - [Dash Core components (DCC)](#dash-core-components-dcc)\r\n    - [callbacks](#callbacks)\r\n        - [single output](#single-output)\r\n        - [using Dash.NET operators](#using-dashnet-operators)\r\n        - [multiple outputs](#multiple-outputs)\r\n        - [Recommendations for callbacks (especially multi output callbacks)](#recommendations-for-callbacks-especially-multi-output-callbacks)\r\n    - [Using state](#using-state)\r\n    - [build](#build)\r\n    - [docs](#docs)\r\n    - [Run the dev server application](#run-the-dev-server-application)\r\n\r\n\u003C!-- /TOC --\u003E\r\n\r\n## Installation\r\n\r\nGet the latest preview package via nuget: [![](https://img.shields.io/nuget/vpre/Dash.NET)](https://www.nuget.org/packages/Dash.NET/)\r\n\r\nUse the \u0060dotnet new\u0060 template: \r\n\r\n\u0060dotnet new -i Dash.NET.Template::*\u0060 \r\n\r\n(watch out, this template might not use the latest Dash.NET package, take a look at the referenced version and update if needed )\r\n\r\n\r\n## Usage\r\n\r\nIn Dash.NET, everything is basically about constructing a \u0060DashApp\u0060 that holds all parts of your dash application, such as:\r\n-  the \u0060Layout\u0060, which holds the UI components of your application\r\n- \u0060Callbacks\u0060 that handle how different components in your \u0060Layout\u0060 interact with each other\r\n- Various server and renderer configurations via \u0060DashConfig\u0060\r\n- The \u0060IndexView\u0060 template that controls the html scaffold that holds the rendered application.\r\n\r\nThe most simple (and boring) Dash.NET application looks like this:\r\n\r\n\u0060\u0060\u0060fsharp\r\nopen Dash.NET\r\n\r\nlet myApp = DashApp.initDefault()\r\n\u0060\u0060\u0060\r\n\r\nWhich creates a \u0060DashApp\u0060 with all fields initialized with empty defaults. The http handler for a \u0060DashApp\u0060 can be accessed via the \u0060DashApp.toHttpHandler\u0060 function to plug it into your aps.netcore application configuration function via \u0060UseGiraffe\u0060 (for more info, check out Giraffe docs or take a look at the [dev project in this repo](https://github.com/plotly/Dash.NET/blob/dev/dev/Program.fs#L104))\r\n\r\n### Basic application\r\n\r\nTo get actual content into the default application, it needs a \u0060Layout\u0060. \u0060Layout\u0060s can be created via Dash.NET\u0027s DSL for html components, where the first function parameter is always a list of properties (e.g. for setting css classes), and the second a list of children.\r\n\r\n\u0060\u0060\u0060fsharp\r\n\r\n//Will create the following html:\r\n//\u003Cdiv\u003E\r\n//  \u003Ch1\u003E\u0022Hello world from Dash.NET!\u0022\u003C/h1\u003E\r\n//\u003C/div\u003E\r\n//\r\nopen Dash.NET.Html\r\n\r\nlet myLayout = \r\n    Html.div [\r\n        Attr.children [\r\n            Html.h1 [\r\n                Attr.children \u0022Hello world from Dash.NET!\u0022\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet test = \r\n    DashApp.initDefault()\r\n    |\u003E DashApp.withLayout myLayout\r\n\r\n\u0060\u0060\u0060\r\n\r\n![](img/hello-world.png)\r\n\r\n---\r\n\r\n\u003Cbr\u003E\r\n\r\n### Referencing content\r\n\r\nYou can include internal and external stylesheets and scripts via \u0060DashApp.appendCSSLinks\u0060 and \u0060DashApp.appendScripts\u0060:\r\n\r\nLet\u0027s say you have the following \u0060main.css\u0060 file in your wwwroot directory (served from \u0060/main.css\u0060)\r\n\r\n\u0060\u0060\u0060CSS\r\nh1 {\r\n    font-size: 1.5em;\r\n    color: green;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nyou can reference it from your \u0060DashApp\u0060 like this (using the basic example from above):\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet test = \r\n    DashApp.initDefault()\r\n    |\u003E DashApp.withLayout myLayout\r\n    |\u003E DashApp.appendCSSLinks [\u0022main.css\u0022]\r\n\r\n\u0060\u0060\u0060\r\n\r\n![](img/hello-world-green.png)\r\n\r\n---\r\n\r\nIf you want to reference external content (e.g. a CSS framework like [Bulma](https://bulma.io/)), you can do that as well. To use the classes defined there, set the \u0060ClassName\u0060 accordingly:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet myLayout3 = \r\n    Html.div [\r\n        Attr.children [\r\n            Html.h1 [\r\n                Attr.className \u0022title is-1\u0022\r\n                Attr.children \u0022Hello world from Dash.NET!\u0022\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet test3 = \r\n    DashApp.initDefault()\r\n    |\u003E DashApp.withLayout myLayout3\r\n    |\u003E DashApp.appendCSSLinks [\r\n        \u0022https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.1/css/bulma.min.css\u0022\r\n    ]\r\n\r\n\u0060\u0060\u0060\r\n\r\n![](img/hello-world-bulma.png)\r\n\r\n---\r\n\r\n### Dash Core components (DCC)\r\n\r\nYou can also use most dash core components. The following example uses the Plotly.NET to create a plotly graph component. Note that all core components must have a nunique id, and therefore have the mandatory id parameter:\r\n\r\n\u0060\u0060\u0060fsharp\r\n\r\nopen Dash.NET.Html\r\nopen Dash.NET.DCC\r\nopen Plotly.NET\r\n\r\nlet myGraph = Chart.Line([(1,1);(2,2)])\r\n\r\nlet myLayout = \r\n    Html.div  [\r\n        Attr.children [\r\n            Html.h1 [ Attr.children \u0022Hello world from Dash.NET!\u0022]\r\n            Html.h2 [ Attr.children \u0022Take a look at this graph:\u0022]\r\n            Graph.graph \u0022my-ghraph-id\u0022 [Graph.Figure (myGraph |\u003E GenericChart.toFigure)] []\r\n        ]\r\n    ]\r\n\r\nlet test = \r\n    DashApp.initDefault()\r\n    |\u003E DashApp.withLayout myLayout\r\n\u0060\u0060\u0060\r\n\r\n![](img/hello-graph.png)\r\n\r\n---\r\n\r\n\u003Cbr\u003E\r\n\r\n### callbacks\r\n\r\nCallbacks describe the interactive part of your \u0060DashApp\u0060. \r\n\r\n#### single output\r\n\r\nCallbacks with single outputs describe either a (1 -\u003E 1) or (n -\u003E 1) dependency between components.\r\n\r\nIn the most basic case, you have one input component, which updates one output component (1 -\u003E 1). For both you need to assign the property of the component that will be part of the callback. Additionally, a function is needed that takes the input and returns the output. Lets first define the layout for this example:\r\n\r\n\u0060\u0060\u0060fsharp\r\nopen Dash.NET.Html\r\nopen Dash.NET.DCC\r\nopen ComponentPropTypes\r\n\r\nlet myLayout = \r\n    Html.div [\r\n        Attr.children [\r\n            Html.h1 [Attr.children \u0022Hello world from Dash.NET!\u0022]\r\n            Html.h2 [Attr.children \u0022Tell us something!\u0022]\r\n            Input.input \u0022test-input\u0022 [Input.Type InputType.Text] []\r\n            Html.h2 [Attr.children \u0022test-output\u0022] \r\n        ]\r\n    ]\r\n\u0060\u0060\u0060\r\n\r\nThere are multiple ways of defining callbacks, all of which use the respective \u0060DashApp.singleOut\u0060 overloads for (1 -\u003E 1), as well as (1 -\u003E n) callbacks. \r\n\r\nThe most simple (1 -\u003E 1) callback needs:\r\n- 1 \u0060CallbackInput\u0060, which is a representation of the input component and the property that triggers the callback\r\n- 1 \u0060CallbackOutput\u0060, which is a representation of the output component and the property that will be updated by the callback\r\n- A function taking as many inputs as there are input components (1 in this case) that creates the callback output\r\n\r\n\u0060\u0060\u0060fsharp\r\n// a 1 -\u003E 1 callback\r\nlet testCallback =\r\n    Callback.singleOut(\r\n        CallbackInput.create(\u0022test-input\u0022,\u0022value\u0022),       // \u003C- Input of the callback is the \u0060value\u0060 property of the component with the id \u0022test-input\u0022\r\n        CallbackOutput.create(\u0022test-output\u0022,\u0022children\u0022),    // \u003C- Output of the callback is the \u0060children\u0060 property of the component with the id \u0022test-output\u0022\r\n        (fun (input:string) -\u003E                              // this function takes a string as input and returns another message.\r\n            sprintf \u0022You said : %s\u0022 input\r\n        )\r\n    )\r\n\u0060\u0060\u0060\r\n\r\n![](/img/callback.gif)\r\n\r\n#### using Dash.NET operators\r\n\r\nWhile above usage of callbacks is the most similar to the original python library, we can leverage the type System of F# to make those calls a little bit safer.\r\n\r\nTo simplify the generation of \u0060CallbackInput\u0060 and \u0060CallbackOutput\u0060, as well as making sure you are updating the right property in the callback handler function, you can use the custom operators provided by Dash.NET:\r\n\r\n- \u0060@.\u0060 defines \u0060CallbackInput\u0060 or \u0060CallbackOutput\u0060 (as well as \u0060CallbackState\u0060, more on that later) in a typesafe way, so you don\u0027t need to write the properties in string from anymore.\r\n\r\n- \u0060=\u003E\u0060 defines a \u0060CallbackResultBinding\u0060, which is the representation of a function result bound to the given output property (this is more valuable when we come to multioutput callbacks later)\r\n\r\nHere is the same simple callback using Dash.NET operators:\r\n\r\n\u0060\u0060\u0060fsharp\r\nopen Dash.NET.Operators\r\n\r\nlet testCallback =\r\n    Callback.singleOut(\r\n        \u0022test-input\u0022 @. Value,       // \u003C- Input of the callback is the \u0060value\u0060property of the component with the id \u0022test-input\u0022, now typesafe\r\n        \u0022test-output\u0022 @. Children,    // \u003C- Output of the callback is the \u0060children\u0060 property of the component with the id \u0022test-output\u0022, now typesafe\r\n        (fun (input:string) -\u003E                              // this function takes a string as input and returns another message, now bound to the output property\r\n            \u0022test-output\u0022 @. Children =\u003E sprintf \u0022You said : %s\u0022 input\r\n        )\r\n    )\r\n\r\n\u0060\u0060\u0060\r\n\r\nIf you don\u0027t like operators, you can still make your callbacks safer using the type safe \u0060create\u0060 overloads and \u0060CallbackResultBinding.create\u0060:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet testCallback =\r\n    Callback.singleOut(\r\n        CallbackInput.create(\u0022test-input\u0022 ,Value),       // \u003C- Input of the callback is the \u0060value\u0060 property of the component with the id \u0022test-input\u0022\r\n        CallbackOutput.create(\u0022test-output\u0022, Children),    // \u003C- Output of the callback is the \u0060children\u0060 property of the component with the id \u0022test-output\u0022\r\n        (fun (input:string) -\u003E                              // this function takes a string as input and returns another message.\r\n            CallbackResultBinding.bindResult \r\n                (CallbackOutput.create(\u0022test-output\u0022, Children))\r\n                (sprintf \u0022You said : %s\u0022 input)\r\n        )\r\n    )\r\n\u0060\u0060\u0060\r\n\r\n#### multiple outputs\r\n\r\nThe following example shows how to define a (n -\u003E n) multi output callback, again first with the most python-like way, and then in more type safe .NET manner.\r\n\r\nlet\u0027s first define the layout used in this example:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet testLayout =\r\n    Html.div [\r\n        Attr.children [\r\n            Html.h1 [Attr.children \u0022Hello world from Dash.NET!\u0022]\r\n            Input.input \u0022test-input1\u0022 [Input.Type InputType.Number; Input.Value 2.] []\r\n            Input.input \u0022test-input2\u0022 [Input.Type InputType.Number; Input.Value 3.] []\r\n            Html.h2 [Attr.children \u0022first number times 2 is:\u0022]\r\n            Html.div [Attr.children \u0022test-output1\u0022] \r\n            Html.h2 [Attr.children \u0022first number times squared is:\u0022]\r\n            Html.div [Attr.children \u0022test-output2\u0022] \r\n            Html.h2 [Attr.children \u0022second number times 3 is:\u0022]\r\n            Html.div [Attr.children \u0022test-output3\u0022]\r\n            Html.h2 [Attr.children \u0022second number squared is:\u0022]\r\n            Html.div [Attr.children \u0022test-output4\u0022]\r\n        ]\r\n    ]\r\n\u0060\u0060\u0060\r\n\r\nWe will now create a (2 -\u003E 4) callback, where we multiply and square each number.\r\n\r\nTo define multi output callbacks, use \u0060Callback.multiOut\u0060:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet multiOutCallbackExample =\r\n    Callback.multiOut(\r\n        [\r\n            CallbackInput.create(\u0022test-input1\u0022, \u0022value\u0022)\r\n            CallbackInput.create(\u0022test-input2\u0022, \u0022value\u0022)\r\n        ],\r\n        [\r\n            CallbackInput.create(\u0022test-output1\u0022, \u0022children\u0022)\r\n            CallbackInput.create(\u0022test-output2\u0022, \u0022children\u0022)            \r\n            CallbackInput.create(\u0022test-output3\u0022, \u0022children\u0022)\r\n            CallbackInput.create(\u0022test-output4\u0022, \u0022children\u0022)\r\n        ],\r\n        (fun (input1:float) (input2:float) -\u003E\r\n            [\r\n               input1 * 2.\r\n               input1 * input1\r\n               input2 * 3.\r\n               input2 * input2\r\n            ]\r\n        )\r\n    )\r\n\u0060\u0060\u0060\r\n\r\n![](img/multi-callback.gif)\r\n\r\n#### Recommendations for callbacks (especially multi output callbacks)\r\n\r\nAs you might already see, multi outputs are a lot trickier to do right this way, mainly due to two problems:\r\n\r\n1. The fact that the output must be an array, where the **position of the result will be mapped to the same position in the \u0060CallbackOutput\u0060 array** opens possibilities for a lot of mixups and bugs, while being hard to debug aswell.\r\n\r\n2. Additionally to 1., **when your outputs must be of different types, you must box all results to keep them in the same collection**, therefore returning an object collection which is even more obstrusive because you loose the descriptive type annotation of the callback, as it will now be something along the lines of \u0060Callback\u003C*A -\u003E seq\u003Cobj\u003E\u003E\u0060\r\n\r\nTo tackle both issues, we recommend your Calllback functions to **always return CallbackResultBindin(s)**, as they can be used internally to be always mapped to the correct output property, and internally box the result aswell. Here is a version of this for the initial example, also using Dash.NET custom operators:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet multiOutCallbackExample =\r\n    Callback.multiOut(\r\n        [\r\n            \u0022test-input1\u0022 @. Value\r\n            \u0022test-input2\u0022 @. Value\r\n        ],\r\n        [\r\n            \u0022test-output1\u0022 @. Children\r\n            \u0022test-output2\u0022 @. Children          \r\n            \u0022test-output3\u0022 @. Children\r\n            \u0022test-output4\u0022 @. Children\r\n        ],\r\n        (fun (input1:float) (input2:float) -\u003E\r\n            [\r\n               \u0022test-output1\u0022 @. Children =\u003E input1 * 2.\r\n               \u0022test-output3\u0022 @. Children =\u003E input2 * 3.\r\n               \u0022test-output2\u0022 @. Children =\u003E input1 * input1\r\n               \u0022test-output4\u0022 @. Children =\u003E input2 * input2\r\n            ]\r\n        )\r\n    )\r\n\u0060\u0060\u0060\r\n\r\nnote that this callback still maps to the correct output components although the order is intentionally different from the input array.\r\n\r\n---\r\n\r\n### Using state \r\n\r\nUse states as non-triggering input for callbacks. You can use the optional \u0060State\u0060 constructor parameter of \u0060Callback\u0060. Just keep in mind that the state will be used for your callback function parameters _after_ the callback inputs:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet myLayout = \r\n    Html.div [\r\n        Attr.children [\r\n            Html.h1 [Attr.children \u0022Hello world from Dash.NET!\u0022]\r\n            Html.h2 [Attr.children \u0022Tell us something!\u0022]\r\n            Input.input \u0022test-input\u0022 [Input.Type InputType.Text] []\r\n            Html.h3 [Attr.children \u0022Input below will not trigger the callback\u0022]\r\n            Input.input \u0022test-input-state\u0022 [Input.Type InputType.Text] []\r\n            Html.h2 [Attr.children \u0022test-output\u0022]\r\n        ]\r\n    ]\r\n\r\nlet testCallback =\r\n    Callback.singleOut(\r\n        \u0022test-input\u0022 @. Value,\r\n        \u0022test-output\u0022 @. Children,\r\n        (fun (input:string) (state:string) -\u003E\r\n            \u0022test-output\u0022 @. Children =\u003E (\r\n                sprintf \u0022You said : \u0027%s\u0027 and we added the state: \u0027%s\u0027\u0022 input state)\r\n        ),\r\n        State = [\u0022test-input-state\u0022 @. Value]\r\n    )\r\n\r\nlet test = \r\n    DashApp.initDefault()\r\n    |\u003E DashApp.withLayout myLayout\r\n    |\u003E DashApp.addCallback testCallback\r\n\r\n\u0060\u0060\u0060\r\n\r\n![](img/state.gif)\r\n\r\n---\r\n\r\n# Development\r\n\r\n_Note:_ The \u0060release\u0060 and \u0060prerelease\u0060 build targets assume that there is a \u0060NUGET_KEY\u0060 environment variable that contains a valid Nuget.org API key.\r\n\r\n### build\r\n\r\nCheck the [build.fsx file](https://github.com/plotly/Dash.NET/blob/dev/build.fsx) to take a look at the  build targets. Here are some examples:\r\n\r\n\u0060\u0060\u0060shell\r\n# Windows\r\n\r\n# Build only\r\n./build.cmd\r\n\r\n# Full release buildchain: build, test, pack, build the docs, push a git tag, publsih thze nuget package, release the docs\r\n./build.cmd -t release\r\n\r\n# The same for prerelease versions:\r\n./build.cmd -t prerelease\r\n\r\n\r\n# Linux/mac\r\n\r\n# Build only\r\nbuild.sh\r\n\r\n# Full release buildchain: build, test, pack, build the docs, push a git tag, publsih thze nuget package, release the docs\r\nbuild.sh -t release\r\n\r\n# The same for prerelease versions:\r\nbuild.sh -t prerelease\r\n\r\n\u0060\u0060\u0060\r\n\r\n### docs\r\n\r\nThe docs are contained in \u0060.fsx\u0060 and \u0060.md\u0060 files in the \u0060docs\u0060 folder. To develop docs on a local server with hot reload, run the following in the root of the project:\r\n\r\n\u0060\u0060\u0060shell\r\n# Windows\r\n./build.cmd -t watchdocs\r\n\r\n# Linux/mac\r\n./build.sh -t watchdocs\r\n\u0060\u0060\u0060\r\n\r\n### Run the dev server application\r\n\r\nThe dev server is useful to test new components/code. After a successful build \r\nyou can start the dev server application by executing the following command in your terminal:\r\n\r\n\u0060\u0060\u0060\r\ndotnet run -p ./dev/Dash.NET.Dev.fsproj\r\n\u0060\u0060\u0060\r\n\r\nAfter the application has started visit [https://localhost:5001/](https://localhost:5001/) or [http://localhost:5000/](http://localhost:5000/) in your preferred browser."}]